________________________________________________________________

□■□ 自由軟體鑄造場電子報第 225 期 | 2013/08/27 □■□
________________________________________________________________

◎ 本期主題：Android 應用程式開發：如何錄製影片
◎ 訂閱網址︰http://www.openfoundry.org/tw/news/
◎ 下次發報時間︰2013/09/10

□ 本期標題 □__________________________________________________

■ [技術專欄] Android 應用程式開發：如何錄製影片

■ [法律專欄] 試論「公眾授權條款」之名詞辨析與基礎概念

■ [源碼專案] Darling 專案讓 Linux 運行 OS X 應用軟體指日可待

■ [源碼新聞] Linux 基金會加入 GNOME 諮詢委員會

■ [源碼新聞] 困頓中求轉進 - BlackBerry 與 Mozilla 持續合作 Peach Fuzzing

■ [源碼新聞] GitHub - 工具輔助加上授權協助漸成開源趨勢

■ [源碼新聞] Google 與 IBM 合作發展新一代資料中心技術

■ [源碼新聞] Candy Chang 透過共同藝術學到的社群與協作經驗

■ [源碼新聞] 開放設計的全新樣貌 由我們共同想像

■ [源碼新聞] 2013 年九月份社群活動列表

□ 本期內容 □__________________________________________________

■ [技術專欄] Android 應用程式開發：如何錄製影片

謝良奇／編譯

許多 Android 裝置的相機也有錄影功能，不過程式碼會稍微複雜一點。MediaRecorder API 針對聲音和影像提供了錄製控制功能，因此是你在 Android 上所有錄影功能的基礎。查看其 API 文件以了解其狀態機的完整示意圖。雖然 MediaRecorder 幫你做了許多工作，為了使其正常運作，有許多你得按照一定順序進行的步驟，此一教學稍後將加以解說。我們會使用預覽 XML 和來自先前教學的基本應用程式結構。

設定 MediaRecorder

首先，開啓 AndroidManifest.xml，在之前教學中設定的相機權限上，增加錄音權限：

＜manifest .... ＞
  ＜uses-permission android:name="android.permission.CAMERA" /＞
  ＜uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" /＞
  ＜uses-permission android:name="android.permission.RECORD_AUDIO" /＞
  ＜uses-feature android:name="android.hardware.camera" /＞


我們會在 MyCameraActivity.java 中撰寫獨立的方法來處理影片。第一步是為相機解鎖，接著建立新的 MediaRecorder。我們讓這個方法傳回真假布林值，好讓稍後我們要開始錄影前，可以檢查一切是否設定妥當，因此可避免不少可能的錯誤：

private MediaRecorder mr;
protected boolean prepareForVideoRecording() {
  camera.unlock();
  mr = new MediaRecorder();
  mr.setCamera(camera);
}


為相機解鎖這一步是必須的，可以讓 media 程序存取到相機。如果你只是拍照，Camera API 會自動幫你處理好，你只需要在錄影時做這件事。

接著，我們必須對 MediaRecorder 做各種設定：聲音與影像來源、配置 (profile)、輸出檔案、預覽顯示。

private static final int MEDIA_TYPE_VIDEO = 1;
protected boolean prepareForVideoRecording() {
  camera.unlock();
  mr = new MediaRecorder();
  mr.setCamera(camera);
  mr.setAudioSource(MediaRecorder.AudioSource.CAMCORDER);
  mr.setVideoSource(MediaRecorder.VideoSource.CAMERA);
  mr.setProfile(CamcorderProfile.get(CamcorderProfile.QUALITY_HIGH));
  mr.setOutputFile(getOutputMediaFile(MEDIA_TYPE_VIDEO).toString());
  mr.setPreviewDisplay(preview.getHolder().getSurface());
}


AudioSource 與 VideoSource 就如名稱所示。聲音部分有許多選項，包含 VOICE_CALL 與 MIC，在此我們用 CAMCORDER。在影像上你只有 CAMERA 與 DEFAULT 可以選擇。

setProfile() 是個快捷功能（從 API 8 開始提供），可以讓你一次設定好一連串的錄影與錄音編碼和格式資訊。如果你想手動進行，不管是使用了之前的 API，或是你想要更為細緻的控制，以下是設定範例程式：

mr.setOutputFormat(MediaRecorder.OutputFormat.DEFAULT);
mr.setAudioEncoder(MediaRecorder.AudioEncoder.AMR_NB);
mr.setVideoEncoder(MediaRecorder.VideoEncoder.H264);


更多選項請查看 MediaRecorder API 文件。有關哪些選項會被自動設定請見 CamcorderProfile API 文件。

你可以看到呼叫 getOutputMediaFile() 指定了影片輸出檔案類型，目前我們的方法沒有加以處理，以下是額外的程式碼：

private File getOutputMediaFile(int type) {
// Get directory and timestamp as before
  if (type == MEDIA_TYPE_IMAGE) {
    return new File(dir.getPath() + File.separator + "IMG_"  
                    + timeStamp + ".jpg");
  } else if (type == MEDIA_TYPE_VIDEO) {
    return new File(dir.getPath() + File.separator + "VID_"  
                    + timeStamp + ".3gp");
  } else {
    return null;
  }
}


如果你使用了不同的編碼，你可能得更改結尾的檔案類型。最後，預覽就如之前我們所設定的一樣，我們只需呼叫適當方法以便取得所使用的 surface，好讓 MediaRecorder 與其溝通。

錄影

錄影前最後要做的事是準備好 MediaRecorder：

protected boolean prepareForVideoRecording() {
  // as above
  try {
	mr.prepare();
  } catch (IllegalStateException e) {
	Log.e(TAG, "IllegalStateException when preparing MediaRecorder "
          + e.getMessage());
	e.getStackTrace();
	releaseMediaRecorder();
	return false;
  } catch (IOException e) {
    Log.e(TAG, "IOException when preparing MediaRecorder "
          + e.getMessage());
    e.getStackTrace();
	releaseMediaRecorder();
	return false;
  }
  return true;
}
private void releaseMediaRecorder() {
  if (mr != null) {
    mr.reset();
    mr.release();
    mr = null;
    camera.lock();
  }
}


很簡單，我們只是在我們的 MediaRecorder 上呼叫 API 的 prepare() 方法，並處理例外狀況。重要的是記得在任何例外發生時，釋放 MediaRecorder 並回傳 false。在重置並釋放 MediaRecorder 後，我們必須重新鎖住相機，好讓應用程式保留其控制權。記得你必須在暫停時釋放相機，我們在之前教學中已經示範過。

在開始錄影前，我們要在預覽面板 (preview pane) 上加入按鈕，並設定該按鈕來停止或開始錄影：

private Button recordVideoButton;
private boolean isRecording = false;
private void setUpLayout() {
  // as in previous tutorials
  setUpVideoButton();
}
private void setUpVideoButton() {
  Button recordVideoButton = (Button) findViewById(R.id.button_video);
  setUpButton(recordVideoButton, "Start video");
  recordVideoButton.setOnClickListener(
    new View.OnClickListener() {
      public void onClick(View v) {
        if (isRecording) {
          mr.stop();
          releaseMediaRecorder();
          camera.lock();
          recordVideoButton.setText("Start video");
          isRecording = false;
        } else {
          if (prepareForVideoRecording()) {
             mr.start();
             recordVideoButton.setText("Stop video");
             isRecording = true;
          } else {
             // Something has gone wrong! Release the camera
             releaseMediaRecorder();
             Toast.makeText(MyCameraActivity.this,
                            "Sorry: couldn't start video",
                            Toast.LENGTH_LONG).show();
          }
        }
      }
    }
  );	
}


你也必須把按鈕加到 XML 中。上面的程式碼讓我們用同一個按鈕來開始與停止錄影。這表示不管是否正在錄影中，該按鈕都會顯示出來，這是個最大化用戶資訊，同時最小化螢幕空間使用的便利方式。如果應用程式已經在錄影，當按鈕被點選，表示用戶希望停止錄影。於是我們停止並釋放 MediaRecorder，重新鎖定相機，改變按鈕文字並重置 isRecording。

如果應用程式沒在錄影，我們希望開始錄影。假如設定方法傳回的是 true，也就是 MediaRecorder 已準備妥當，我們就開始錄影，改變按鈕文字並重設 isRecording。如果 MediaRecorder 沒設定好，我們再次將其釋放，顯示一個 Toast 訊息讓用戶得知問題所在。

和 Camera 相片儲存有所不同的是，對於 MediaRecorder，傳入儲存的檔案名稱就會自動處理好影片的儲存，你不需要自行處理儲存功能。不過，它所做的只是存入你所提供的檔名中。如果你希望對影片做其他處理，像是秀給用戶看或讓他們編輯，你必須進一步擴展應用程式以達成這些功能。


原文網址：

1.Android 應用程式開發：如何錄製影片
http://www.linux.com/learn/tutorials/729988-android-app-development-how-to-capture-video
_______________________________________________________________

■ [法律專欄] 試論「公眾授權條款」之名詞辨析與基礎概念

葛冬梅／文

接觸過自由開源軟體 (Free and Open Source Software)、創用CC 授權條款 (Creative Commons licenses) 與相關領域的人對於「公眾授權條款」這個詞應該都不陌生，因為在許多場合或者文獻資料中常常都會看到它。但是，「公眾授權條款」這樣一個被廣泛利用的中文辭彙，其實並沒有被清楚定義，甚至也沒有人嘗試加以描述或說明，因此筆者透過這篇文章，嘗試對其內涵進行整理、歸納，並且給予「公眾授權條款」一個基礎的解釋概念，讓未來有需要利用到這個詞的人，有一個參考的依據。 

由於本篇文章將會綜合討論不同領域的授權條款，以及比較著作權與專利權的不同之處，這些條款的內容與權利的態樣均不完全相同，但囿於篇幅，筆者無法詳細介紹其中所有的相關內容，因此在相關段落中，還請讀者自行參閱引註當中的延伸資訊，在此先行說明。 

【「公眾授權條款」一詞被普遍地利用】 

若是我們從最基本的 Google 搜尋開始，來觀察目前「公眾授權條款」一詞在網路上被使用的狀況，可以發現在所搜尋到的網頁中，多是直接利用「公眾授權條款」一詞而未有內涵上的說明，以下列舉出幾項較具代表性的網頁與文章（註一）： 

1、論公眾授權條款之相容性：以創用CC 授權條款及 GNU 自由文件授權條款為例 

上篇：http://creativecommons.tw/in-depth/444 
下篇：http://creativecommons.tw/in-depth/446 

此為學術專論文章，專門探討創用CC（註二）與 GNU Free Documentation License（GFDL，註三）這兩種適用於文件的授權條款，彼此間相容性的議題。在文章標題與內文中，作者直接採用「公眾授權條款」一詞作為上位概念，來涵蓋統稱創用CC 授權條款與 GFDL。 

2、「中央研究院漢字部件檢字系統」2.65 版釋出聲明 

http://cdp.sinica.edu.tw/cdphanzi/declare.htm 

這是中央研究院資訊科學研究所的文獻處理實驗室，所釋出的一套中文漢字構字系統。軟體系統程式碼方面採用 "GNU General Public License 3.0 (GPL-3.0)" 來授權，這份授權條款的中譯名即為「GNU 公眾授權條款 3.0 版本」（註四）。 

3、開放研討系列之一：大眾協作與公眾授權、自由軟體與授權條款簡介 

http://registrano.com/events/e7ddc8 

這是中央研究院資訊科學研究所的開放空間地理資訊小組，在今年（102 年）所舉辦的系列研討會，內容與開放資料、自由開源軟體的結合應用相關，其中說明授權條款為主軸的第一場研討會，即採用了「公眾授權」這個名稱。 

4、從革奴大眾公有版權 (GPL) 看資訊產業的未來 

http://user.frdm.info/ckhung/a/c_83.php 

此為洪朝貴教授的文章，該文章在 1998 年底便完成並公開發表，文中討論到 GPL 這份授權條款，最初作者是以「革奴大眾公有版權」來作為 GPL 的中譯名，但是在 15 年後的 2013 年初，洪教授卻將後續文章中 GPL 的中譯名改為「革奴公眾授權」。從洪教授此一名詞的替換，可以合理推測，「公眾授權」這一名詞的使用近年在台灣愈見主流與普遍。 

【「公眾授權條款」概念範圍廣泛】 

以上所引用的相關資訊有專業文章、授權聲明、演講活動與個人網誌心得，而這些內容幾乎都與自由開源軟體（註五）及創用CC 授權條款有關，前者以釋出軟體程式碼為主，而後者以釋出程式碼以外的著作內容為主，例如文章、音樂、圖畫與照片等等。 

觀察這些「公眾授權條款」的授權特性，可以發現其中最大的特點就是沒有特定的授權對象，也就是社會大眾中的任何一個人，均可以根據授權條款的規則來利用作者所釋出的作品，就作品的「使用端」來看，並不會因為身份、工作單位或者居住的地區而有所分別。 

其次，大部分的授權規定是以著作權為主，不過個別的細部規則並不相同，例如：所有的自由開源軟體授權條款，均允許使用者可以直接使用軟體程式，此外也允許使用者直接修改、重製與散布該軟體程式；但是像創用CC 中的「姓名標示–非商業性-禁止改作」授權條款，雖然可以讓使用者重製與散布該著作內容，但卻沒有將修改內容的權利授予使用者（註六），此外也限制使用者利用的範圍不可以涉及商業利益與直接的金流交換。所以在著作權部份，多數的公眾授權條款之間最基本的共通點是：這些條款均授權使用者可以直接使用、重製與散布著作內容，但是其他授權細項則會有所差異。 

值得一提的是，近年一些新近制定的自由開源軟體授權條款中，也將專利授權的相關規定納入到條款中，這些規定的大意是，當程式的創作人或貢獻者，將其已擁有或未來打算申請的專利技術寫入到軟體程式當中，並以自由開源軟體的授權方式釋出該程式時，依照這些新近條款的規定，使用者在依條款規則利用程式碼的範圍之內，也可以合法利用這些專利技術，而不需要另外再向該程式的創作人與貢獻者取得專利授權。此一專利授權機制，讓自由開源軟體專案的使用者，在利用軟體程式的同時將更有保障，而不需要擔心侵犯到作者的專利權利卻不自知。

行文至此，為了讓讀者可以言簡意賅的了解「公眾授權條款」的基礎概念，筆者下列採用較為通俗的用語，同時加上輔助說明，來呈現所觀察到上述「公眾授權條款」使用範例的統合概念：「公眾授權條款」是指，將一項作品或產品相關的智慧財產權利，在無償地基礎下授權給願意接受授權規則的不特定社會大眾的授權條款，使用者接受這些授權規則時並不需要書立額外的紙本文件，而授權規則至少可以讓作品或產品的使用者，取得閱讀與傳播散布這些授權內容的基本地位。 

【「公眾授權條款」以允許複數端點傳散授權內容為基本模式】 

在這樣的基礎概念下，「公眾授權條款」是重在基本的資訊傳播散布層面，只要一份授權條款允許不特定的社會大眾可以取得、閱讀、研究以及再次散布這些智慧財產內容，那麼在當代就很容易被稱為「公眾授權條款」的釋出模式。因此各類的自由開源軟體授權條款，會被稱為「公眾授權條款」；而創用CC 機制下的六種授權組合也屬於公眾授權條款，即使其中最嚴格的「姓名標示–非商業性–禁止改作」條款禁止著作被修改，也禁止著作被應用於跟商業牟利有關的行為，但是由於透過這份條款授權的作品，仍可以被不特定社會大眾來閱讀與傳散，並且該作品也可以被使用者依原條款續行向其他人進行散布，因此多數評論者同意，此亦屬於「公眾授權條款」的一種類型。

各國政府近來大力支持與扶助的開放資料 (Open Data) 應用模式，由於是將許多經編輯後具著作權保護地位的資料庫 (database)，與純粹不授保護地位的資料集 (dataset) 資訊提供給不特定的社會大眾來接觸與使用，因此亦屬於「公眾授權條款」的一種類型（註七）。此外，與自由開源軟體、創用CC 一脈相承的開源硬體 (Open Source Hardware) 所使用的授權模式，由於是將硬體裝置的構造資訊、電路配置以及其中所應用到的軟體程式碼等智慧財產權，均授權出來給一般社會大眾自由散布與利用，且使用者也可以後續自主的散布這些相關內容，因此也算是「公眾授權條款」的一種類型（註八）；然而，有些硬體資訊雖然一樣是以無償的方式被提供出來，但是僅允許不特定社會大眾瀏覽、研究、參考，卻不容許他人依照這些資訊另外製造出產品，使用者也可能無法後續自主散布相關內容，若真如此，那麼此種方式便是偏向於舊式免費軟體 (Freeware)、共享軟體 (Shareware) 的運用模式，而無法被視為當代擴張讓使用者據以自主閱讀、應用、實施，與傳散的公眾授權模式。

之所以稱免費軟體與共享軟體的提供方式（註九），原則上並不是「公眾授權條款」，因為其程式或作品的提供方式，多是以一個端點散布給多個端點的模式進行，也就是說，雖然不特定社會大眾皆可上網取得這些程式，不過此一下載行為多僅能至該軟體的官方網站進行，使用者在下載這些程式之後，並沒有續行傳散的地位，而當代所謂的公眾授權模式，強調的卻是多個端點散布給多個端點，來強化程式或作品的傳散效率；而再進一步分析，即使部份的免費軟體與共享軟體允許使用者自行傳散，但是使用者仍然無法取得程式源碼，或者其他詳細的智慧財產資料，這也會讓使用者實際上處於僅能執行、但卻無法細部閱讀、研究該程式的狀態，也因此使用者對此程式並不具有完整傳散相關資料的地位，所以免費軟體與共享軟體，便不能被列入當代「公眾授權條款」的運用範疇。 

【「創造性公眾授權條款」促進創意的發揮與實踐】 

另外值得補充說明的是，當代的「公眾授權條款」之中，不僅允許智慧財產內容在特定條件下能被重製與傳散，有些條款還允許一般社會大眾延伸應用，甚至允許使用者據以實際製造出商用產品，例如：在創用CC 授權條款中，除了帶有「禁止改作」特性的二款授權條款之外，其餘四款均允許使用者自由修改著作以及散布修改後的衍生著作；而前段所提到的開源硬體授權條款，除了將硬體構造與其組裝資訊提供給社會大眾進行傳散與修改之外，任何取得這些資料之人，還可以利用這些資料來自行製造相關裝置，而不需要另外取得權利人額外的書面同意；而著名的自由開源軟體，其各類的授權條款更是以允許使用者自由修改、產生衍生程式來作為授權規則的基石。 

本段所列這些條款的特性基本上是承襲自由軟體 (Free Software) 中四大自由的精神而來（註十），而四大自由的核心精神是指，身為程式使用者應該擁有使用、研究、修改與散布程式的自由，同時，還有著將這些研究與修改內容回饋給其他開發者與開發社群的自由，以創造出一個程式可以不斷被不特定社會大眾主動積極來研究改良的自由環境。這樣的精神被推廣與落實到程式開發以外的領域中，就成為我們現在所看到的創用CC、開源硬體等新興授權範疇的擴散應用。 

而若是深入一層來觀察四大自由精神與隨之遞嬗的衍生授權模式，可以發現，授權條款只是一種工具，透過這樣的工具，可以營造出一個資訊與內容持續被社會大眾主動積極研究改進、同時激發大眾創意被廣泛實踐的自由環境，這樣的研究改進方式，與過往傳統封閉式、僅侷限在特定權利人與被授權人之間的互動方式，是完全不同的，相對來說，容許使用者對釋出內容再行增添修改的「公眾授權條款」，較諸禁止修改與延伸應用的基本「公眾授權條款」更能發揮與落實各種創意，因此筆者取其「創意得以被擴大發揮與實踐」之意，將這類條款稱之為「創造性公眾授權條款」。 

除了自由開源軟體、開源硬體以及四款允許改作的創用CC 授權條款之外，原則上開放資料的授權模式也可以被歸類為「創造性公眾授權條款」。因為考察目前各國政府推廣開放資料的運作模式，對於資料的定位，皆為中性客觀數據與其整合的呈現，故本質上開放資料的授權模式若是不允許一般不特定社會大眾修改或延伸應用的話，是為無法想像，因為唯有讓資料是可以讓大眾自由添補與更新，才能讓使用者透過整合不同來源的資料，來發揮與實踐其創意，從這個觀點來看，目前仍在發展中的開放資料授權模式，亦應屬於「創造性公眾授權條款」。 

【結語】 

綜合以上內容，可以將「公眾授權條款」製成如下的體系圖： 

http://www.openfoundry.org/images/130827/publiclicense/lc_201308_imgs1.png
▲ 圖1：公眾授權條款體系圖 v. 0.7

如此可以清楚看到「公眾授權條款」有兩個層次：一個是讓智慧財產內容與資訊，可以透過不同散布端點被廣泛傳散出去的基本公眾授權層次，另外一個則是讓這些內容與資訊可以被延伸應用、激發創意以及將創意實踐出來的創造性公眾授權層次。筆者在最上位的「公眾授權條款」與「創造性公眾授權條款」兩部份，都以桃紅色來表示，是要刻意凸顯「創造性公眾授權條款」的重要性，因為若是從這些條款的發展歷史來看的話，是先有「創造性公眾授權條款」之後，才衍生出其他僅允許傳散、卻不允許修改內容與資訊的變體授權條款。更進一步來說，自由開源軟體授權條款是最早成形的，這類條款全部都是「創造性公眾授權條款」，在受到自由開源理念的影響之後，創用CC 的授權架構才接著被提出來，不過在此同時，也衍生出了禁止改作的創用CC 授權選項，而在此之後，開源硬體、開放資料等授權型態才依次出現。因此「創造性公眾授權條款」，係屬當代「公眾授權條款」重要的本質要素，這類授權條款在傳散內容與資訊的同時，揹負著積極的目的，那就是讓內容與資訊可以被再次利用與創造，以集合群體創意產生更多更新的內容或作品出來。 

此篇專文所歸納出的「公眾授權條款」概念仍然相當廣泛，只要是允許不特定社會大眾可以使用與傳散內容或資訊的授權條款，並且同時容許這些內容與資訊透過不同的複數端點自主進行後續傳散，就可以稱之為當代的「公眾授權條款」，但是在此同時，也期許讀者能夠了解到，「創造性公眾授權條款」才是這類條款主體靈魂與精神之所在。筆者希望透過本文的歸納與整理，能有助於大眾對於「公眾授權條款」的概念有進一步的理解，同時也期待具有創造性的公眾授權模式，可以被更為廣泛地應用在更多的領域之中，讓被傳散的內容與資訊能夠被實際地再利用與發揮其創意價值，以讓當代的公眾授權模式，能成功地在不同的領域裡，都建立起創意與實用性能互相增補、良性循環的群體生態系。 

---- 

註一：透過 Google 搜尋功能，可以在網路上找到許多直接利用「公眾授權條款」的資料。而由於在用語上，「條款」兩字有時候會被省略掉，因此在搜尋結果中會看到「公眾授權條款」、「公眾授權」夾雜的狀況。

註二：本文所討論的六款創用CC 授權條款，乃是指以下六款：「姓名標示」、「姓名標示-相同方式分享」、「姓名標示-禁止改作」、「姓名標示-非商業性」、「姓名標示-非商業性-相同方式分享」與「姓名標示-非商業性-禁止改作」。關於創用CC 概念與這六款授權條款的介紹請見：http://creativecommons.tw/explore。 

註三：關於 GFDL 的介紹，請參閱：林珈宏，自由軟體說明文件的授權選擇，http://www.openfoundry.org/tw/legal-column-list/2076-2010-07-15-10-22-17。 

註四：關於 GPL-3.0 的介紹請參見：葛冬梅，在四大自由精神之下強化的 GPL-3.0，http://www.openfoundry.org/tw/legal-column-list/1108--gpl3。另外關於 GPL 系列條款相關的介紹與說明，可以至 OpenFoundry 的法律源地網站上搜尋相關文章瀏覽：http://www.openfoundry.org/tw/law-and-licensing。 

註五：本文所謂的自由開源軟體授權條款是指，被自由軟體基金會 (Free Software Foundation, FSF) 分類為符合四大自由的自由軟體授權條款，或者是被開放源碼促進會 (Open Source Initiative, OSI) 認可發布為開源授權條款的條款。自由軟體與四大自由的介紹，請參閱：四大自由與自由軟體，http://www.openfoundry.org/tw/basic-concepts/1448-2010-07-13-09-56-17；自由軟體授權條款的列表請見：Various Licenses and Comments about Them，http://www.gnu.org/licenses/license-list.html#SoftwareLicenses。開放源碼授權條款列表請見：http://opensource.org/licenses/alphabetical；一份授權條款必須符合開放源碼定義 (Open Source Definition, OSD)，才能被認可成為開源授權條款，開放源碼定義的介紹請參閱：開放源碼定義與開放源碼促進會，http://www.openfoundry.org/tw/basic-concepts/1447-2010-07-13-09-57-12。而關於自由開源軟體的統合基本介紹請參閱：http://www.openfoundry.org/tw/basic-concepts/1450-2010-07-13-09-53-46。 

註六：但是為了要讓著作內容在不同媒體或透過不同格式呈現出來，而進行的必要技術上的修改，則是在允許之列，因為這樣的格式轉換程序，並不會被認定為著作權定義下的「改作」行為。

註七：關於開放資料 (Open Data) 概念的介紹，請參閱：林誠夏，從開源軟體到開放資料－論 Open Database License v1.0，http://www.openfoundry.org/tw/legal-column-list/8832-from-open-source-to-open-data-knowing-open-database-license-v10-in-open-source-licensing-way；以及開放知識基金會 (Open Knowledge Foundation, OKF) 所提供的介紹：http://opendatahandbook.org/en/what-is-open-data/index.html。 

註八：關於開源硬體 (Open Source Hardware) 的概念，可以參閱：開源硬體協會 (Open Source Hardware Association, OSHWA) 所訂定的開源硬體定義，http://www.oshwa.org/definition/；以及維基百科上面開源硬體的英文條目內容：http://en.wikipedia.org/wiki/Open-source_hardware。 

註九：關於共享軟體 (Shareware) 與免費軟體 (Freeware) 的介紹，以及與自由開源軟體的差異，請參閱：自由軟體、開放源碼軟體與相近的名詞，http://www.openfoundry.org/tw/basic-concepts/1450-2010-07-13-09-53-46。

註十：關於自由軟體的四大自由介紹，請參閱：四大自由與自由軟體，http://www.openfoundry.org/tw/basic-concepts/1448-2010-07-13-09-56-17。
_______________________________________________________________

■ [源碼專案] Darling 專案讓 Linux 運行 OS X 應用軟體指日可待

謝良奇／編譯

想在 Linux 上跑 iWork？有個致力讓 Apple OS X 程式，在 Linux 作業系統上執行的專案，未來有可能達成這個目標。類似於讓 Linux 得以執行 Windows 應用程式的 Wine 專案，Darling 專案正嘗試為 OS X 應用軟體，建構軟體相容層。

至今該專案可以讓少數 OS X 應用軟體在 Darling 上運行，並且對其他各式應用軟體進行測試，例如 Midnight Commander、QREncoder、Bayon、The Unarchiver、World of Warcraft。目前還不清楚哪些軟體可在 Darling 層上運行。

該專案鎖定的，是運行在 Darwin 軟體核心上的軟體，由於 iOS 與 OS X 都採用此一核心，所以理論上 Darling 層應該也可以跑 iOS 軟體。將 iOS 軟體移植到基於 Linux 的 Android 作業系統的想法，儘管聽來頗有吸引力，Darling 專案的 wiki 網頁表示其中有不少技術障礙，像是把組合語言程式碼移植到以 ARM 為基礎、智慧型手機所使用的 Risc 晶片架構，以及加入對相關軟體框架的支援。

根據該專案 wiki 網頁，Darling 的運作方式就像這樣：它會解析 Darwin 核心的執行檔 (Mach Object Files)，將其載入記憶體中（就像 ld-linux.so 載入 ELF 執行檔一樣），並且加以執行。

除此之外，Darling 還需要以應用程式二進位介面 (Application Binary Interface) 相容的方式，提供 OS X 應用軟體所需的軟體程式庫和框架。

Darling 運用了 GNUstep，這是 Apple 的 Objective-C 軟體程式庫的開放源碼實作，其目標是建構出來的應用軟體可以在 Macintosh、Unix、Windows 上運行。


相關網址：

1.Darling 專案讓 Linux 運行 OS X 應用軟體指日可待
http://www.zdnet.com/os-x-apps-on-their-way-to-linux-courtesy-of-darling-project-7000018051/
_______________________________________________________________

■ [源碼新聞] Linux 基金會加入 GNOME 諮詢委員會

作者是 謝良奇／編譯 

GNOME 基金會 (GNOME Foundation) 執行董事 Karen Sandler 宣布，Linux 基金會 (Linux Foundation) 加入了 Gnome 諮詢委員會。Karen 是在 GNOME 年度歐洲大會 (GUADEC) 開場上作此宣布，她表示，我們很高興看到 Linux 基金會的加入，並且期待彼此緊密合作。他們加入諮詢委員會，是對 GNOME 專案為 GNU/Linux 體系所帶來價值的一種認可，對此我們希望未來能更加以擴展。

Linux 基金會執行董事 Jim Zemlin 表示，參與關鍵自由軟體專案，有助於我們促進並推廣 Linux 核心的任務。GNOME 是一項重要專案，我們希望藉由加入諮詢委員會來持續合作。

諮詢委員會包括了透過提供資金與專業諮詢，對 GNOME 專案提供支持的利益相關組織與公司。


相關網址：

1.Linux 基金會加入 GNOME 諮詢委員會
http://www.muktware.com/5802/linux-foundation-joins-gnome-advisory-board
_______________________________________________________________

■ [源碼新聞] 困頓中求轉進 - BlackBerry 與 Mozilla 持續合作 Peach Fuzzing

黃郁文／編譯

雖然在本月 12 日 (2013/8/12) 已宣布暫停交易公司股票，BlackBerry 宣佈其正在尋求轉進方案，包含以出售、合資的模式來解決股票收益不斷下滑的狀況。然而其近期仍著手與 Mozilla 合作建置網路安全偵察類工具 Fuzzing，以提升相關產品在網路應用上的使用安全。Fuzzing 類型專案，概念上簡要來說是一種偵錯軟體，其方式是將多樣隨機或不正確資料置入應用程式、或個別專案的程式碼中 (fault injection)，以找出該程式無法妥當處理的資料，並進一步測試程式是否能在各種干擾狀況下正常運作。Fuzzing 可用於各式各樣程式，也可延伸到資料庫軟體或共享記憶體上進行偵錯測試，它能指示程式的開發者，哪一部份的程式缺點需要進一步被稽核，亦可搭配其他除錯工具，以發揮更大功效。不過，這類的程式原則上僅能確保受測元件在一些例外情況下仍能正常運作，並不表示通過此類程式的測試，被測元件就會是完美無瑕的程式。

BlackBerry 與開放源碼專案為主要產品的 Mozilla 之間已非第一次合作，亦非其第一次參與開放源碼專案的增補與運用，大致上，BlackBerry 在 2010 年經由註冊 GitHub 開始進入開放源碼的世界，其並曾將 QNX 作業系統進行開放，亦強調公司一直有在 Webkit 的開源架構方面耕耘。此次再次與 Mozilla 就 Fuzzing 性質的開源專案展開合作，選擇的合作專案為 Peach。Peach 是一個建構於開源基礎的 fuzzing 框架，其能同時進行輸入資訊變體 (mutation-based) 與輸入資訊進化 (generation-based) 這兩大項目的偵錯測試，該專案創立於 2004 年，目前已進行到第三版第一測試版本。而 BlackBerry 與 Mozilla 雙方寄望能透過本次合作，結合雙方力量提升 Peach 專案在瀏覽器上的測試能力與偵錯功能，以進一步改善網路安全，提供客戶更為完善的保護。Mozilla 現已成功於 HTML5 環境下利用 Peach 進行 Fuzzing 測試，範圍包括：影像格式、影音多媒體格式、字型，及 WebGL、WebAudio，WebRTC 等核心應用程式上，以有效提高 Firefox 及 Firefox OS 的使用安全性。此外，Mozilla 除了與 BlackBerry 合作提升 Fuzzing 專案的應用範圍外，近期亦已公開另一個開放源碼安全測試平台 - Minion。Minion 著重正確性與簡易性，強調不論是開發者或是安全專家，都可利用該平台所提供的安全性測試工具，目前這些工具源碼亦已放置於 GitHub 上，值得感興趣的朋友造訪此網站略探一二。


相關網址：

1、Mozilla 與 BlackBerry 合作進行 Peach Fuzzing
http://www.linuxinsider.com/story/Mozilla-BlackBerry-Team-Up-on-Peach-Fuzzing-78615.html

2、BlackBerry 與 Mozilla 合作提升網路安全
http://crackberry.com/blackberry-teams-mozilla-further-web-security-through-fuzzing

3、Minion 安全測試專案於 MozillaWiki 上的說明頁面
https://wiki.mozilla.org/Security/Projects/Minion
_______________________________________________________________

■ [源碼新聞] GitHub - 工具輔助加上授權協助漸成開源趨勢

黃郁文、林誠夏／編譯

GitHub 近期新設了一個 choosealicense.com 網站，讓使用者可以很簡單地選擇所需要的自由開放源碼授權條款。在此之前 GitHub 經常在託管專案的授權宣告方面被批評，有評論者認為，若 GitHub 持續未能提醒使用者有關託管專案授權方式的資訊，將導致許多人錯認託管於 GitHub 平台上的軟體專案皆為公眾財 (Public Domain)，但其實這些專案的程式碼皆可以附隨一份自由開源軟體的授權條款，若是不遵照其授權規則，是無法被任意使用的。而現在，當使用者在 GitHub 上建立新的軟體專案時，於編輯 readme 與 .gitignore 檔案時，開設者將可以同時選用該專案所偏好的自由開源軟體授權條款，像是 Apache、GPL、MIT、Affero GPL、Artistic、BSD、Eclipse，或 LGPL 這些常見條款。這樣的作法，國內於 2003 年由自由軟體鑄造場團隊設置的 OpenFoundry 平台亦有相類機制，名為「授權精靈 (License Wizard)」。這樣的授權選擇機制，讓託管平台上的專案建立者，可以透過 ChooseALicense.com 網站，或是 License Wizard 頁面，依照其需求，按步就班的選擇符合其需求的自由開源軟體授權條款！

例如，若使用者希望較簡單與寬鬆 (permissive) 的自由開源軟體授權條款時，網站會提供 MIT License，若想強調專利干擾方面的防護，則使用者可轉而考慮 Apache-2.0；而若要求修改後的程式碼都必須在不中斷分享的循環裡，則可參考 GPL-2.0 或 GPL-3.0。一旦使用者選擇好所需的條款，網站便會自動顯示條款的主要內容，以及綱要上可如何應用，接著，透過一鍵複製 (one-click) 選項，就可以將所選擇的條款全文拷貝到記憶體暫存區，其後即可方便的轉錄到軟體專案裡的 readme、copying，或是 legal 檔案裡。另外，ChooseALicense.com 網站本身就是一個自由開源專案，其使用 CC-BY-3.0 及 MIT License 併行釋出，使用者將可視需求為其建立分流專案 (fork)，並據以編寫或是增錄自己所需要的其他功能。附帶一提的是，GitHub 工作人員 Garen J Torkian，還另行開設了一個相類專案 AddALicence.com，這個專案讓使用者能利用 GitHub API，在選好授權條款後，直接將授權檔案嵌入到其擁有管理權限的 GitHub 專案裡。此一功能可讓已經運轉有年的 GitHub 託管專案，能好好整頓原本蕪雜的專案授權資訊。另外，AddALicence 網站本身亦是以 MIT License 進行公眾式授權，所以使用者亦可視需求分流及修改它。

國內的自由軟體鑄造場團隊，於 2005 年左近籌劃授權精靈的建置，以循序式問答的方式，協助平台的使用者選擇適合自己使用的自由開源軟體授權條款，完成後並以 MIT License 進行釋出時。彼時部份的評論家也認為授權選擇一事未必為開源專案建置管理上所必要，然而，經過了數年之後，欣然發現當前自由開源軟體領域的重要開發平台 GitHub，亦建立了相類機制來讓使用者利用，正可謂「德不孤、必有鄰」；而 GitHub 此一在授權輔助上的進展，亦顯示出隨著自由開源軟體大舉進入被商業化利用的時代，授權妥適與依循上的重要性，亦已日漸提升，且逐步獲得參與者與利用者的共同重視。



相關網址：

1、GitHub 讓開放源碼授權選擇變聰明
http://www.h-online.com/open/news/item/GitHub-gets-smart-over-open-source-licences-1918463.html

2、Choosealicense.com 網站
http://choosealicense.com/

3、Addalicense.com 網站
http://www.addalicense.com/

4、OSSF 授權指引 v2.3
http://www.openfoundry.org/LicenseWizard2/LicenseWizard.cgi

5、OSSF 授權精靈 v3.3
http://www.openfoundry.org/LicenseWizard/
_______________________________________________________________

■ [源碼新聞] Google 與 IBM 合作發展新一代資料中心技術

謝良奇／編譯

稍早之前，Google、IBM、Mellanox、NVIDIA、Tyan 共同宣布成立 OpenPOWER 協會的計劃，這是以 IBM POWER 微處理器架構為基礎的開放發展聯盟。根據其新聞稿，此一協會將在軟硬體上進行合作，以建構新的超大規模雲端資料中心。

新聞稿內容詳述了合作細節，其中有幾點值得注意：

＊參與者。除了理所當然的 IBM 之外，還有身為全球最大資料中心用戶與創新者之一的 Google。當你看到 Google 加入像這樣的計劃時，你應該要多留意。而 NVIDIA、Mellanox、Tyan 在此一領域也擁有不容忽視的專業、技術、聯繫能力。

＊協作開發當道是眾所週知的事，然而，這個例子最有趣的地方是，它同時涵蓋軟體與硬體部分，而且還加上 IBM 宣稱，首次開放 Power 的目標。該新聞稿表示，此一行動要讓 POWER 軟硬體首次擁抱開放開發，並將授權 POWER 智財給他人，大大擴展該平台上的創新者體系。此一協會將提供開放源碼的 POWER 韌體，也就是控制基本晶片功能的軟體。藉由此舉，IBM 與該協會能在為各種計算工作建構新形態伺服器硬體時，提供前所未見的客制化。毋庸置疑的，我們相信，開放作業與開放存取能帶來更快速的創新與技術獲益，並為眾人所分享。這是 IBM 的一大步，我們相信此舉能有助 Power 平台在新領域取得發展動能。

＊這對 Linux 與用戶是件好事。有更多架構針對 Linux 最佳化其產品，將有利於整個平台。正如我們所見，資料中心的創新，往往也為行動等其他計算領域帶來創新與可用性。此一循環是 Linux 過去數年內能如此擴展的原因。從過去看來，IBM 懂得如何在 Linux 這類開放社群內運作，因此我們期望在 Linux 社群內能看到上述成果。 Linux 在開放源碼 IT 上發揮了帶領作用。如今成功協作的的藍圖，已經在技術產業許多之前未曾觸及的角落中紮根，如虛擬化的 KVM、Xen，高可用性運算的 OpenMAMA，以及最近軟體定義網路的 OpenDaylight 專案。 儘管 OpenPOWER 有許多細節仍有待觀察，此一協作開發計劃的成果已經令人期待。


相關網址：

1.Google 與 IBM 合作發展新一代資料中心技術
http://www.linux.com/news/featured-blogs/167-amanda-mcpherson/732523-google-and-ibm-team-up-to-work-on-next-generation-data-center-technology/
_______________________________________________________________

■ [源碼新聞] Candy Chang 透過共同藝術學到的社群與協作經驗

謝良奇／編譯

社群一詞有許多意義，特別是在開放源碼軟體與 Linux 圈子裡。都市規劃師、藝術工作者，同時也是 TED fellow 的 Candy Chang，她自己對於社群的體會，乃是出自於她家鄉紐奧良的集體藝術專案。例如，她的 Before I Die 專案，將其街道上的一處廢棄房屋，改為供人們分享希望與夢想的互動牆，大西洋月刊 (The Atlantic) 盛讚為有史以來最具創意的社群專案之一。

在 9 月 16 到 18 的北美 LinuxCon 大會 (LinuxCon North America) 主題演說中，Chang 將分享她對社群與協作的想法。在此她先讓讀者一瞥演講內容。

問：可以告訴我們，自從創作 Before I Die 專案之後，對於社群妳學到了些什麼？

Candy Chang：匿名有助培養社群，可以在我們發展出理解與信任之前，讓我們解放到完全誠實且柔軟的狀態，而這份誠實與柔軟則有助引領至理解與信任。上一次我和一群學生製作互動牆時，其中之一個回答是，在我死前我希望克服憂鬱症。我深受感動。我經歷過一段時間的憂鬱症。我們一起討論並開始卸下心防。我們全都在試著讓我們的生命充滿意義，知道妳並不孤單是很大的安慰。

問：依妳的經驗，是什麼動機讓人們朝向共同目標一起合作？其重要性為何？

Candy Chang：擁有對於更重大使命的信念，妳就有足夠熱情來克服路上的障礙。妳會充滿希望和好奇心，不會忘記妳所努力的目標。恐懼也是一個強大的動機，不過樂趣卻少得多。

問：妳覺得妳的創作與藝術如何應用到開放源碼軟體和 Linux 社群上？

Candy Chang：從一開始，網際網路就被視為是一種公共空間，Lee Felsenstein 更預見其作為資訊公共財。Linux 是這些可能性的偉大範例。我從實驗中想要了解我們的實體公共空間，是否也能持續發展並成為資訊公共財。類比與數位工具各有優點與限制，雖然所處情境不同，但是有許多我們可以互相學習之處。

問：對於妳 9 月在紐奧良的演說，可以搶先讓我們知道妳的演講內容嗎？

Candy Chang：妳會聽到我個人對於公共空間與社群的真誠意見、我部分專案的成果以及對於應用在 Linux 上的想法、一路而來我學到的東西，還有目前我所抱持的一些疑問。我讀過許多哲學和心理學，或許會談到一點榮格。還有，到時會秀很多圖片，很多漂亮的圖片。


相關網址：

1.Candy Chang 透過共同藝術學到的社群與協作經驗
http://www.linux.com/news/featured-blogs/185-jennifer-cloer/731935-candy-changs-lessons-on-community-and-collaboration-through-collective-art-/
_______________________________________________________________

■ [源碼新聞] 開放設計的全新樣貌 由我們共同想像

台灣創用CC 計畫／文

◎ 本文原載台灣創用CC 計畫，原文章連結：http://creativecommons.tw/blog/20130806。

「設計是設計一個設計來創造另一個設計 (design is to design a design to produce a design)」，Open Design + hardware 網站中用了這麼一段常用的引述，卻深深的打中了設計師們的心。

你認為的設計樣貌是什麼呢？有沒有一種可能性可以讓我們再次定義所謂的已完成的設計呢？

Open Design + hardware 是由三位致力於推廣「開放設計」概念的設計師 - Kat Braybrooke、Massimo Menichinelli 及 Primavera de Filippi 聯合串聯而成的組織。

這是一個高聲疾呼開放設計重要性的組織，認為閉門造車的設計已經是過時的創作習慣了，設計是社會集體文化造就的傑作，設計是讓我們重新檢視物件的可能，透過設計我們欣賞並學習，設計何其美好，怎該獨自佔有？這是一個高聲疾呼開放設計重要性的組織，認為閉門造車的設計已經是過時的創作習慣了，設計是社會集體文化造就的傑作，設計是讓我們重新檢視物件的可能，透過設計我們欣賞並學習，設計何其美好，怎該獨自佔有？

(http://www.openfoundry.org/images/130827/open_design_hardware_0-640x320.jpg)

西元 2000 年，Open Design 的概念首先被揭示，於今已有超過十年的歷史，而實際的行動卻是於近幾年才被漸次發展，Open Design + hardware 特別注意到了開放設計的重要性，認為許多設計產品仍舊有著待設計發展的空間，然而，現行對於開放設計的定義卻是相當模糊，對此甚感可惜。

因此，Open Design + hardware 首要計畫為「定義開放設計」，以理論及實踐的發展作為參考，鼓勵設計師們加入組織中的公眾討論及分享平台，透過舉辦開放設計定義工作坊邀請多方的設計師夥伴們加入討論，藉由不斷的對話及實作，期望共同定義出開放設計的明確概念及應用，更邀請超過 150 位設計師加入 GOOGLE+ 作為即時的交流互動平台，在平台中可以展示個人成果亦可同時獲得來自他人的寶貴意見，靈感激烈碰撞的時刻，美好的設計將油然而生。

於開放設計的應用上，則是藉由提倡「物件再製 - Hardware Remix」，將已被納入公眾領域的一首詩、一段旋律、一部劇作......等，提倡使用公眾領域作品，網站採取創用CC「姓名標示─相同方式分享」 (http://wiki.creativecommons.org/Case_Studies/Pamoyo) 授權，取自作品想法或做法揉合新的創意發想，創造出符合集體文化記憶的物件，與時俱進的全新設計將使原始物件再次獲得嶄新活力。

(http://www.openfoundry.org/images/130827/o-pen_0-250x200.jpg)
(Public Domain Work)

(http://www.openfoundry.org/images/130827/open3_0-250x200.jpg)
(Remix Example:O-PEN)

圖／授權資訊：Khaos (http://www.okhaos.com/)，「姓名標示─相同方式分享」(http://wiki.creativecommons.org/Case_Studies/Pamoyo)

一個產品，將來自於數個設計師的合力創作，創意及智慧在生產的過程中重複堆疊，該是如此珍貴啊！

開放設計的魅力令這群設計師們深深著迷，他們是一群夢想家，從自身出發並付諸行動的夢想家，如果你也認同開放設計的發想，開放設計的樣貌將由我們共同想像，一起加入吧！

參考資料：http://design.okfn.org/

註 : Engage by design (http://engagebydesign.org/) 同樣是促進設計團體持續交流、分享的網站，而且他們還將設計方面的專家對談錄影分享出來，讓更多人可以加入設計理念的對話。採取創用CC「姓名標示─非商業性─禁止改作」 (http://creativecommons.org/licenses/by-nc-nd/3.0/) 授權方式。
_______________________________________________________________

■ [源碼新聞] 2013 年九月份社群活動列表

作者是 OSSF電子報團隊／整理

九月份的活動列表出爐囉！有興趣的朋友們請多多邀請您的朋友一同前往參與！另外，由於活動列表出來的時間比較早，若後續有活動希望也能一起做宣傳的朋友們，記得來信告訴我們喔！信箱： ossfepaper@openfoundry.org 。
 
Taipei Wikipedian Weekly Meetup: Community Operation 維基台北定期聚 — 社群經營工作雙週聚（雙週一，9/2、9/16、9/30）
地點：台北市松山區民生東路三段 140 巷 11 號
時間：18:00~20:00
活動資訊：http://zhwp.org/zh-tw/WP:WPTP-S

TOSSUG BoF（每週二，9/3、9/10、9/17、9/24）
地點：台北市中正區南昌路二段 200 號（Mix Coffee & Tea）
時間：18:00~21:00
活動資訊：http://www.tossug.org/

MozTW Lab @ 基隆（每週三，9/4、9/11、9/18、9/25）
地點：基隆市仁愛區港西街 4 號 1 樓（1915 海洋咖啡館）
時間：19:00~21:00
活動資訊：https://groups.google.com/group/moztw-general

KSDG 高雄開發者社群 (Kaohsiung Software Developer Group) meetup（9/5）
地點: 高雄軟體園區 B 棟 708 室（高雄市前鎮區復興四路 2 號 7 樓之 5）
時間: 19:00~21:00
社群網址: https://www.facebook.com/groups/KSDGroup

Hacking Thursday（每週四，9/5、9/12、9/19、9/26）
地點：台北市重慶南路一段 1 號 2 樓（MarketPlace）
時間：19:30~22:30
活動資訊：http://www.hackingthursday.org/

MozTW Lab @ TP（每週五，9/6、9/13、9/20、9/27）
地點：台北市中山區民生東路二段 114 號（咖啡．銅號）
時間：19:00~23:00
活動資訊：https://groups.google.com/group/moztw-general

Wiki 協作聚-FB 線上會 Wiki Cooperation Online Meetup （9/6、9/13、9/20、9/27）
時間：19:00~21:00
活動資訊：https://zh.wikipedia.org/wiki/Wikipedia:WCP

台中自由軟體愛好者固定聚會（雙週一，9/9、9/23）
地點：台中市中港路二段 60-3 號（默契咖啡）
時間：19:00~21:00
活動資訊：https://groups.google.com/forum/#!forum/taichung-foss-fans-meeting

Cocoaheads - Kaohsiung（9/12）
地點: 高雄軟體園區 B 棟 708 室（高雄市前鎮區復興四路 2 號 7 樓之 5）
時間: 19:00~21:00
社群網址: https://www.facebook.com/groups/cocoaheads.kaohsiung/

Taipei Wikipedia Moonthly Meetup: Writing Day 維基台北定期聚—假日寫作月聚（9/14）
地點：台北市松山區南京東路二段一號 （伯朗咖啡 南京二店二樓）
時間：14:00~16:00
活動資訊：https://zh.wikipedia.org/wiki/Wikipedia:WPTP-W

KSDG web course（9/21）
地點: 高雄軟體園區 B 棟 708 室（高雄市前鎮區復興四路 2 號 7 樓之 5）
社群網址: https://www.facebook.com/groups/KSDGroup

2013 九月 Taipei.py 聚會（9/26）
時間：19:00~22:00
活動資訊：http://www.meetup.com/Taipei-py/events/129463642/

Hadoop in Taiwan 2013（9/28）
地點：中央研究院人文社會科學館
時間：08:30~17:00
活動資訊：http://www.hadoopintaiwan.com/
_______________________________________________________________


□ 關於本報 □__________________________________________________

◎ 主編︰洪華超
◎ 法律專欄編輯︰葛冬梅
◎ 技術編輯︰曾義峰
◎ 執行編輯︰王怡凱、陳蕙蓁
◎ 外稿編譯︰林誠夏、黃郁文、謝良奇

本電子報自行採訪、報導、編譯、撰寫文章之智慧財產權屬於中央研究院，採用創用CC「姓名標示－禁止改作－非商業性」授權條款臺灣 3.0 版授權散布，歡迎在不變更內容的前提下，以任何形式重製與散布本報，但必須遵守下列義務︰（1）不得為商業目的之利用；（2）必須標明本電子報智慧財產權屬於中央研究院；（3）完整引用本著作權說明。

若欲以創用CC「姓名標示－禁止改作－非商業性」授權條款臺灣 3.0 版以外的方式利用上述文章，請與自由軟體鑄造場編輯群（ossfepaper at openfoundry.org）聯絡。

非自由軟體鑄造場自行撰寫的單篇文章，其智慧財產權利屬於原作者所有，其以非專屬的方式授權予自由軟體鑄造場運用，而與本電子報其他文章併以創用 CC「姓名標示－禁止改作－非商業性」授權條款臺灣 3.0 版的方式進行散布。

若欲以創用CC「姓名標示－禁止改作－非商業性」授權條款臺灣 3.0 版以外的方式利用個別作者的文章，請自行與該作者聯繫，或透過自由軟體鑄造場編輯群（ossfepaper at openfoundry.org）來轉發聯絡訊息。

授權條款全文請見︰
http://creativecommons.org/licenses/by-sa/3.0/tw/legalcode
授權條款簡介請見︰
http://creativecommons.org/licenses/by-sa/3.0/tw/deed.zh_TW

若欲訂閱本電子報，請至以下網址︰
http://www.openfoundry.org/tw/news

如欲取消訂閱這份電子報，可透過自由軟體鑄造場新聞首頁左上方之自動退訂機制︰
http://www.openfoundry.org/tw/news

或寄發電子郵件至︰ossfepaper@openfoundry.org，以進行人工退訂。