________________________________________________________________

□■□ 自由軟體鑄造場電子報第 223 期 | 2013/07/30 □■□
________________________________________________________________

◎ 本期主題︰利用自由開源軟體元件開發雲端應用專案
◎ 訂閱網址︰http://www.openfoundry.org/tw/news/
◎ 下次發報時間︰2013/08/13

□ 本期標題 □__________________________________________________

■ [法律專欄] 利用自由開源軟體元件開發雲端應用專案

■ [源碼秘技] 「純函數式」套件版本管理系統 Nix / NixOS 

■ [自由專欄] Andrew Auernheimer、網路安全、洩露與 CFAA

■ [自由專欄] 過來人談 Dropbox 的技術心得

■ [源碼新聞] Citrix 開源釋出 XenServer

■ [源碼新聞] 深根歐盟 - 歐洲議會公民權力政策部舉辦自由開源軟體法律工作坊

■ [源碼新聞] 網際網路發明者獲頒伊麗莎白女王工程獎

■ [源碼新聞] 用 Raspberry Pi 打造的模型雲端 PiCloud 可供網路平台教學之用

■ [源碼新聞] SketchChair—讓每個人設計自己的椅子

■ [源碼新聞] 2013 年八月份社群活動列表

□ 本期內容 □__________________________________________________

■ [法律專欄] 利用自由開源軟體元件開發雲端應用專案

葛冬梅／文

雖著網際網路的進一步發展，近年來雲端運算成為一鼓新興的潮流，無論是大型的商業公司或小型的資訊服務業者，乃至於個人工作室，都乘著這鼓潮流，嘗試開發網路應用程式或提供相關的商業服務。與一般的軟體開發專案一樣，在開發網路應用程式或線上服務平台（以下統稱這些應用程式與服務平台的開發專案為「雲端應用專案」）的時候，也可能面對部份專案內容無法對外提供程式源碼 (Source Code) 的情況，例如雲端應用專案中某一部份的程式碼，因為受到第三方保密協議的拘束，所以不能對外提供源碼與相關資訊。這樣的專案若仍想要利用自由開源軟體元件來開發的話，那麼選擇哪些條款授權的元件，才不會造成未來應用時產生必須提供程式源碼的衝突，將是開發過程的一項重點。因此，本文將針對常見的自由開源授權條款（註一），說明相關的義務規定，據此建議雲端應用專案可以選擇哪些條款授權的元件，以避免無法提供源碼的專案產生授權義務上的衝突。

【義務規定寬鬆的 BSD 類條款所授權的元件為首選】

BSD 類的授權條款包括了 BSD、MIT 與 Apache-2.0 等，這類條款授權範圍廣大，義務規定寬鬆而有彈性，並不硬性要求使用者在散布程式的同時必須提供源碼，而是交由使用者自行決定，即使是散布修改過的元件也是一樣，因此雲端應用專案的開發者可以優先選擇利用這類條款授權的元件。

【透過散布程式來啟動提供源碼義務的授權條款為次要選項】

其次，GPL-2.0、GPL-3.0、LGPL-2.1、LGPL-3.0、MPL-1.1、MPL-2.0、EPL-1.0 與 CDDL-1.0 這八份條款授權的元件，也是可以選擇的另外一種類別。這類授權條款都具有「授權拘束性（註二）」，原則上會拘束元件修改版本的授權方式，也就是修改後的衍生程式必須採用相同條款來授權，無法採用其他條款授權，例如元件原本採用 GPL-2.0 授權，修改後的版本也因此必須採用 GPL-2.0 授權，而當修改版本隨著軟體專案被散布給後手的時候，依照這些授權條款的規定，散布者必須要提供程式源碼給後手，假如修改版本包含了本文首段所提到的保密協議程式碼的話，那麼將這些程式源碼提供給後手就違反了保密協議，因此這些條款的授權拘束性就與無法提供源碼的保密協議產生衝突（註三）。

但是這樣的授權拘束性原則上卻不會與雲端應用專案產生衝突，因為授權拘束性實際發揮效力的時間點，是在使用者散布程式碼的時候，也就是當使用者散布元件或者修改版本的時候，才有義務要提供源碼，反之，沒有散布行為的話提供源碼的義務將不會被啟動，使用者因此沒有義務一定要釋出程式源碼。由於雲端應用專案原則上都是透過網路提供服務，專案程式碼均在雲端服務提供者的伺服器上執行，並非散布到服務使用者的電腦或裝置中執行，專案程式碼沒有被散布出來，所以透過雲端應用專案來提供服務者，在此狀態下就沒有義務一定要釋出專案程式相關的衍生源碼。

不過在實際應用時，有些雲端應用專案會有部份程式碼被下載到服務使用者端的電腦或裝置中，這樣就產生了程式碼被散布的事實，而若是被散布程式碼的授權條款屬於本段所提及這八份條款的話，雲端服務提供者仍然可能因此負有提供源碼的義務，必須將被散布部份的程式源碼提供給予服務使用者（註四）。

所以若雲端應用專案在實際應用上僅單純地透過網路提供程式服務，所有程式碼仍在伺服器上執行，而因此讓服務使用者不需要下載任何程式碼，那麼利用這八份條款授權的元件來開發專案，是不會讓服務提供者負有提供源碼的義務。但若不能達到上述的狀態，仍然散布了此八份條款授權的元件，則這些被散布元件的程式源碼，便仍必須得進一步提供出來。

【透過網路互動即可能啟動提供源碼義務的 AGPL 系列條款】

利用自由開源軟體元件開發雲端應用專案最需要注意的是 AGPL 系列的授權條款，因為 AGPL 不但具有授權拘束性，還要求透過網路提供「修改版本 (modified version)」程式功能服務的時候必須提供程式源碼，即使這時候並沒有任何程式碼在應用過程中被散布出去也一樣。

AGPL 系列條款均是修改自 GPL 而來，AGPL-1.0 修改自 GPL-2.0，而 AGPL-3.0 則是修改自 GPL-3.0，修改的初衷是要補充 GPL 所沒有涵蓋到的網路應用程式服務提供者 (Application Service Provider, ASP) 的利用行為，因為如上段所說明過的，網路應用程式服務提供者若是透過網路單純提供 GPL 程式的應用服務，由於程式碼沒有散布出去，服務提供者也不需要將源碼提供出去。針對這樣的利用行為，AGPL 規定即使在程式碼沒有被散布的情況下，只要有透過網路提供程式服務給客戶利用的行為，提供源碼的義務也因此啟動，服務提供者必須進一步將程式源碼提供給客戶。

關於 AGPL 這個特殊的規定，有兩項要件需要被特別注意（註五）：
 
(1) AGPL 程式碼是被修改過的 ("...if you modify the Program...")，若 AGPL 程式沒有被修改，那麼服務提供者即沒有提供源碼的義務；

(2) 服務使用者透過網路與 AGPL 程式修改版本互動（"...all users interacting with it remotely through a computer network..."，註六），也就是透過網路來利用 AGPL 程式修改版本的功能。

依照這樣的要件規定，利用 AGPL 授權的元件來架構網站、提供線上文書處理功能、讓使用者在網路上收發電子郵件或者查詢資料等，都有非常高的機率必須要將這些程式的衍生源碼提供給予網路服務使用者。因此若是雲端應用專案在實際應用上雖然沒有散布程式碼，但卻讓服務使用者可以利用到 AGPL 授權元件的功能，若評估後認為全面的程式源碼提供機制不符合預設期待的話，建議應慎重考量是否改用其他條款授權的元件來執行相同的功能，以避免授權衝突的狀況產生。

【遵守授權條款的其他義務】

本文只針對提供源碼這一項授權義務來加以分析、說明，但是自由開源授權條款所包含的義務規定不單單只有提供源碼這一項，還可能包括保留著作權聲明、保留免責聲明、提供授權條款全文、標示修改資訊等等。尤其保留各項標示資訊是相當基礎的義務，幾乎所有的自由開源授權條款都有這樣的義務規定，例如：當雲端應用專案利用到 BSD 類條款授權元件的時候，雖然網站服務提供者不負有提供源碼的義務，但若仍然有散布程式碼情況發生的話，就必須要重建元件中原本所附帶的各項標示資訊或聲明，讓服務使用者可以瀏覽到這些內容，以符合 BSD 類條款所規定的義務；此外，GPL-3.0、LGPL-3.0 與 AGPL-3.0 這三份條款也特別要求使用者，無論修改原程式與否，只要有使用到這些條款授權元件的事實，該統合專案在使用上就必須將相關聲明標示出來。（註七）。

【結語】

由本文以上的介紹可以了解到，在沒有程式碼被散布的情況下，雲端應用專案開發者在選擇自由開源軟體元件時，雖然必須特別注意 AGPL 系列授權條款，但卻有著相當大的彈性範圍來選擇授權條款與元件，而若是在應用上將會有程式碼被散布出去的話，除了 AGPL 系列條款外，還必須注意其他具有授權拘束性的條款是否與專案的應用狀況相符合，若是專案並無法提供任何程式源碼給與專案使用者的話，那麼就應該改採用 BSD 類條款的元件。因此在判斷可以利用哪些自由開源授權條款與元件時，只要先釐清雲端應用專案未來實際運作的狀況，以及是否會有程式被散布出去的狀況，然後就可以根據這些實際狀況，來選擇授權內容適合的自由開源軟體元件來應用，有效地減少授權衝突發生的機率。
 
------

註一：常見授權條款分類表：http://www.openfoundry.org/tw/foss-license-category；而關於授權條款各類別特性的介紹，請見：自由開源軟體授權條款的三分法：http://www.openfoundry.org/tw/legal-column-list/105-2010-07-15-10-42-58。

註二：關於授權拘束性的說明以及其對於衍生程式的影響，請見：林誠夏，GPL 條款對於衍生程式的判定標準與其授權拘束性的擴散範圍（上），http://www.openfoundry.org/tw/legal-column-list/8446-the-license-inheritance-bounds-of-gnu-gpl-01。

註三：這八份條款所包含的授權拘束性強弱不同，其中以 GPL-2.0、GPL-3.0 的授權拘束性較強，LGPL-2.1、LGPL-3.0、MPL-1.1、MPL-2.0、EPL-1.0 與 CDDL-1.0 等六份條款的授權拘束性較弱。後六份條款雖然規定，原則上修改版本必須繼續採用原條款授權，但若僅是透過既成機制與 LGPL 函式庫元件溝通互動，或者單一檔案或模組中的程式碼均為使用者自行撰寫，那麼非 LGPL 函式庫的其他部份、使用者自行撰寫的單一檔案或模組等部份，是可以例外地採用其他條款來授權。進一步的比較說明請參考：自由開源軟體授權條款的三分法：http://www.openfoundry.org/tw/legal-column-list/105-2010-07-15-10-42-58。

註四：承接註三的說明，由於這八份條款的授權拘束性強弱不同，因而影響到必須提供出來的程式源碼範圍也會有所不一樣，所以實際上必須提供哪些部份的程式源碼給予服務使用者，要看所牽涉的授權條款規定與個別雲端應用專案的狀況而定。

註五：囿於文章篇幅，本文無法詳細介紹 AGPL 的授權規定，若想進一步了解 AGPL 系列條款的內容，可以參考：葛冬梅，因應網路時代與雲端應用而生的 AGPL-3.0 授權條款，http://www.openfoundry.org/tw/legal-column-list/8809-introduction-to-agpl3。

註六：本段內文乃是擷取 AGPL-3.0 第 13 條第 1 項的原文文字。AGPL-1.0 相對應的規定在第 2 條第 1 項第 d) 款中，文字大同小異："If the Program as you received it is intended to interact with users through a computer network..."。

註七：關於各授權條款的義務規定，可以先參考自由軟體鑄造場網站上各條款的基本說明：http://www.openfoundry.org/tw/licenses。若欲進一步了解這些義務的詳細內容，可以至法律專欄中點選相關的文章閱讀：http://www.openfoundry.org/tw/legal-column-list，或者也可以寄發電子郵件至自由軟體鑄造場詢問。
_______________________________________________________________

■ [源碼秘技] 「純函數式」套件版本管理系統 Nix / NixOS 

一卡／文

前言

Nix 的基礎概念如同 GoboLinux，每個套件都用獨立資料夾管理。

Nix 將每個套件視為一個函數的輸出值，其使用的函式庫則為該函數的傳入值，由於套件間不共用函式庫而避開了相依性地獄，因此開發團隊稱 Nix 是一個「純函數式」套件管理系統。

如果 Nix 單純是「又」一套套件管理系統，那我也不需要寫這篇了，幸好 Nix 引入了「版本控制」的概念讓我很放心的寫下去。

每當使用者安裝、移除套件或是修改設定檔時，Nix 會自動將當前使用環境設為一個新的版本，出問題時只要退回前一個版本即可解決問題。

NixOS 則是使用 Nix 做為套件管理工具的 GNU/Linux 發行版，從核心(Kernel)、Nix 到套件，全部都可用 Nix 退回前一個版本。官方網站 (http://nixos.org/) 除了提供原始碼，使用者也可以直接安裝二進位檔(binary)。


簡單使用教學

以下皆以 Lubuntu 13.04 做為實驗環境。

Nix 的 nix-channel 相當於 source list 管理工具，nix-env 對應到 apt-get。那麼如何操作 nix-channel 呢？

當使用者安裝一個軟體時，Nix 先根據 nix-channel 尋找是否有可安裝的二進位軟體包，有則直接下載，沒有則根據套件的安裝設定下載程式碼來編譯出套件並安裝。
nix-channel 最基本的 4 個參數分別為 --add、--remove、--list、--update，每個命令都用 sudo 執行。

--add 跟 --remove 用來新增與移除 channel。

例如：

sudo nix-channel --add http://nixos.org/releases/nixpkgs/channels/nixpkgs-unstable
即會自動將該 channel 加入 <b>~/.nix-channels</b> 中。

--list 會列出現有的 channel 及該 channel 的別名，使用者可以用別名的方式移除 channel。
--update 會從每個 channel 下載最新的二進位檔，每次新增 channel 後可先做 1 次。

有興趣的人可以到這邊 (http://nixos.org/releases/) 尋找想要的 channel 及 nixpkgs channel（提供編譯好的二進位檔）。

有了 channel 後，要怎麼管理軟體包？

Nix 提供了 nix-env 這個指令，相當於 apt-get + git。

安裝、移除、更新的參數分別為 --install、--uninstall、--upgrade。
實際上，從 channel 下載的軟體包都放在 /nix/store/ 中，所謂的安裝只是將函式庫、執行檔連結到 <b>~/.nix-profile</b> 中。
移除軟體包則是反過來將連結移除。

那麼先來試試看安裝 ghc 並且執行 ghci 看看：
  
  sudo nix-env --install ghc 或 sudo nix-env -i ghc
  ghci

咦？沒有 ghci？
因為 Nix 使用者環境沒加入設定檔中，所以搜尋不到。
根據官方文件，必需加入 sudo /etc/profile.d/nix.sh 或 sudo /nix/etc/profile.d/nix.sh 到 .bashrc。
而 nix.sh 等同在 .bashrc 中加入下列兩行：

  PATH=.nix-profile:"$PATH"
  export PATH

加入後只要 source .bashrc 就會能用 ghci 了。

剛剛只有講到 apt-get 吧？那 git 又是怎麼一回事？

nix-env 將不同版本稱為 generation。

最基本的是 --list-generations，會列出所有的 generation。
想返回之前的某個 generation，則使用 --switch-generation + 該 generation 的號碼。
例如：
  sudo nix-env --list-generations 

發現目前的 generation 是 6，如果想跳回 generation 4，則使用如下指令：
  sudo nix-env --switch-generation 4

想刪除 generation 5、6？
  sudo nix-env --delete-generations 5 6

前面有談到 --remove 只是移除掉連結，當使用者真的想移除掉軟體包時，必需使用 nix-collect-garbage，該指令不會產生新的 generation（無法返回前一個版本）。


總結

我們沒有談到使用 Nix 表達式（Nix expression Language，一個純函數、惰性的軟體包產生語言）建立 Nix 軟體包，也沒有談到如何使用 nix-store 分享自己的軟體包給其它人使用。
NixOS 目前的安裝方式跟 Arch 相似，官方 wiki 也有直接使用硬碟安裝 NixOS 的教學（Arch wiki 也有類似的教學資料），使用 Nix 直接打造一個發行版也是可行的。
我個人很期待 Nix 的未來發展，也希望大家會愛上這個工具。


作者簡介

一卡，目前任職於百臂網路科技股份有限公司，是一名 Haskell 與 Functional Programming 的愛好者。
_______________________________________________________________

■ [自由專欄] Andrew Auernheimer、網路安全、洩露與 CFAA

謝良奇／編譯 

美國的 hacker-troll 運動者 (hacker-troll-activist) Andrew Auernheimer，又名 Weev，日前針對因非授權存取 AT&T 網站，違反計算機欺詐和濫用法 (Computer Fraud and Abuse Act，CFAA)，於 3 月遭到判決一事提起上訴。該定罪判決與哥倫比亞大學法學院教授 Tim Wu 口中最爛的科技法 CFAA，對於思索美國在國家安全中，對於異己的處置，以及該國將無法制服之對手，列為刑事罪刑的傾向，提供了便捷的途徑。

基本上，Weev 是因為多次存取公開給所有人的公共資料，而惹上麻煩。你或許會說，他之所以惹上麻煩，是因為得罪了 FBI。或許上述兩者皆是，Weev 利用自動化程式多次查詢 AT&T 的伺服器，存取公開資訊。多年來，他一直對權威以及好品味嗤之以鼻。在沒有破解密碼、沒有黑客行為的查詢過程中，他取得了某些有力人士的電子郵件帳號。該承擔主要疏失責任的 AT&T，在調查該漏洞時將矛頭指向 Weev 與一名同僚。事件結果是他把這個資訊透露給 Gawker，並因此獲罪。

讓我們回到法律面。CFAA 原本是偽造訪問計算機欺詐和濫用法 (Counterfeit Access Computer Fraud and Abuse Act，CADFAA)，更精確的說法是，雷根總統 (Ronald Reagan) 與某些參議員看過電影戰爭遊戲 (WarGames) 後被嚇壞搞出來的法律，無論如何，今天它主要意味著起訴發生在電腦與網際網路上的犯罪。因此其範圍之廣闊無可言喻，再者，依照所在法院的不同，還可能把所有人每天做的簡單小事，像是在約會網站上撒有關身高體重或年齡的謊，而違反網站片面的使用條款，變成是刑事犯罪。對於一個原本設計用來避免核子大戰的法令來說，這的確是一大擴充。

CFAA 部分爭端，以及出自法律社群的批評，主要是未經授權與超出授權這些字眼的意義為何。上述提到的極端解釋，也就是以合約為基礎的做法，是司法部的首選。其他人則傾向有實際上的駭客行為，像是暴力破解密碼，或是破壞某些安全機制。最後，其他人仍然依賴代理理論 (theories of agency) 來判別授權的含義。

在 Weev 因為存取公開網站而惹禍上身的案例中，他的律師在上訴中聲稱，就該法律的目的而言，由於 AT&T 自己將該資訊加以公開，對這些資訊的存取，是無法未經授權的。他們指出，將 Weev 的行為加以定罪，也就是將許多美國民眾的行為視為有罪，這是令人無法接受的，同時也會為裁決的其他層面，以及審判的嚴重程度，帶來許多挑戰。

CFAA 的重要缺點之一，是其賦予檢察官與警察權力，以任意或歧視性地鎖定在政治上抱有不受歡迎觀點的個人。作為一名多年來從事政治活動的網路小白 (troll)，Weev 因為收刮公開網站的資訊而遭到判刑 41 個月。在加州，一間法律公司同樣操作網路 URL，來存取無意中公開的健康紀錄，卻不用面臨起訴而獲得和解。許多人認為，這個看似歧視性的結果，使得該法律與憲法的正當法律程序禁止模糊性相互抵觸。基本上，該原則要求公民了解何種行為會被判刑，檢察官不能任意或歧視性進行執法。而這並非政治活動人士首次遭到鎖定起訴。

老實說，儘管這些情節很可笑，但這一切並不有趣。為何？為什麼 Weev 要服的刑期比多數強暴犯都還長？因為他與 FBI 為敵？因為他毫無悔意？因為他讓一間跨國公司看來像笨蛋？不管你怎麼看，這都不是正義。CFAA 很危險。Edward Snowden 與稜鏡計畫 (PRISM) 洩密案在國際舞台上演戲碼中的情節也是一樣，該案與 Weev 定罪和 CFAA 中的爭議，在許多方面講的是同一件事。

CFAA 之所以如此嚴苛，或有意更為嚴苛的眾多理由，是已成為誇張且危言聳聽怪物的美國政治論述。暴力聖戰份子，請歡迎黑客，他們將作為你們的替代品，成為美國可怖稻草人商店的本週熱門。在 Weev 與前路透社社交媒體編輯 Matthew Keys 的 CFAA 案子中，作為代表的 Tor Ekeland 表示，黑客是新的共產黨員。他說得對，這是個大問題。

當 Keith Alexander 將軍表示，他擔心 Anonymous 會破壞電力網，這和要求對政治黑客施以加重懲罰，以及讓自由派與保守派獨裁者追殺 Edward Snowden 的說法，完全是同一種言論。當 Janet Napolitano 對網路 9/11 提出警告，她是在為正當化大規模監控提出論據，也讓我們在 Weev 因為更改 URL 而在監獄裡度過 3 年半一事，選擇睜一隻眼閉一隻眼。

CFAA 目前的形式是一個強大的錯誤，其使用反映出政府尋求對它所不理解之物，加以定罪並使其銷聲匿跡。Weev 的判決，一旦成立，將絕非僅有，也不會是最後一次。


相關網址：
1.Andrew Auernheimer、網路安全、洩露與 CFAA
http://www.truth-out.org/speakout/item/17438-andrew-auernheimer-cyber-security-leaks-and-the-cfaa

2.維基百科對於 internet troll 的解釋
http://en.wikipedia.org/wiki/Troll_(Internet)
_______________________________________________________________

■ [自由專欄] 過來人談 Dropbox 的技術心得

Kenneth Mak ／文

◎本文原載 Linux Pilot，原文章連結：http://www.linuxpilot.com/industry/news/201307230101Dropbox-Linux。

Dropbox 現在在全球有超過 1 億 7500 萬用戶，成為一個幾乎無人不識的雲端企業。但最初 Dropbox 只是一個小型的 Startup，究竟它在技術上所作的部署如何令它成功？曾經是核心開發者之一 Rajiv Eranki，介紹他在 Dropbox 所學到的實戰經驗。

(http://www.openfoundry.org/images/130730/201307230101.jpg)

Rajiv Eranki 於 2008 年加入 Dropbox，在 2011 年離職，原因是「是時候去做一些更特別的事」。他在 2013 年 7 月 11 日舉辦的 RAMP 會議上，介紹在 Dropbox 時擔任伺服器技術人員的經歷。當年 Eranki 在大學畢業後加入了當時只有 2000 名用的 Dropbox，他和另外一人負責伺服器擴充部分。其時 Dropbox 的整個基建中只有兩台 Linux 伺服器，其中一台是資料庫專用機，另一是前端伺服器。

Eranki 表示 Dropbox 是一個具可塑性和擴充性的系統，縱使是擁有多個共享目錄的用戶，資料庫存取要求也只要陬出一次，在前端伺服器要查看的記錄檔也只有一個。由於資料庫並沒有分割，得以避開一些麻煩的作業。開發語言方面，Dropbox 選擇是了開源的 Python，好處是簡單但功能強大，當用戶數量達到 100 萬時，整個系統也只是用了数百行的程式碼。他表示如果要用 C 來編寫出同等功能，大概需要數千行的程式碼。此架設直到用戶達到 4000 萬人時仍然沒有改變，客戶端的 Dropbox 程式也是用 Python 編寫的。

Eranki 又表示，他們重視的是開發、管理和易於維護的平台，以及構造簡單的設計。他們亦放棄了能夠生成大量圖表的管理工具，改為製作一個簡單的控制界面，因為「大部分的圖表都沒有什麼用」。控制台會以直接顯示項目和其值。多出來的存取要求由 memcache 處理，延遲 SQL 要求的最佳化。隨著 Dropbox 的用戶越來越多，出現了一些將 Dropbox 用在其他非正規用途上的用戶，例如將 Dropbox 當作 CDN 使用等等。Eranki 表示開發團隊不應該被此等用戶所迷惑，要以一般正常用戶的需要進行改良，因為這些用戶才是 Dropbox 的根本。

他在 Dropbox 學到的另一個教訓，是「時刻追隨最新技術的人必敗」。靜觀其變再加以改良才是成功之道。他表示 Murphy's law 中「只要是有可能發生的問題，就一定會發生」，因此縱使使用的是比 Windows 更加可靠的 Linux 伺服器，也需要定期自行重新啟動，當然重啟次數會比 Windows 伺服器來得少。保存日誌檔非常重要，特別是對服務停止和性能劣化的記錄。對於沒有必要刪除的舊程式碼，就必須要保留。

最後他表示，對 Startup 來說要聘用新人越早越好。臨危受命的員工絕對不會有好表現，Startup 始終和一般的企業不同，員工需要多一點時間理解公司和系統。另外沒有人能在 Startup 建立初期正確的估計出架構的規模，因此使用成本較低而可塑性高的開源技術非常重要。
_______________________________________________________________

■ [源碼新聞] Citrix 開源釋出 XenServer

謝良奇／編譯 

Citrix 已經宣布，隨著 XenServer 6.2 的釋出，將在新的 XenServer.org 網站上，開放源碼此一產品。在 Xen 專案社群部落格的文章中，社群經理 Lars Kurth 解釋，此舉是為了對抗該產品開發者與用戶間所產生的混淆。

XenServer 之前主要由開放源碼元件，加上部分私有工具所組成，其中包括在 CentOS Linux 散佈套件修改版上執行的 Xen hypervisor，並納入了專門的用戶工具。正如 Kurth 所指出，Citrix 已經在 2009 年將 XenServer 管理工具堆疊 (toolstack) XAPI 加以開源釋出，至於其他軟體如 XCP 建構系統，則維持私有狀態。隨著 XenServer.org 的走向，整個 XenServer 堆疊如今以開放源碼授權推出。

除了 XenServer 開放源碼釋出之外，Citrix 也會持續提供商業版本，其中增加了透過 XenCenter 自動安裝更新的功能，並包含商業支援選項。XenServer 6.2 的新功能包括更棒的延展性，能在每台主機上支援多達 500 個虛擬機器與 4000 個 CPU，代管虛擬機器的效能也有所提升。此外，Windows 8 與 Server 2012 這次也擺脫了運用於客端系統 (guest) 時，所扮演的實驗性角色。

Citrix 表示 XAPI 將在 Xen 專案內進行未來發展，其開發者將與包含 Xen 與 XAPI 套件的 Linux 散佈套件合作，以減少封裝與軟體補丁提交的困難。該公司希望將 Xen 專案視為 XenServer.org 元件的上游，能有助於改善他們在這些元件上的開發力道。

根據 Knuth 表示，Xen Server 將貢獻給 Xen 專案，並專注於此一散佈套件的建構、測試、發行。同樣的，XAPI 專案將與下游散佈套件更為緊密運作，使用新網站作為開發中心。新的組織結構，包括郵件列表、臭蟲匯報系統，將於專案內持續進行討論，Kurth 也邀請開發者們參與此一對話。

XenServer.org 網站也將代管包括 XenCenter 等，來自 Citrix 而僅適用於 Windows，但無法納入 Linux 基金會所管理的 Xen 專案的 Xen 元件。藉由此一方式，XenServer.org 將提供協同合作平台，給致力於 Windows-only Xen 元件的開發者。

新的 XenServer.org 社群入口網站已經可以下載 XenServer 6.2，個別元件的原始碼則可從 GitHub 取得。

相關網址：
1.Citrix 開源釋出 XenServer
  http://www.h-online.com/open/news/item/Citrix-open-sources-XenServer-1897045.html
_______________________________________________________________

■ [源碼新聞] 深根歐盟 - 歐洲議會公民權力政策部舉辦自由開源軟體法律工作坊

黃郁文、林誠夏／編譯

在過去不算短的一段時期，自由開源軟體專案的採納與運用往往僅被視為傳統商業方案的一種替代選擇，然而，隨著全球各地參與者與相關推動組織的持續創作，自由開源軟體專案在近十年間得到突飛猛進的發展，進而在網格運算、雲端應用、嵌入式加值，甚至行動裝置上都逐步擴大了市佔率與影響力，一直到近期海量資料 (Big Data) 與開放資料 (Open Data) 的風潮吹起，也都必須奠基在自由開源軟體專案的既定基礎上，才能得到更有效的建置與推展。這個發展與趨勢，歐盟也看到了，然而自由開源軟體專案的應用並非僅為一單純的技術議題，進一步還需要考究各不同專案在授權方式上的規定，才能得到最佳的建置效益。故於本年度 (2013) 的 7 月 9 日，歐洲議會透過公民權力政策部門 (Policy Department C: Citizens' Rights and Constitutional Affairs) 的協力，舉辦了以自由開源軟體法律面為主軸的「自由開源軟體法律面面觀工作坊 (Workshop on Legal Aspects of Free and Open Source Software Workshop)」，以讓歐洲議會 (European Parliament) 有心進一步了解自由開源軟體授權框架與應用方式的官員與職員，能夠透過這樣的場合來群聚討論與分享意見。

此次歐洲議會所舉辦的自由開源軟體法律工作坊，邀請到了許多在自由開源軟體授權領域具有高度影響力的要角來擔任講師：首先，由身兼美國哥倫比亞大學法學教授與軟體自由法律中心 (Software Freedom Law Center) 發起人的 Eben Moglen，講述著名的 GNU General Public License (GPL)，從其顯著的 Copyleft 相同方式分享特性出發，闡釋透過 GPL 授權模式的利用，可以在軟體專案的建置與開發上，產生哪些跨國跨界交流的效應；接著，由參與「歐盟公眾授權條款 (European Union Public Licence, EUPL)」專案的 Patrice-Emmanuel Schmitz，說明 EUPL 在建置過程中，為了兼顧歐盟各會員國個自的國內法律，而碰到哪些條款訂立的瓶頸及其處理方式，並進一步說明 EUPL 在歐盟框架下同時產生 22 種不同官方語言版本的優勢與好處，圖解其內嵌的 Copyleft 特性如何與其他的自由開源軟體授權條款進行相容處理；然後，第三場次由參與歐洲自由軟體基金會 (Free Software Foundation Europe) 法律事務的義大利籍資深律師 Carlo Piana，帶領與會者探討不同的自由開源軟體授權條款有哪些獨特的發展模式，並說明在通說之下，各條款的軟體元件之間是如何進行互動與融合；最後，是由 Namur 大學著力自由開源軟體授權研究多年的教授 Philippe Laurent，協同歐盟裡各相關計畫的工作人員，依序就自由開源軟體在歐盟體系裡的推動立場，進行公共採購指導原則的說明、案例分析的探討，以及在德國慕尼黑市 (City of Munich) 進行公務系統代換的經驗分享。

由上述議程看來，自由開源軟體專案在歐盟公務系統裡，已不單單止於局部採用，而是未來再有規劃朝著體系性、結構性的格局來進發，以 EUPL-1.2 版為例，此一由歐盟自行撰寫的授權條款並非僅是軟體的使用規定，其整體內容兼具公共資訊系統的採購原則在內，除了在撰寫語文多元化上符合歐盟「多元一體 (In varietate concordia)」的格言之外，至 2012 年 11 月的調查時期為止，歐盟境內已有近 500 個重點專案是採用 EUPL 為其授權方式，而歐洲議會本身，亦將其主力推動的大型專案 AT4AM 同步採用 EUPL 的授權方式向外釋出。可以說，歐盟內部有意識的採用在地化的條款來讓自由開源軟體的研究應用在其領域內深根發展，但同時兼顧這些專案的國際融通性與發展性，以在發展趨勢合宜之時，讓這些 EUPL-1.2 的授權專案，都有機會轉以其他更具國際相容性的自由開源軟體專案來進行授權利用 (GPL-2.0, GPL-3.0, AGPL-3.0, OSL-2.1, OSL-3.0, EPL-1.0, CeCILL-2.0, CeCILL-2.1, MPL-2.0, LGPL-2.1, LGPL-3.0)，甚至，EUPL-1.2 專案內含資料並非程式碼的部份，也可以在必要時被抽離出來改以「創用CC-姓名標示-相同方式分享 (CC-BY-SA-3.0)」的方式來加以利用。從這些舉措來看，其彰顯出歐盟與其歐洲議會在尊重多元族群與資訊融通兩個面向上的共同努力，而其能先於商業模式發展前，便主動發掘出自由開源軟體對民主政體下公眾權益帶來的幫助，也非常具有決策高度，最後，建構 EUPL 多元文字一體適用但可在必要時轉與國際接軌的彈性方式，也非常值得學習與借鏡。



相關網址：

1、歐洲議會自由開源軟體法律工作坊議程與授課文件電子檔案
http://www.europarl.europa.eu/document/activities/cont/201307/20130708ATT69346/20130708ATT69346EN.pdf

2、歐洲議會法律相關工作坊資訊頁面
http://www.europarl.europa.eu/committees/en/juri/events.html?id=workshops#menuzone
_______________________________________________________________

■ [源碼新聞] 網際網路發明者獲頒伊麗莎白女王工程獎

謝良奇／編譯

總獎金一百萬英鎊的第一屆伊麗莎白女王工程獎 (Queen Elizabeth Prize for Engineering)，日前頒發給了網際網路先鋒 Tim Berners-Lee、Robert Kahn、Vinton Cerf、Marc Andreessen、Louis Pouzin。根據英國皇家工程學院 (Royal Academy of Engineering) 表示，這群傑出的工程師為網際網路的發展，帶來了卓越的貢獻。Berners-Lee 發明了全球資訊網 (World Wide Web)，Cerf 與 Kahn 開發了 TCP/IP 協定，Andreessen 撰寫出 Mosaic 瀏覽器並創辦 Netscape， Pouzin 則是開發了 TCP/IP 協定的前身 CYCLADES。

英國皇家工程學院希望這個由若干大型企業贊助的伊麗莎白女王工程獎，可以成為工程師的諾貝爾獎，每兩年頒發一次。獲獎者在三月時公布，實際的頒獎典禮則在本月份舉行。在頒獎典禮上，Berners-Lee 對於政府及企業掌握太多網際網路控制權提出警告，他表示，當你創造出萬用之物時，可用之於善也可用之於惡，我們必須確保它不會因為大企業或政府試圖取得完全控制，而遭受到破壞。


原文網址：
1.網際網路發明者獲頒伊麗莎白女王工程獎
  http://www.h-online.com/open/news/item/Prize-awarded-to-inventors-of-internet-1897720.html
_______________________________________________________________

■ [源碼新聞] 用 Raspberry Pi 打造的模型雲端 PiCloud 可供網路平台教學之用

謝良奇／編譯 

有什麼是 Raspberry Pi 辦不到的？使用樂高積木作為訂製機架，運用 56 部 Pi 共同連接組成的 PiCloud，正是以這台 35 美元微電腦完成的另一個有趣實作。這項專案出自於 Glasgow 大學的計算科學學院，目的是作為輔助教材之用，可以讓學生探索這樣的一個模型雲端平台，並且接觸像是虛擬化等技術，以便學習 Amazon AWS 等服務的底層基礎架構。

PiCloud 裡的 56 部 Raspberry Pi 是利用 4 層小型樂高機架堆疊而成，每一層有一個擁有 16 個 Ethernet 連線的機架置頂交換機，其中 14 個用來連接 Pi 網路，另外 2 個則用來連接交換機。在 PiCloud 的軟體堆疊部分，每一個 Pi 機版都會執行 Raspbian Linux，其中每一個 Pi 有 3 個 LXC container，每個 container 都各自運行一份 Linux。

在 PiCloud 上運行的軟體，包括各 container 裡執行一般工作負載，如 lighttpd，以及實驗性質的人為負載如 lookbusy。PiCloud 上的其他實驗性軟體包括 libvirt 與 docker，Hadoop 也是其中之一，不過目前僅能運作在原生 Linux 之中。該學院的一名學生為 PiCloud 打造了像是 AWS 的網頁控制介面。

其創造者將 PiCloud 描述為永無休止的現在進行式，他們對該平台的未來計劃包括使用像 ovirt 的標準工具，不過他們也正在徵求有關研究方向與合作的建議。有關 PiCloud 的更多訊息，請見其專案網站 (http://raspberrypicloud.wordpress.com/)。

PiCloud 是 Pi 正逐步落實其創造者所賦予任務的絕佳案例，且在製造者社群之中受到歡迎。Raspberry Pi 基金會一開始是想打造低價微電腦，讓更多英國孩童能夠學習寫程式。PiCloud 的確有助於此。


原文網址：
1.用 Raspberry Pi 打造的模型雲端 PiCloud 可供網路平台教學之用
  http://techcrunch.com/2013/06/14/picloud/
_______________________________________________________________

■ [源碼新聞] SketchChair —讓每個人設計自己的椅子

台灣創用 CC 計畫／文 

◎ 本文原載台灣創用 CC 計畫，原文章連結：http://creativecommons.tw/blog/20130714-1。

隨著 3D 列印技術等各種數位製造 (digital fabrication) 工具的蓬勃發展，意味著使用者自行製作獨特個人化產品世界的機會大幅提升，然而現有的電腦輔助設計 (CAD) 系統過於專業和複雜，常讓沒經驗的使用者不知如何操作，導致數位製造過程仍無法普及。

Greg Saul 是對於挑戰消費者和設計師界線感興趣的設計師、工程師，他相信個人生產是改變設計面貌的基礎。出生於紐西蘭威靈頓，他在維多利亞大學念工業設計時遇到現在的合作對象 Tiago Rorke，由於都對「互動、數位製造、電腦運算設計」三者的可能性感到好奇，便一起組成了 Diatom 設計工作室 (http://diatom.cc/)，希望能研發開放資源設計軟體讓所有人都能參與設計。

於 2009 年起，他們和東京的 JST ERATO Igarashi Design UI Project 合作 (https://www.google.com.tw/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&cad=rja&ved=0CC8QFjAA&url=http%3A%2F%2Fwww.designinterface.jp%2Fen%2F&ei=lBXiUeHvOOPtiAfb_YGgCQ&usg=AFQjCNE75ln4m9hkOCFqZ3mU9e-HreUkDQ) ，研發出讓所有人都能輕鬆操作的設計軟體 SketchChair (http://www.sketchchair.cc/)，希望任何人都能因此善用數位製造工具，設計出自己獨特功能性、個人化的椅子。

(http://www.openfoundry.org/images/130730/SketchChair/9281655990_e139cf0dfb_z.jpg)

這個軟體使用開放資源 processing.org 和 Eclipse IDE (http://www.cc.ntu.edu.tw/chinese/epaper/0020/20120320_2003.html) 的 java 寫成，使用者以簡單的 2D 繪圖介面畫出想要的椅子，軟體會自動產生椅子結構，並以一個物理引擎 (physics engine) 測試椅子的堅固穩定度，確保椅子可以站著，也能舒適的支撐人。另外，使用者也能讓模擬自己的虛擬人物坐在椅子上，配合自己的狀況來調整椅子，做出一個客製化的椅子。

接著，軟體會自動產生切割的檔案，使用 cnc router 、雷射切割機或裁紙機，就能以適合的材質切割出組裝的原件。使用者可以把自己的設計寄給線上數位製造服務像 ponoko.com (https://www.ponoko.com/) 切割，或是寄給在地的一些工作室，由於這些椅子的原件包裝輕便，也就容易運送，收到時只要簡單的用手拼裝組合即可。

網站上除了軟體的下載，也有維基說明如何使用這個軟體，還有一個開放設計圖書館，讓所有人可以上載、下載、編輯不同的椅子設計圖，使這些設技能持續修正和演化。這些設計圖採取創用 CC 「姓名標示─非商業性─相同方式分享」 (http://creativecommons.org/licenses/by-nc-sa/3.0/) 授權，歡迎分享和修正，但是不能用於營利，且要尊重使用來源、以相同授權方式持續散佈。

(http://www.openfoundry.org/images/130730/SketchChair/9278873413_ee1b10cb76_o.jpg)

利用這個軟體，除了椅子，其實也可以做成搖椅、桌子、搖搖馬，而且成品的大小可以自訂，不僅能根據年齡、身型調整大小，也能做成娃娃屋裡的裝飾或是設計學系的作業樣品，讓產品做為生活必需品，或是用在娛樂、教育方面。

如此一來，獲得一張客製化椅子的成本僅有裁切和運送費，整個設計的過程則是免費且友善的，鼓勵更多人一起反思、參與、分享日常生活產品的設計。

註 對於合作的東京研究室有興趣的話，可以看看「Mr./Ms. Days (MMDays) – 網路, 資訊, 觀察, 生活」部落格上的日本 UI 之神 – Takeo Igarashi – 研究的進行曲 (http://mmdays.com/2011/07/24/takeo-igarashi-research-parade/) 一文。

參考資料

http://www.core77.com/blog/object_culture/kickstart_diatoms_sketchchair_furniture_designed_by_you_18908.asp
http://www.livinginashoebox.com/the-free-sketchchair-software-allows/
http://www.treehugger.com/eco-friendly-furniture/sketchchair-open-source-project-lets-you-design-your-own-furniture.html
http://www.gregsaul.co.uk/words/SketchChair_TEI2011_Paper.pdf
https://vimeo.com/21250072
_______________________________________________________________

■ [源碼新聞] 2013 年八月份社群活動列表

作者是 OSSF電子報團隊／整理

八月份的活動列表出爐囉！暑假開始囉，相信各位朋友們有更多的時間可以參加有興趣的聚會活動了～有興趣的朋友們可以多多邀請您的朋友一同前往參與！另外，由於活動列表出來的時間比較早，若後續有活動希望也能一起做宣傳的朋友們，記得來信告訴我們喔！信箱： ossfepaper@openfoundry.org 。


KSDG meetup （高雄軟體開發者社群定期聚會） （8/1）
地點：高雄軟體園區 B 棟 708 室（高雄市前鎮區復興四路 2 號 7 樓 708 室）
時間：19:00~21:00
社群網址: https://www.facebook.com/groups/KSDGroup

Hacking Thursday（每週四，8/1、8/8、8/15、8/22、8/29）
地點：台北市大安區建國南路一段 166 號 2 樓 (伯朗咖啡館建國店)
時間：19:30~22:30
活動資訊：http://www.hackingthursday.org/

MozTW Lab @ TP（每週五，8/2、8/9、8/16、8/23、8/30）
地點：台北市中山區民生東路二段 114 號（咖啡．銅號）
時間：19:00~23:00
活動資訊：https://groups.google.com/group/moztw-general

Wiki 協作聚 - FB 線上會 Wiki Cooperation Online Meetup（8/2、8/9、8/16、8/23、8/30）
時間：19:00~21:00
活動資訊：https://zh.wikipedia.org/wiki/Wikipedia:WCP

COSCUP 2013 開源人年會（8/3~8/4）
地點：台北國際會議中心（台北市信義區信義路五段1號）
活動資訊：http://coscup.org/2013/zh-tw/

Taipei Wikipedian Weekly Meetup: Community Operation 維基台北定期聚 — 社群經營工作雙週聚（雙週一，8/5、8/19）
地點：台北市松山區民生東路三段 140 巷 11 號
時間：18:00~20:00
活動資訊：http://zhwp.org/zh-tw/WP:WPTP-S

TOSSUG BoF（每週二，8/6、8/13、8/20、8/27）
地點：台北市南昌路二段 200 號（Mix Coffee & Tea）
時間：18:00~21:00
活動資訊：http://www.tossug.org/

MozTW Lab @ 基隆（每週三，8/7、8/14、8/21、8/28）
地點：基隆市仁愛區港西街 4 號 1 樓（1915 海洋咖啡館）
時間：19:00~21:00
活動資訊：https://groups.google.com/group/moztw-general

Cocoaheads - Kaohsiung（8/8）
地點：高雄軟體園區 B 棟 708 室（高雄市前鎮區復興四路 2 號 7 樓之 5）
時間：19:00~21:00
社群網址: https://www.facebook.com/groups/cocoaheads.kaohsiung/

Taipei Wikipedia Monthly Meetup: Writing Day 維基台北定期聚—假日寫作月聚（8/10）
地點：台北市松山區南京東路二段一號 (伯朗咖啡 南京二店二樓）
時間：14:00~16:00
活動資訊：https://zh.wikipedia.org/wiki/Wikipedia:WPTP-W

台中自由軟體愛好者固定聚會（單週一，8/12、8/26）
地點：台中市中港路二段 60-3 號（默契咖啡）
時間：19:00~21:00
活動資訊：https://groups.google.com/forum/#!forum/taichung-foss-fans-meeting

KSDG web course （8/17）
地點：高雄軟體園區 B 棟 708 室（高雄市前鎮區復興四路 2 號 7 樓 708 室）
時間：19:30~21:30
社群網址: http://kalug.linux.org.tw/
_______________________________________________________________

□ 關於本報 □__________________________________________________

◎ 主編︰洪華超
◎ 法律專欄編輯︰葛冬梅
◎ 技術編輯︰曾義峰
◎ 執行編輯︰王怡凱、陳蕙蓁
◎ 外稿編譯︰林誠夏、黃郁文、謝良奇

本電子報自行採訪、報導、編譯、撰寫文章之智慧財產權屬於中央研究院，採用創用CC「姓名標示－禁止改作－非商業性」授權條款臺灣 3.0 版授權散布，歡迎在不變更內容的前提下，以任何形式重製與散布本報，但必須遵守下列義務︰（1）不得為商業目的之利用；（2）必須標明本電子報智慧財產權屬於中央研究院；（3）完整引用本著作權說明。

若欲以創用CC「姓名標示－禁止改作－非商業性」授權條款臺灣 3.0 版以外的方式利用上述文章，請與自由軟體鑄造場編輯群（ossfepaper at openfoundry.org）聯絡。

非自由軟體鑄造場自行撰寫的單篇文章，其智慧財產權利屬於原作者所有，其以非專屬的方式授權予自由軟體鑄造場運用，而與本電子報其他文章併以創用 CC「姓名標示－禁止改作－非商業性」授權條款臺灣 3.0 版的方式進行散布。

若欲以創用CC「姓名標示－禁止改作－非商業性」授權條款臺灣 3.0 版以外的方式利用個別作者的文章，請自行與該作者聯繫，或透過自由軟體鑄造場編輯群（ossfepaper at openfoundry.org）來轉發聯絡訊息。

授權條款全文請見︰
http://creativecommons.org/licenses/by-sa/3.0/tw/legalcode
授權條款簡介請見︰
http://creativecommons.org/licenses/by-sa/3.0/tw/deed.zh_TW

若欲訂閱本電子報，請至以下網址︰
http://www.openfoundry.org/tw/news

如欲取消訂閱這份電子報，可透過自由軟體鑄造場新聞首頁左上方之自動退訂機制︰
http://www.openfoundry.org/tw/news

或寄發電子郵件至︰ossfepaper@openfoundry.org，以進行人工退訂。