________________________________________________________________

□■□ 自由軟體鑄造場電子報第 237 期 | 2014/03/11 □■□
________________________________________________________________

◎ 本期主題︰Gnome、KDE 與 Cinnamon 的平鋪視窗控制
◎ 訂閱網址︰http://www.openfoundry.org/tw/news/
◎ 下次發報時間︰2014/03/25

□ 本期標題 □__________________________________________________

■ [源碼秘技] Gnome、KDE 與 Cinnamon 的平鋪視窗控制

■ [自由專欄] 選擇 LibreOffice 而非 Microsoft Office 的七大理由

■ [自由專欄] 臭蟲不一定隨機出現

■ [自由專欄] 五種開源迷思

■ [源碼新聞] 透過 CodeCombat 展開編程冒險並貢獻開放源碼

■ [源碼新聞] 首部全開源筆電即將成真

■ [源碼新聞] online offline 皆宜–直接動手參與自由開源軟體專案寫作並不難！

■ [源碼新聞] Linux 友好城市慕尼黑續行採用開放源碼屬性的 Kolab 系統

■ [源碼新聞] RubyConf Taiwan 2014新聞稿 [CH]

■ [源碼新聞] 豐富我們的公眾領域：工具與政策的雙重推行！

□ 本期內容 □__________________________________________________

■ [源碼秘技] Gnome、KDE 與 Cinnamon 的平鋪視窗控制

林雪凡／文



問題在哪？

在約十年前的過去，電腦螢幕的解析度並不高，為了日常使用方便，大家用電腦時通常習慣於將視窗展開成「全螢幕」來工作。面對一台 640 * 480 解析度的螢幕，同時開著圖片瀏覽軟體與文書處理軟體繕打掃描稿，回憶起來還真是一件能充份鍛鍊人類修養的壯舉。

如果不將當前工作視窗展開到全螢幕，不管瀏覽網頁還是編輯圖片，那小小的螢幕都很折磨人，全螢幕工作法因此成為電腦使用者之間的主流。

不過隨著時代演進，我們眼前的狀況也漸漸地有了改變，過去看來奢侈無比的 1440 * 900 等級大解析度螢幕如今已成為電腦的標準配備。而面對如此充裕的螢幕空間，過去「全螢幕流」的工作方法恐怕也有了可被調整的餘地。

有什麼好調整的？請看下面的【圖1】。

(https://www.openfoundry.org/images/140311/Gnome/1.jpg)

▲ 圖1：用 1440 * 900 的螢幕來 google 網頁，結果就像這樣。右側的空白看起來毫無意義。有沒有什麼辦法解決他呢？

為了更好地利用巨大螢幕的空間，有些人會放棄使用全螢幕，而用多個較小的視窗代替。

(https://www.openfoundry.org/images/140311/Gnome/2.jpg)

▲ 圖2：一邊搜網路一邊寫文章的示意圖。如此一來不但空間得以充份應用，也可以同時察看多個視窗中的資料。不過......

雖說【圖2】這種作法不錯，不過每次進入工作狀況前，都必須要手動調整視窗的大小與位置，這實在很煩。更別說如果調整得不夠仔細，視窗之間還會留下醜陋又無法用上的間隙，甚至還可能會讓視窗彼此互相遮蔽。用起來有各種各樣的不方便。

能不能簡單方便地把螢幕變成這樣呢：

(https://www.openfoundry.org/images/140311/Gnome/3.jpg)

▲ 圖3：輕鬆地把視窗變成這樣？

如果您想這麼做，那麼「平鋪視窗」功能正是您所需要的。



平鋪視窗

平鋪（Tiling，也可譯成拼貼）是種很有意思......但一般使用者恐怕不太熟悉的視窗管理方式。簡單說來，「平鋪式視窗管理」的目標，是要讓所有視窗互不遮蔽，並共同分享螢幕上所有的可用空間。就像【圖3】所示的那樣。

為 求操作上的效率與自動化，平鋪視窗管理器通常並不允許使用者詳細指定視窗的大小位置（因為要佔滿全螢幕，而螢幕的總寬度與總高度是固定的；故改變任何一個 視窗的大小位置，都會連帶影響到其他視窗的大小與位置），取而代之，視窗管理器會自動協調計算每個視窗的大小，讓螢幕上的所有視窗共同佔滿所有可用空間， 且不會遮蔽住彼此。

在一個真正的平鋪視窗管理器中，如果您將左側視窗寬度加寬，右側的視窗也會因此自動縮小寬度，兩者之間既不會互相遮蓋，也不會留下難看的空隙，螢幕隨時隨地總是堆滿滿的，讓使用者能充份利用螢幕上的所有可用空間......

聽起來挺不錯的對嗎？

......雖然聽起來是不錯，但老實說吧，我也從沒認真用過一款純為平鋪而設計的視窗管理器。這是因為截至目前為止，Linux (X Window) 下的平鋪視窗管理器似乎都很難用預設值直接零設定上手，真要用之前，還得事先撰寫十分冗長的設定檔才能開始使用，用起來太過麻煩的緣故。

不過近幾年來，因應螢幕尺寸與螢幕解析度不斷加大，許多原本非平鋪邏輯的視窗管理器（如 KWin、Gnome-shell），也逐步加入了不同程度的平鋪支援，讓我們能有機會嘗嘗鮮。

本文打算向各位介紹一些常見於 X Window 桌面環境下，非平鋪視窗管理器中的平鋪功能！雖然功能不或許不甚完整，但方便易上手，隨取隨用就是他們的優點，大家來看看吧。

因為版面有限，本回就只介紹 Gnome、KDE 與 Cinnamon 三種環境，沒有任何歧視的意思，歡迎各位也補充更多資料。



Cinnamon 2.0 內建的平鋪控制

和 Linux Mint 16 一併推出的 Cinnamon 2.0 預設提供了簡單易用的平鋪操作。

請在桌面上拖曳任意視窗，往螢幕的四個邊或四個角移動，如此一來就能讓視窗重新黏在那些邊與角上。

(https://www.openfoundry.org/images/140311/Gnome/4.jpg)

▲ 圖4：拖拉視窗移到邊與角上。

(https://www.openfoundry.org/images/140311/Gnome/5.jpg)

▲ 圖5：如此就能做出簡單的平鋪。注意此時最下方的應用程式列也會出現 | 記號，提示某些視窗正處於平鋪狀態。

雖然無法進行更複雜的鋪排，不過透過這種方式很簡單就能將螢幕空間分配開來。對於簡單的鋪排工作來說算是相當好用的。

如果在【圖 4】拖曳的時候同時按下 Ctrl 鍵，則視窗會被以 snap 模式放置。snap 模式的意思是說：假設兩個視窗一個是 snap 一個是全螢幕，則全螢幕視窗不會蓋住 snap 視窗，而會適應 snap 視窗的大小。

(https://www.openfoundry.org/images/140311/Gnome/6.jpg)

▲ 圖6：左邊的視窗設成全螢幕，右邊的視窗設成 snap 模式（底部應用程式列上會用 || 符號作為暗示）。然後手動拖曳邊緣，將右邊的視窗縮小......

(https://www.openfoundry.org/images/140311/Gnome/7.jpg)

▲ 圖7：左邊的視窗會自動擴大，把空間補滿。

在只有兩個視窗時，snap 模式可以正常運作，不過當需要平鋪的視窗數量有三個以上時，這套運作邏輯就會變得非常詭異，在此不囉唆，各位試試就知。Cinnamon 在日後對 snap 模式應該還有不少可以效調的空間。



Cinnamon 外掛：gTile

預設的平鋪模式太過基本，或許有人會覺得不夠用。那麼就來裝點外掛吧！

gTile (http://cinnamon-spices.linuxmint.com/extensions/view/21) 是一款適用於 Cinnamon 1.8 以上的視窗平鋪用擴充程式，在 Cinnamon 的官網擴充程式列表 (http://cinnamon-spices.linuxmint.com/extensions) 中也相當受歡迎。

安裝方式如下：

(https://www.openfoundry.org/images/140311/Gnome/8.jpg)

▲ 圖8：選擇「系統設定」

(https://www.openfoundry.org/images/140311/Gnome/9.jpg)

▲ 圖9：選擇 Extension 來安裝擴充套件。

(https://www.openfoundry.org/images/140311/Gnome/10.jpg)

▲ 圖10：選擇後按安裝。

安裝好之後，切換到【已安裝】頁籤將這個擴充套件啟用。然後就能正式開始用了。

這個擴充套件的運用方法是按 Win + Space 來啟動控制面板。

(https://www.openfoundry.org/images/140311/Gnome/11.jpg)

▲ 圖11：gTile 的控制面板。

面板上部的方磚型介面其實正對應到您的螢幕空間。請用滑鼠在這些方磚上點擊並畫出範圍，如此就可以手動將「當前焦點所在的視窗」，「重新佈署到螢幕的相應位置上」。

中間的 NxN 按鈕則可以設定上方磚塊的數量，方便您以不同的解析度進行佈局。

(https://www.openfoundry.org/images/140311/Gnome/12.jpg)

▲ 圖 12：gTile 控制面板會浮在目前焦點所在的視窗上方。透過面板上的方磚進行手動平鋪，可以重新調整「焦點視窗」在螢幕上的大小與位置。

繼續看【圖11】。面板左下角那兩顆按鈕，是「動畫」與「自動關閉」兩設定項的切換開關，外框發亮時表示該功能被啟用。在【圖11】中，左下角的按鈕被啟用，而左下靠中的按鈕則被關閉......兩者外觀差異不是很明顯。

面板右下角處的兩顆按鈕，則提供了自動平鋪功能，按下它們後，螢幕上所有視窗都會被自動重排整理妥當。

gTile 主打手動平鋪功能，雖然操作起來較為繁瑣，不過可以做到更有彈性的平鋪方式。其附帶的自動平鋪功能則快捷方便不費腦力，兩者都相當好用。



Gnome 3 內建的平鋪控制

Gnome 3 內建的平鋪控制非常薄弱，不過總是聊勝於無。

請按住視窗標題往左（或右）拖曳，直到碰觸螢幕旁邊（熱鍵 Win + ← 或 Win + →），如此就能將視窗自動擴展到半屏的大小。

......就是這樣，沒下文了，最多就平鋪兩個視窗。

雖然非平鋪視窗管理器本來就不能指望它的平鋪功能有多強，不過這樣還是太弱了些。為了彌補 Gnome-shell 平鋪功能不足，下面來看看 Gnome-shell 的外掛吧。



Gnome Shell 外掛：shellshape

前文中的 gTile (https://extensions.gnome.org/extension/28/gtile/) 其實也有 Gnome-shell 版本的，不過 Gnome-shell 版本的 gTile 在我測試時無法正常工作，所以跳過。試試新玩意兒也不錯嘛。

對於 Gnome 3 使用者，這次我要推荐的是 shellshape。立刻去安裝吧。

Gnome-shell 的外掛只要用普通瀏覽器就能輕鬆安裝，所以請直接點開 shellshape 在 gnome-shell 的外掛網站的頁面 (https://extensions.gnome.org/extension/294/shellshape/)，然後將頁面上的開關打開......

(https://www.openfoundry.org/images/140311/Gnome/13.jpg)

▲ 圖13：直接在網頁頁面上將開關調成 on，接著確認安裝即可。

您可以透過 gnome-tweak-tool 來察看外掛安裝的狀況，並切換外掛系統是開啟或關閉。

(https://www.openfoundry.org/images/140311/Gnome/14.jpg)

▲ 圖14：gnome-tweak-tool 的介面，可以在此調整外掛安裝的狀況以及啟用或否。不過一般時候您不用進來這裡調整，裝好之後，外掛應該就會自動啟用。

一旦您正確啟動 shellshape，就可以在 Gnome-shell 的介面右上角處看到 shellshape 的提示符號。

(https://www.openfoundry.org/images/140311/Gnome/15.jpg)

▲ 圖15：這是 shellshape 在 gnome-shell 中新加入的控制面板。如果有成功安裝，圖示就會自動出現。

您可以透過控制面板切換當前桌面模式，其中......


＊Floating 表示使用「浮動顯示模式」。也就是不用平鋪的一般模式。
＊Vertical 表示「左側單一窗格，右側多個窗格」。
＊Horizontal 表示「上方單一窗格，下方多個窗格」

此處 Floating、Vertical、Horizontal 的設定，是每個虛擬桌面都獨一無二的。也就是說，您可以將某些虛擬桌面設為平鋪，某些則設為浮動；某些垂直平鋪，某些則水平平鋪，彈性很大。


不過這個面板沒啥大用，操作 shellshape 還是靠熱鍵比較方便。 完整熱鍵表請見 shellshape 官網。以下就大概講一下主要操作方式。

既然要平鋪，首先請先選擇 Vertical 或 Horizontal 兩種模式之一。切換模式的熱鍵為 Win + D 與 Win + G。如果要取消平鋪回歸浮動模式，則按 Win + F。在 QWERTY 鍵盤上，這三個鍵聚在一起應該不難記憶。

桌面被指定為平鋪模式後，新開的視窗不需要進行任何操作，就會被自動平鋪放好，如果您關掉一部份視窗，則其他視窗也會自動重新調節，無需您多加插手。

(https://www.openfoundry.org/images/140311/Gnome/16.jpg)

▲ 圖16：以 Vertical 模式顯示 4 個窗格的示意圖。最下方兩個窗格小了一點，因為我的螢幕解析度只有 1280 * 800。

您可以用滑鼠拖移視窗，將一個視窗移到另一個視窗上，如此就能快速交換視窗的位置。

(https://www.openfoundry.org/images/140311/Gnome/17.jpg)

▲ 圖17：在【圖16】的狀況下，將右邊中間的窗格拖到左邊視窗上方，兩個窗格的位置於是立刻調換了。

(https://www.openfoundry.org/images/140311/Gnome/18.jpg)

▲ 圖18：在【圖16】的狀況下，使用熱鍵 Win + L 與 Win + H 調整視窗左右比重。此處的熱鍵 L 與 H 是基於 vi 鍵位。

與 gTile 相比，shellshape 自動化的程度更高，每次新開視窗、關閉視窗、甚至視窗最小化時，都會自動重新計算螢幕的佈局，不需太多手動管理就是她的優點。

不過或許就因為比較複雜的關係，在我測試的 gnome-shell 3.8.4 上，有時會出現「部份視窗沒被平鋪」的 Bug。不過這並不是那種會導致電腦掛點需要重開機的惡性 Bug。此時只要切換一下平鋪模式或虛擬桌面，又或乾脆用 Alt + F2 → r → enter 重新運行 gnome-shell 就能輕鬆解決。

另外，有一些特殊的視窗類型無法被縮放超過某個程度，這些視窗被丟在平鋪桌面中時，有時也會導致桌面無法被正確平鋪好，在可行範圍內還是將這些特殊視窗丟到 Floating 桌面比較妥當。

看網路上的留言，聽說 shellshape 在 gnome-shell 3.10 上運作狀況很完美，這方面還請各位讀者自行試試吧。

如果您對 shellshape 不滿意，gnome-shell 擴充功能網站上還有其他平鋪視窗外掛程式可供您選用。不過今天就不介紹了。


KDE 4 內建的平鋪控制

再來是 KDE 單元！

KDE 4 內建的平鋪控制介於 Gnome 3 與 Cinnamon 2.0 之間，用法也完全相同，只是主視窗（最大的那個視窗）不能放在上方或下方，無法做出上下分割效果。只能做出左右分割。

(https://www.openfoundry.org/images/140311/Gnome/19.jpg)

▲ 圖19：KDE 的平鋪視窗示意圖，主視窗（圖中左邊那個）無法放在最上方或最下方。（請與【圖5】對照）

KDE 的 KWin 視窗管理器很容易進行一些進階調整，因此您可以在這基礎上更加強化畫面效果。舉例來說，您可以將那些被平鋪的視窗全部設為「沒有邊框」......

(https://www.openfoundry.org/images/140311/Gnome/20.jpg)

▲ 圖20：透過「沒有邊框」選項，徹底關閉在平鋪時沒有意義的邊框與標題列，如此一來不但省下更多顯示空間，連視窗周圍礙眼的焦點效果都自然消失了。請與【圖19】對比一下看看。

去掉邊框的設定方法為先選擇一個視窗→按 Alt + F3 叫出【視窗選單】，選擇【更多動作】→【沒有邊框】，如此就能將邊框去掉。

如果嫌隱藏與恢復視窗邊框的手續太過瑣碎麻煩，您還可以設定熱鍵。熱鍵設定方法是：啟動【系統設定】程式→【捷徑與手勢】→【全域鍵盤捷徑】頁籤→【KDE 組件】選單中選【KWin】→最後於下方設定【隱藏視窗邊框】欄位。

我把它設成 Win + W (Meta + W)，如此就能快速切換了。



KWin 外掛：kwin-tiling

基本的平鋪功能總嫌它不夠用，不夠自動。對於 KDE 環境來說，有沒有好用的外掛可以用呢？

這個嘛......看起來 KDE 用戶似乎不太在意平鋪這種事？總之在不把 KWin 換掉的前提下，我只找到一款外掛可用，也就是 KWin 的外掛 tiling (kwin-tiling) (http://kde-look.org/content/show.php/Tiling?content=161151)。這外掛是從 2013 年 8 月才開始開發，同年 10 月才公開推出，是一款超級新的外掛，真難想像 KDE 用戶居然可以忍上這麼久......

安裝方法為【系統設定】→【視窗行為】→【KWin 文稿】→【取得新文稿】，然後對 Tiling 項目選安裝。

這款外掛主打自動平鋪、自動去除視窗邊框、自動適應螢幕分割位置，目標很明顯是自動控制而非手動控制，而且支援的平鋪模式比之前介紹過的那幾款外掛都要來得多。

kwin- tiling 目前還在持續開發中，日後應該很值得期待。不過也因為實在太新了，在當前版本（1.4 版）中 Bug 還非常多，個人覺得還不到能推荐給一般使用者的程度，故此處不詳述使用方法。熱鍵與操作請見這一頁 (http://kde-look.org/content/show.php/Tiling?content=161151)，您也可以到 GitHub 的原碼倉庫 (https://github.com/faho/kwin-tiling) 上提交問題與程式碼。
_______________________________________________________________

■ [自由專欄] 選擇 LibreOffice 而非 Microsoft Office 的七大理由

謝良奇／編譯

◎本文翻譯自 World Label，原作者為 Bruce Byfield：
http://blog.worldlabel.com/2012/seven-reasons-for-choosing-libreoffice-over-microsoft-office.html

LibreOffice 提供免費下載，可以隨你高興安裝到許多不同機器上。不過如果軟體本身沒有你需要的功能的話，免費和自由授權也沒什麼意義。

開心的是，這對 LibreOffice 和其前身 OpenOffice 來說，通常不是問題。雖然許多人誤以為免費軟體一定比不上他們花錢買的，拿 LibreOffice 和 Microsoft Office (MSO) 相比較，可以證明上述論點通常是錯的。或許 MSO 有些功能 LibreOffice 裡找不到，但相反的，LibreOffice 也有 MSO 沒有的許多工具。

不過，除非你在意的是某個一定要有的功能，否則通常沒必要做逐項的比較。只針對效能與高階介面選擇，我可以想出至少七個選擇 LibreOffice 而不是 MS Office 的理由。

＊經典的選單結構

2007 時 Microsoft Office 以 ribbon 介面及標籤頁加上連接與圖示，取代了標準的選單和工具列。雖然大多數用戶接受了此一安排，但許多人並不如此。只有少數其他公司切換到 ribbon，而五年之後，至少有一家公司，以 38 美元售價，提供將 MSO 改回標準選單與工具列的軟體。

相對之下，LibreOffice / OpenOffice.org 雖然在先導專案實驗了 ribbon 介面，但官方則保留了傳統的外觀。雖然沒有人表明過究竟標準與 ribbon 佈局優劣為何，但標準佈局擁有易於閱讀的優勢，讓用戶更容易找到所需功能。由於佈局未經大幅壓縮，標準佈局對於近距離視力有限的用戶，更容易閱讀。

＊共同程式碼與介面

和 MSO 不同，LibreOffice 並非個別程式以品牌與若干介面選擇所包裝起來的集合，LibreOffice 應用軟體被設計成要盡可能共享程式碼。

這套組織意味著 LibreOffice 安裝占用比同樣 MSO 安裝更少的磁碟空間，在同樣機器上跑起來一般而言也比較快。在動輒數 TB 磁碟的年代，這點對於工作站也許不算什麼，但對於小筆電與低階筆電仍然是個問題。

更為重要的是，應用軟體之間有許多對話框是一樣的，有助於加快學習。例如，不管你是在設定文字文件或試算表儲存格時，所看到用來設定文字格式與背景樣式的視窗都是相同的。

＊更多的設計掌控

MSO 為投影片背景、表格、項目符號樣式，以及幾乎所有其他功能，都提供了模板。這些模板的優點是能快速插入，但用戶對模板的控制卻極為有限。

對於那些希望動手控制文件設計細節的用戶，LibreOffice 提供一套低到中階的佈局程式。許多功能通常能設定到 1 至 2 個小數位數，確保你的設計正是你所想要的。經驗豐富的用戶， 當然會把這些結果儲存為模板，以便下次使用。

＊定期 6 個月的釋出週期

在過去 10 年之中，MSO 平均每 3 年釋出一次。用戶必須付錢升級，雖然升級費用比購買新版便宜。這些新版通常不會準時釋出，而且經常更改檔案格式。

在出現之後這幾年裡，LibreOffice 已經穩定進入 6 個月的釋出週期。儘管少數辦公室套件在其演進的此一階段，有大幅度的更改，這個釋出週期意味著 LibreOffice 可以更快速回應不斷轉變的需求，並更快速地發展。到目前為止，這些釋出大致上準時，且完全具有向後相容性。每一個釋出都可免費下載。

＊更棒的瀏覽

瀏覽 (Navigator) 是 LibreOffice / OpenOffice.org 特有功能之一。透過使用頁首、圖形、標格、章節、交互參照、評論、超鏈結與其他物件，這個浮動視窗可以讓你在文件中四處移動，並將文件章節相對於其他章節重新定位。如果你加入的物件附有描述性名稱的話，這個功能會特別有效。文件越長，瀏覽就會越有用。

MSO 之中與瀏覽最接近的是其搜尋功能，不過當你需要在移動至文件中多個位置時，就沒有那麼樣的方便了。

＊更多的延伸樣式與自動化

除了通常的字符和段落樣式，LibreOffice 還包括了頁面、列表、框架的樣式，上述這些在 MSO 中都沒有水準以上的相對應功能。這些功能有助自動化目錄或大綱列表等功能。學會如何適當使用這些功能，可以節省下大量的時間，特別是在做大量編輯時。

＊更高的穩定度

MSO 在小文件上運作得體，例如，20 頁的文件檔。不過，要是檔案再大，當機的機會就會增加，檔案有可能毀損嚴重而難以回復。

這個限制和 LibreOffice 正好是鮮明對比。其前身 OpenOffice.org，據傳就是為了穩定性而設計。因為其原始開發者被要求用該程式撰寫它的文件。這個傳聞可信度頗高，因為（以我個人觀察） LibreOffice 足以處理數百頁長或數百 MB 大小的文件。主要限制在於你所使用的機器記憶體容量。

LibreOffice 偶爾會當機。不過，不像 MSO，LibreOffice 在當機後無法回復所有檔案的機會實在罕見，罕見到我得用力才能記住。

事實上，在使用 LibreOffice 與 OpenOffice.org 的 10 年之中，我只記得兩次無法回復的當機，其中一次是超過 960 頁的檔案。相較之下，我使用 MSO 時一天就有同樣多次的經驗。

在免費與授權之外

以上各點顯示，使用 LibreOffice 不僅是一項政治聲明，或是為了安裝多台機器，而忍受不便之處的問題。

當然，免費與自由授權可以是很大的優勢。但在 LibreOffice 的例子裡，有許多實際原因選擇自由軟體而非其私有競爭對手。安裝 LibreOffice 並以開放的心態開始使用吧，你應該也會發現更多喜歡它的理由。
_______________________________________________________________

■ [自由專欄] 臭蟲不一定隨機出現

謝良奇／編譯 

◎本文翻譯自 Dr. Dobb's bloggers，原作者為 Andrew Koenig：
http://www.drdobbs.com/cpp/not-all-bugs-are-random/240165035

上星期我開始討論起白箱測試 (white-box testing)，由於有時候從外面很難一眼看出軟體是如何出錯的，因此這個方法有其重要性。

白箱測試之所以重要還有另一個理由：透過觀察程式的結構，我們有時能預測出可能發生錯誤的情況。只看程式的外部行為也許不能發現這些情況。也就是說，我們可能忽略了檢查程式在這些特定情況下的行為是否正確。

當然，這種狀況有某些容易預測。舉例來說，假如有個程式處理 n 個項目的集合，兩種顯而易見要測試的狀況就是 n = 0 與 n = 1。不過，其他類似狀況也許需要檢查程式內部。像是，只要程式依據程式輸入的某些面向，例如大小，來決定使用一種或多種演算法時，我們都應該確認這支程式在接近決策邊界雙邊時能順利運作。我看過相當多程式會對輸入資料行大小或姓名長度，設定長度的限制。在遇上與限制等長，或長度比限制多（或少）一個單位的輸入時，有太多這類程式就會出錯。如果你藉由查看程式碼了解有哪些限制，會讓測試接近這些限制的案例簡單許多。

當程式偵測到發生問題並嘗試重複其作業時，是另一種可以加以預測的錯誤。例如說，如果發生的是永久性的故障時，該怎麼辦？程式會無限制重試下去嗎？我記得在到處都有網路的時代之前，有一支程式，會透過電話線把資料傳給另一台電腦。如果接收端的電腦回報錯誤，發送端電腦會結束連線，等一下，然後再次嘗試傳送資料。

這套方式看來有效且穩固，足以應對傳輸錯誤。不過，程式作者不知道的是，為了節省資源，之後釋出的作業系統會對檔案大小設加上限。這個限制是可以設定的，不過其預設值太小，所以許多情況下用戶傳送的檔案會大於此預設值。如果發送端的檔案大於接收端的檔案大小限制，當檔案內容超過限制時，接收程式就會出錯，並以為發生 I/O 錯誤，然後回報給發送電腦。接著，發送端會關閉連線，等待，然後重試。接收端會建立暫存檔案收下這些資料，然後整件事會不斷重演。

換句話說，增加限制檔案長度的作業系統功能，反而耗用更多資源。嘗試把一個檔案傳送到有小檔案大小限制的電腦，會造成傳送失敗的無限迴圈，阻礙兩台機器間的進一步通訊，同時緩慢地接收端的磁碟空間。

雖然這些問題很嚴重，之所以進行白箱測試還有一個更為重要的理由：安全性。安全性臭蟲比起效能臭蟲，更難以在測試中發現的原因是，事先假設安全性臭蟲會被惡意利用。許多安全性臭蟲事實上是沒能正確實作“不論該程式輸入為何，都不應該做某件事”這種形式的需求。黑箱測試 (Black-box testing) 一般只能驗證程式會做什麼，而不是程式不會做什麼。不過，經由適當結合白箱測試與插碼測試 (instrumentation)，我們可以更有自信地宣稱，至少沒有某些特定類型的安全臭蟲存在。
_______________________________________________________________

■ [自由專欄] 五種開源迷思

謝良奇／編譯

◎本文翻譯自 Federal Times，原作者為 Brian Paget：
http://www.federaltimes.com/article/20131215/ADOP06/312150005/Viewpoint-5-open-source-myths

政府機構採行開放源碼多年來，廠商、平台、工具和技術的景況已經有了大幅擴展。用一隻手遍數主要開源選項（Red Hat Linux、MySQL Oracle、Apache 網路伺服器等）的日子已經過去，市場上充斥著來自技術公認廠商與新秀供應者的數十種解決方案。

在來自各方關於每套開源解決方案優劣處的訊息轟炸之下，開源採用漸增的同時，伴隨而來的，是更多的困惑。如何從現實中過濾出迷思，是對政府機構決策者的一項挑戰。當這些機構移往開源專案並評估新解決方案時，普遍存在著五種迷思，值得加以思考。

＊只要把你的程式碼開源，就有人會免費幫你工作
把程式碼加以開源的聯邦機構，通常會有一種期待：只要打造好環境，就有人會來，免費幫忙做事。開放源碼也許會吸引到一些人，但是不會有成千上萬的人排隊，準備要貢獻所有公開的開源專案。即使是 Apache Hadoop，這個可以說是最熱門的開源專案，去年也只吸引不到 50 位貢獻者。

＊傳統軟體廠商會不惜一切避免開放源碼
有些人認為因為害怕開放源碼會吸乾產品交付、服務和支援的營收，現今的軟體廠商會保護他們的私有軟體領域。事實是，創新的現有軟體廠商踴躍地靠向開放源碼。Adobe、Google、Amazon 等公司，以開放專案創造出可觀的營收。這些公司之所以擁抱開放源碼，是因為不斷重複建構作業系統、資料庫、網路伺服器等系統的基本元件，越來越不合時宜。最成功的開源專案反映出，軟體創新正向堆疊上方移動的自然發展。同時，元件的標準化與大量商品化推動他們走向開放源碼。
    
＊開源專案加速創新速度
有個普遍存在的迷思是，當專案開源之後，機構就可以為創新解決方案縮短上市時間。的確，開放源碼透過把軟體許多基本組成單元自由化、公開化，讓更大的社群無需重複開發即可運用這些基礎，因而促進創新。不過，這些元件的成功有賴於不會隨時間急劇變動的穩定核心功能集，這一點也是事實。因此，在核心元件上的創新腳步，事實上比傳統軟體要來的緩慢。

＊開源軟體會自動幫你省錢
商業軟體的前期成本一般會高於免費下載的開源專案。然而，整體 IT 轉型的成本，大部分是落在實現機構轉型的相關人事費用上。這些人事成本是會變動的，或高或低主要是受到實現轉型所利用的工具影響。因此，最好的工具加上最優秀的人才，才能最終按時在預算內達成最棒的專案。

＊開源專案品質不高
開源專案的狀況與涉及其他類型軟體的技術專案沒有什麼不同。有些專案品質很高，有些很低，很多則處於中間。開源軟體在許多情況下是絕佳選項，然而和其他技術一樣，機構必須在個別案例的基礎上研究各種選項，了解是誰在貢獻開源專案，貢獻者的背景，專案的活躍程度如何，以及多少人將這套專案運用到企業規模上。
_______________________________________________________________

■ [源碼新聞] 透過 CodeCombat 展開編程冒險並貢獻開放源碼

謝良奇／編譯

◎本文翻譯自 OpenSource.com，原作者為 George Saines：
http://opensource.com/education/14/1/open-source-game-codecombat

當我在 2008 年創立第一家公司時，我只是個程式設計菜鳥。歐柏林學院的經濟學學位，並沒有讓我對寫程式的職涯做好準備。雖然我在拼揍粗糙的 HTML 與 CSS Django 模板上，盡了最大努力，我對我們代碼庫的貢獻仍然相當有限。因此我開始透過線上教材與課程自學寫程式。歷經許多令人沮喪的跌跌撞撞，我終於了解到為什麼我總是無法堅持下去：程式課程與影片對我而言感覺就像學校，而我已經沒興趣重返校園。

我們之後著手 CodeCombat，一套教導孩童與學生寫程式的遊戲。玩家在與怪物敵人對戰中，利用咒語 (JavaScript) 控制力量。今年 1 月 8 日我們開源釋出了整個專案，包括伺服器、美術等等。你可以複製我們的代碼庫，並在幾分鐘內在你的機器上擁有可以運行的版本。

CodeCombat 是由 YCombinator 支持的一家營利新創公司，我們認為程式教育的未來，應該始於教學，而終於對開源專案的貢獻。當我們在設計該產品時，我們已經確定要把所有程式碼開源出去。我們想像玩家在網站上透過教材學習寫程式，一旦他們熟練到某種程度，就投入有著貨真價實程式碼與世界級開發者網絡的代碼庫，協助他們學習並著手對他們有意義的專案。

自從我們宣布開放源碼後，我們的代碼庫已經吸引超過 2000 顆星星、400 個分支、200 位觀察者、25 位貢獻者。CodeCombat 一直是 GitHub 上前 10 大趨勢代碼庫。

我們的公告說：封閉源碼或許幾乎是各新創公司與遊戲工作室的選擇，但我們認為這項慣例應該重新思考。CodeCombat 已經是社群專案，有著數百位玩家自願創造關卡、撰寫文件、協助新手、測試遊戲，甚至是翻譯成 17 種語言。現在，程式開發者也可以加入這場派對。

我們的目標是教你寫程式。在我們擁有超過 9 千個關卡，可以帶你一路從新手到像貝拉那樣的高手（指法國程式開發者 Fabrice Bellard）之前，為什麼不跳進友善新手的開源專案持續學習？我們不僅是把程式碼放出來而已，我們努力讓你更容易加入貢獻。你不需要了解 git，也不需要安裝什麼東西，你甚至不需要知道如何寫程式，就可以協助解決我們在 GitHub 上的某些問題。

當前我們的目標是吸引開發者的關注，並持續為專案打造有參與感的貢獻者社群。遊戲為學生和年輕開發者接觸電腦科學，提供了豐富且互動的方式，我們希望 CodeCombat 最終能成為數百萬學生踏上他們編程冒險的理由。
_______________________________________________________________

■ [源碼新聞] 首部全開源筆電即將成真

謝良奇／編譯

◎本文翻譯自 WIRED，原作者為 Klint Finley：
http://www.wired.com/wiredenterprise/2014/01/open-source-laptop/

你的筆電安全嗎？在這個國家安全局等單位監聽氾濫的時代，你真的確定你的電腦還安全？它從裡到外每個地方都足以抵擋網路上壞蛋的攻擊？這些問題似乎只有偏執狂才會有。但是國家安全局前約聘人員 Edward Snowden 近來的揭秘在在顯示，我們的確有理由追根究底。

許多人正努力確保你筆電上的軟體是安全的。就在最近，Mozilla 籲請全球工程師們查核其 Firefox 網路瀏覽器，希望證明該軟體未被國家安全局或其他人入侵。而且你可以對 Linux 這樣的作業系統放一百二十個心。因為是開放源碼，有無數隻眼睛不斷地在照看其程式碼。

但是你筆電的硬體呢？主機板上的那些微型電路呢？或是控制主機板與其他低階元件的韌體呢？這些全是封閉源碼。不管是誰都幫不了你。

這就是 Sean Cross（暱稱 xobs）與 Bunnie Huang 之所以著手 Novena 專案，以開源硬體建構自製筆電的原因。或至少，是部分的原因，因為除此之外，他們也希望從中獲得樂趣。就像 Huang 說的，他們希望一邊學新東西，一邊還能做出每天實際會用到的東西。

同時，他們希望其他人也能使用。根據 Huang 所說，他們正規劃進行群眾募資活動，製作更具用戶親和力的開源筆電。在此期間，你可以到該專案的 wiki 網頁找到規格文件與機殼設計來打造自己的筆電。

Cross 與 Huang 兩人是新加坡一間硬體公司 Sutajio Ko-Usagi 的創辦人。他們倆人是在 Chumby 工作時認識，那是 Huang 所共同創辦的網際網路應用設備公司。之後他們一起投入許多硬體專案。最近，在德國舉辦的混沌計算機大會 (Chaos Computer Congress) 中，他們展示了他們在許多 SD 卡中發現的安全漏洞，並且簡報了 Novena 專案。

Huang 談到這部機器，主機板、電池板、顯示卡都是全新的設計。電路板每一條線路都是我親手安置。他們也設計出機殼，其中包含若干可以用 3-D 印表機列印的元件。他們並且用開源的 Das U-Boot，取代私有韌體。

這並不是最快或最具可攜性的筆電。配備 4GB 記憶體與手機中常見的 ARM 處理器，該筆電提供的運算能力相當于一般小筆電，不過重量與大小卻像是十年前的古董筆電。

不過 Novena 用透明度彌補了在現代性上的不足。Huang 表示，如果你覺得硬體有哪個地方可疑，你可以查看參考電路圖，看看是不是真的有問題。換句話說，你可以檢查有沒有國家安全局的後門。

但 Novena 中的硬體並非全是開放源碼。像是螢幕、鍵盤、硬碟、電源供應器、處理器，全是購買現成產品，然用用一個黑客過的遙控車電池組供電。

目前 Novena 盡可能地要達成完全開源筆電的目標，不過還有其他選項。對於願意接受私有圖形驅動程式的人，可以找到一些使用開源 Raspberry Pi 電路板的自製筆電設計。如果想要立即可用的產品，則有 Gluglug 的客制化 Thinkpad x60，其中使用了開源韌體 Coreboot。

雖然上述這些筆電沒有一部能在外觀與效能上和 MacBook Air 匹敵，但是它們提供了 Apple 可能永遠不會有的：近乎完全地控制一切。這不是你想要的？那你會錯過不少樂趣。
_______________________________________________________________

■ [源碼新聞] online offline 皆宜–直接動手參與自由開源軟體專案寫作並不難！

黃郁文、林誠夏／編譯

當你是一個資淺的初學者時，需要什麼樣的技能才能漸步深入自由開源軟體專案的參與呢？

這個問題是許多自由開源軟體專案的初參與者們，都會捫心自問的問題。而其實，有許多 online 與 offline 的網站與資源，是可以協助這些初階的參與者，更加認識自己的能力、屬性，並找到他們適合參與的專案與活動。

首先，談談線上–online 立即可以取用的資源：

1、Codecademy：http://www.codecademy.com/

Codecademy 是一個讓使用者可以透過互動模式，學習程式寫作的線上網站。其提供的學習資料包括：HTML、PHP、Ruby，Python 這些許多自由開源軟體專案都會使用到的程式語言。該網站上提供的每一個程式語言學習資料，都從淺到深，最基礎的課程，會從程式語法與指令列的教學使用開始，使用者只要依線上課程指示完成每一個學習任務，就可以累積積分來獲得徽章，並逐步向下進行更高程度的學習教程。要使用這個網站的學習資源，使用者完全不用在自己電腦上安裝什麼額外的軟體程式，只要使用瀏覽器連上站台，就可以順暢的進行程式語言的寫作學習。

2、Codeschool：https://www.codeschool.com/

Codeschool 則採取另一種與 Codecademy 截然不同的錄影教學模式，他們稱之為「學習教程 (paths)」。這些錄影教程包括 Ruby、Javascript、HTML/CSS 還有 iOS 的領域與主題。與此相較，Codecademy 是提供線上可取得的學習文件，Codeschool 則改用課程錄影的方式，來讓使用者據以觀看與學習。Codeschool 每一個提供的學習教程，都包含上述主題的基礎說明與實作教學。同樣的，只要透過瀏覽器就可以觀看此網站上所有的學習教程，更值得一提的是，Codeschool 還在 iPhone 與 iPad 平台上提供了教程觀看的 app，所以這些行動裝置的使用者，將可以使用 app 得到更簡便的觀看效果。

3、Code.org：http://code.org/

Code.org 以它獨樹一格的「一個小時學會程式寫作 (Hour of Code)」專案而聞名，舉 Javascript 和 Python 為例，它讓使用者可以線上閱讀這些語言的初階導覽教材 (tutorials for beginners)，即可依其在教材中反覆引導的基礎概念與語法，寫出可資運作的小程式。這些基礎概念包括重覆迴圈 (repeat-loops)、條件式語法 (conditionals)，以及基本的程式演算法 (algorithms) 等。除此之外，Code.org 亦為其教材做了適齡資訊的標示，使用者只要透過一個網頁瀏覽器，或是使用 iOS 或 Android 行動裝置，就可以透過這些教材進行基礎程式寫作概念的反覆練習。

4、Scratch：http://scratch.mit.edu/

對 8 歲以上的小小程式碼學習家來說，有一個非常適合作為開源協作學習的程式語言叫 Scratch！

Scratch 是一款「圖形化」的程式語言，它有一個負責維護與開發新版本的線上社群，而這個程式語言的主要建置目的，就是要讓學童可以透過多媒體互動、遊戲、動畫製作的方式，來學習程式碼的寫作概念與邏輯。當學童透過 Scratch 來製作這些遊戲和動畫的同時，他們不但能發揮創造力、學習群體共工與邏輯思考，更重要的是，也一併體驗了程式運作的基礎架構。也因為 Scratch 的創立目的是如此，它的操作介面對於使用者非常友善，可說小朋友都可以簡易上手並進行操作。除此之外，Scratch 線上網站亦有提供讓教學者、學員家長能夠據以參照學習的教學範本，讓 Scratch 學習在學校教學與在家自學的環境下都一樣便利。

再來，除了上述的線上學習資源之外，若使用者已經有鎖定要參與的開源專案，或有想要主力投入的協作平台，也可以試著找尋下列「離線版本–offline」的輔助資源，來取得更多更直接的協助：

1、使用者群組 (user groups)

自由開源軟體專案相關的地區性使用者群組，通常會固定舉行每週一次或每月一次的聚會，參與這些實體聚會的好處就是，有任何問題可以當場直接提問、直接討論，所以相關知識可以被面對面的分享，也更容易找到符合參與者需求的學習指引。較具規模的自由開源軟體專案幾乎都會有這類的使用者群組，Linux、PHP、Drupal，甚至 MySQL，相關的使用者群組都可以說相當活躍。

2、創客空間 (hackerspace and makerspace)

所謂的 hackerspace 與 makerspace，是可以讓參與者「自己動手作」作品的共工實體空間，它的運作模式頗為社群參與化，參與者多對某一個領域的共同創作帶有相當的興趣，相關的議題包括電腦、科技、科學等，故而群聚在同一個共創空間裡，進行討論、交流，與作品的實體創作。透過這種面對面的群體互動，hackerspace 是參與者實際入手自由開源軟體專案協作，或開放硬體專案共創的絕佳方式，與地區性 user groups 不同的是，在 hackerspace 您可以在單一場合遇到不同開源社群的夥伴，從中了解到自己真正的興趣所在。

3、程式道場 (Coderdojos)

Coderdojos 是一個非營利的跨國運動，2011 年由 James Whelton 與 Bill Liao 在愛爾蘭設立，並逐步推展到全世界二十幾個國家都受到一樣精神的感召，而設立分部。簡單來說，Coderdojos 是一個藉由志工帶領、每週固定聚會、同儕互助，來幫助小朋友學習程式寫作的「道場」空間。其標誌以太極––陽者為 1、陰者為 0 作為表徵，代表太極循環，藉由程式碼 0 與 1 的組合，營建出整個繽紛的軟體世界。一般來說，7 歲到 17 歲的學齡兒童，都可以在 Coderdojos 找到他們感興趣的項目進行學習與實作。

如果看過上述的介紹，開始對程式寫作感到興趣，下面這個初階的建議列表，亦可一併參考：

  -年齡 6-8 歲的小朋友，可以從 code.org 的引導課程開始，或是透過 Scratch 的使用、Coderdojos 的參與，來逐步加深程式寫作的邏輯概念。
  -中學低年級的學生，可以從 Javascript 與 Python 這兩個線上學習資源較為豐富的程式語言著手，或是參與各地區的 hackerspace 與 user groups 來認識更多志同道合的夥伴。
  -中學高年級的學生，可以開始進行智慧型載具上應用程式 APP 的開發，並透過參與 hackerspace 與 user groups 的方式，來分享您的程式寫作，與厚植自己的寫作能力。



參考網址：

1、開始參與自由開源軟體專案的實作–線上資源、離線活動 
http://opensource.com/life/14/2/exploring-open-source-beginners

2、孩子的程式教育不能等 - 開放源碼專案帶領小朋友走進程式碼的世界！
http://www.openfoundry.org/tw/foss-news/9083-2013-10-09-03-13-15

3、Wekey-wiki 程式設計 Scratch 教學網頁
http://wekey.westart.tw/%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88_Scratch

4、TEDx Taipei - 人人都該學程式設計
http://tedxtaipei.com/2013/02/10-places-where-anyone-can-learn-to-code/

5、FABLAB TAIPEI - 開源共創就在你身邊！
http://www.fablabtaipei.org/

6、TOSSUG - 台北開放原始碼軟體使用者社群
http://www.tossug.org/
_______________________________________________________________

■ [源碼新聞] Linux 友好城市慕尼黑續行採用開放源碼屬性的 Kolab 系統

黃郁文／編譯

以遠離 Microsoft，積極接納 Linux 作業系統而聞名的德國城市慕尼黑，繼其經營有年的 LiMux 轉換計畫之後，近日又為自由開放源碼的推動參與者帶來了好消息！

慕尼黑政府最近啟動其 MigMak 下的 Kolab 轉換計畫，要為市政人員採用 Kolab Enterprise 這個群組式的開源文書軟體，以處理電子郵件收發、工作排程、聯絡通訊錄，與行事曆等等，每個公務人員日常都需要使用到的文書工作，並藉此取代過往使用的 Sun Microsystems 日誌文書系統。此項轉換計畫的時程預定於 2014 年底前完成，並由 Kolab 合作伙伴 Elektroniksystem- und Logistik-GmbH 商業服務公司，負責執行安裝、設定、測試、諮詢與轉換訓練等工作。此一轉換決策，可說是基於已執行 9 年的 Windows 轉換計畫–Limux 之後的續行大作，過往慕尼黑當局決定要將其公務系統下所有 14,800 台的 PC，由 Windows 系統轉換至針對公務事務客製優化處理的 Linux 作業系統，彼時 Limux 專案的負責人 Peter Hofmann 表示，向自由開放源碼系統進行公務平台的轉換，目的並不僅僅是為了簡省成本，更希望能達成公務資訊系統，不受制於單一系統供應商的結果，以免因過度依賴單一廠商所提供的資訊建置服務，而導致不論是辦公室系統或是基礎建設都會被單一供應商把持與拘束的下場。

而經歷過去 9 年 Limux 計畫的努力之後，慕尼黑市的公務電腦，已大比例的使用客製化的 Linux 作業系統，餘下低比例的 PC，則是安裝了 Windows XP 作業系統，作為與其他城市進行公務文書往來時，交換資訊與轉換檔案格式必要之用，而因為 Windows XP 系統將在本年度 (2014) 4 月時終止任何技術服務上的支援，故此時慕尼黑市再起專案，規劃要將 Kolab 這套開源但兼顧 Windows 相關文件格式轉換特性的套件軟體，安裝至因文件格式相容問題所預留下來的 Windows PC上，讓公務體系下目前多數已安裝 Linux 系統的電腦，能透過 Kolab Enterprise 13 桌面與網路程式的橋接，而不會與其他城市的公務文件，產生交換上的實際障礙。可說慕尼黑市的市政資訊系統，從專屬平台轉向開源專案的前進腳步，有一有二、接續向前。

Kolab 這個源於瑞士 Kolab Systems AG 公司的群組套件軟體，最早是為德國聯邦辦公室的資訊安全系統所開發，也可被一般應用程式的供應商及網際網路的服務業者所利用。去年十二月釋出的 Kolab Enterprise 13，是預設安裝於 Red Hat Enterprise Linux 上使用的版本，但該公司的軟體套件，其實並不受限在 Red Hat 平台上才能使用，其官方支援網站，將陸續釋出支援其他平台的版本，而現正釋出的版本包括開放源碼的格式，故使用者亦可自行編譯打包不同 Linux 作業系統下，能夠使用的檔案。而儘管慕尼黑當局聲稱，此次轉換與資訊系統建置成本的簡省無關，不過其同時也表明：以金錢支出來衡量，將相關文書處理系統轉換成開放源碼的方案之後，初估可為該市節省超過一千萬歐元的資訊採購預算。

去年年初 (2013) HP 曾發表其受託於 Microsoft 進行的研究報告，該份報告宣稱將系統由 Windows 轉換至 Limux 與 OpenOffice，將為慕尼黑市帶來難以預料的置換成本，對此慕尼黑市 Limux 專案的執行團隊，已否認該份報告數據的正確性，惟其專案負責人 Peter Hofmann 也坦承：過渡初期的確在技術與應用上，遭逢了不小的阻力與困難。像是對系統基礎配置的重新設定，以及協定的優化，好與 LiMux 系統與其所使用的自由開源軟體，能與其他採用專屬系統方案的公務單位能相互配合，實作上都不是件容易的事。但讓人欣慰的是，慕尼黑市並未因轉換過渡期的困難，而轉回使用私有系統、專屬軟體的回頭路，其在 Limux 過去 9 年的推動基礎下，接續在文書處理套件程式上，也將續行採用開放源碼屬性的 Kolab 系統，也期盼透過慕尼黑政府採購自由開放源碼軟體的成功範例，能讓全球其他各大組織與政府機關的公務體系，能認同這樣的風潮，並進而產生風行草偃、接續不斷的正向影響。



參考網址:

1、自由開放源碼軟體在德國慕尼黑再下一城
http://www.zdnet.com/open-source-wins-the-day-once-again-in-munich-7000026802/

2、Linux 友好城市慕尼黑採用開放源碼的 Kolab 文書處理系統
http://www.theregister.co.uk/2014/02/26/munich_goes_kolab/

3、慕尼黑市採用 Kolab Enterprise
http://kolabsys.com/news/city-munich-goes-kolab-enterprise

4、慕尼黑市表示開源轉換成功結束
https://www.openfoundry.org/tw/foss-news/9153-2014-01-08-02-59-30

5、Microsoft 發布德國慕尼黑市 Linux 轉換計畫調查報告與官方分析有明顯落差
http://www.openfoundry.org/foss-news/8926
_______________________________________________________________

■ [源碼新聞] RubyConf Taiwan 2014新聞稿 [CH]

RubyConf Taiwan／文

English version is here: http://rubytaiwan.tumblr.com/post/79134654151/rubyconftaiwan2014-press-release-en

RubyConf Taiwan (http://rubyconf.tw/) 是台灣最大的 Ruby 程式語言大會，將於 4 月 25 日（週五）、26 日（週六）在國立陽明大學舉辦第四屆會議。本屆大會在主辦人鄧慕凡的籌辦下，廣邀國內外諸多重要講者參與，打造台灣目前最具國際化的程式語言盛會，自 3 月 10 日中午 12 點整開放報名。

本屆 RubyConf Taiwan 的邀請講者有：Rails Girls 社群創辦人 Linda Liukas 和 Terence Lee，她們將一同上台分享Rails Girls社群創辦經驗；Ruby 之父松本行弘先生與 Ruby 核心開發者笹田耕一先生是第二次在 RubyConf Taiwan 進行演講，展現他們對 Ruby 社群在台灣發展盛況的贊許與支持；還有 JRuby 的主要開發者 Charles Nutter；另外，以良葛格之名廣為人知的 Java 及 Python 語言的教育專家林信良先生也將發表主題演講；更有來自國內外的諸多程式好手分享心得與發現。本屆會議的內容精采可期，不容錯過。

在台灣，RubyConf Taiwan 是最多外國程式開發者參加的程式技術研討會。本屆大會為加強台灣程式語言界與國際與會來賓交流，將國內講者的演講與發言內容進行全程即時的中翻英口譯，也有部份國內講者直接以英文進行演講。RubyConf Taiwan 是對外國人友善的大會，提供住宿優惠與交通指引。由於 RubyConf Taiwan 促成了台灣與國外程式語言界的良好交流，讓參與過之前三屆的國內外講者願意以實際的行動繼續支持，並持續有新血加入，本屆參與會議的人數預計將超過 250 人。

第四屆 RubyConf Taiwan 的舉辦要感謝協辦單位國立陽明大學系統合成生物學研究中心 (http://csb2.web.ym.edu.tw/)，與眾多熱情的贊助廠商，包括白金級贊助商：Faria.co (http://faria.co/)、i-TRUE (http://www.itrue.com.tw/)，金級贊助商：銳綸數位 (http://www.rulingcom.com/)、Amazon (http://aws.amazon.com/)、Code Mentor (https://www.codementor.io/)，銀級贊助商：Laxino 勒思 (http://www.laxino.com/)、KKBOX (http://www.kkbox.com/)、中央研究院自由軟體鑄造場 (http://www.openfoundry.org/) 以及銅級贊助商：VeryWed (http://verywed.com/)、GoodLife 好生活 (http://goodlife.tw/)、uknowiknow 你知我知好學網 (http://uknowiknow.com/)、 Cardinal Blue (http://cardinalblue.com/) 等的鼎力支持。

第四屆 RubyConf Taiwan 是為時兩天的雙軌演講議程，除了堅強的講者陣容與豐富多元的講題，另將延續上一屆好評如潮的 Official Party，讓與會者在第一天會後和國際間的Ruby程式開發者交流。本屆大會的報名期限自3月10日中午12點整起到3月31日，期待各位程式愛好者的共襄盛舉。
_______________________________________________________________

■ [源碼新聞] 豐富我們的公眾領域：工具與政策的雙重推行！

劉芊影／文

◎ 本文原載台灣創用CC 計畫，原文章連結：http://creativecommons.tw/blog/20140223

牛頓曾說過一句話：If I have seen farther than others, it is because I was standing on the shoulders of giants.

站在巨人的肩膀上，我們能夠看的更加遼闊，而巨人即是所有前人所累積下來的智慧結晶，以前人的技術、知識作為基礎，我們發掘探索了更多這個世界的奇妙，也生產出許多精妙絕倫的事物，使的時代不斷的進步，同樣的，以「創作」而言，不論甚麼樣的方式，都需要有靈感的啟發，而靈感的來源可能來自一個記憶、一段話、一本書、一幅畫等等，這些或多或少都會運用並奠基於前人的作品，然而，此時在鼓勵自由飛翔的創作和保護既存作品的著作權彼此之間便會產生有所衝突的拉鋸戰。

我國著作權法第一條規定：「為保障著作人著作權益，調和社會公共利益，促進國家文化發展，特制定本法。」由此可知，著作權法除了為保護著作人的著作權外，也應該兼顧社會公益，使大眾有一定對於他人著作接近利用的空間，換言之，應兼衡利用人的權益，而非一味的以保護著作權人為本位，因創作，本是一件在相互激盪之間方能迸出更強烈火花之事，如此方能確實促進文化的持續發展。而在著作權法的運行之下，受著作權保護的創作，若需利用皆需取得著作權人的授權，但各國著作權法亦多會規定，於著作權保護期間屆滿後，該著作即會進入公眾領域 (Public domain) 的範疇，使的大眾可以盡情的、不受任何限制的使用該等著作，然而，在著作權法的歷史演變上，可以看到我們不斷的擴張著作權的保護期間，不斷擴張的結果將導致各類的作品越發難以進入公眾領域內，使的創作一事備受阻礙，此外，因著作權保護期間相當長，一般大眾亦無法輕易判斷一個著作是否已屬於公眾領域而得以自由利用，亦可能造成大眾為免有侵權風險而不敢使用，也會使創作的路上更是崎嶇難行。

據此，我們可以知道公眾領域這一個區域非常重要，它是一塊滿載各種可自由使用素材使創意無限的地方，因此，到底哪些作品或材料是屬於這一區域也就有明確界定清楚的必要性，更應該完善建立完整的公眾領域架構，對於這部分，我們應該以可行的工具和政策方式來建構並豐富這個屬於全人類資產的地方。

首先，針對工具的部分，創用CC 目前對此提供兩種工具可以幫助界定公眾領域的內的作品減輕大眾侵權的風險。第一種是 CC0 （或稱「公眾領域貢獻宣告」），此一工具是針對尚在著作權保護期間的著作，而著作權人主動欲拋棄著作權所給予的所有保護，希望將自己的作品置入公眾領域供大眾自由且無任何障礙運用時所可以使用的一種工具，使的大眾的利用不會受到各國著作權法或是資料庫法的拘束。而此一工具的實際運用案例中，BioMed Central (BMC) 是一個已開放進用為其理念的獨立線上出版社，現在亦採用要求他們的文章數據以 CC0 的標誌放置於公眾領域區域內的政策 ；Europeana 則帶領了推動世界性的數位文化遺產 (digital cultural heritage)，其模式被美國數位公共圖書館所採用，且其組織亦成為開放進用的領導者，於 2012 年時，Europeana對於開放進用此一運動更是釋出了兩千萬筆的元數據 (metadata) 以 CC0（公眾領域貢獻宣告）的方式使之進入公眾領域供大眾自由使用之。
(https://www.openfoundry.org/images/140311/cc-zero.jpg)
CC0 Public Domain Dedication (https://creativecommons.org/publicdomain/zero/1.0/)

第二種工具則是公眾領域標章 (Public Domain Mark)，所謂的公眾領域標章是針對已經罹於著作權保護時效的作品，為幫助明確標示其已屬於公眾領域所發展出的一種工具。此一方式使的那些不再受到保護的作品能以簡易的方式標明，以便大眾能夠輕易辨識出。
(https://www.openfoundry.org/images/140311/publicdomain.jpg)
Public Domain Mark (https://creativecommons.org/publicdomain/mark/1.0/)

而對此一標章的運用，Europeana 給了我們一個非常好的例示，先前提到他們使用 CC0 在文化著作的元數據上，同時，他們也運用了公眾領域標章來標示出在他們的數位收藏中因為著作權保護期間已明顯屆至而屬於公眾領域的作品。以這樣的方式，能夠有效幫助利用人過濾出哪類的作品因不再受著作權的限制而能為自由的使用。
(https://www.openfoundry.org/images/140311/europeana_use_pdm-700x400.jpg)
圖片來源：Okänd, Okänd (http://europeana.eu/portal/record/91622/raa_kmb_16001000219424.html?start=3&query=public+domain+mark&startPage=1&rows=12)

再者，除了有了可以運用的工具外，同時也應該有適當的政策推行方能達到好的效果。當前，有一個國際性的協會— "Communia" 致力於公眾領域的部分，他們的衷旨在於「促進、強化並豐富公眾領域」。Communia 協會制定出一份公眾領域宣言，並且提出了 14 項政策上的建議，他們認為應該透過公共政策上的改變以及社會運動來支持公眾領域，而其所提出的建議內容則包括了全面減低著作權保護期間、運用易於辨別公眾領域作品的方法以及強調認為公眾領域作品的數位重製品亦應屬於公眾領域的範疇等等 ，對於該等建議亦值得我國參考之。此外，有關於公部門訊息 (PSI) 的部分，於最近在歐盟的協商會議中，創用CC 提出建議認為不應該附加任何條件於公部門訊息的再利用上面，而最好的方式即是直接將公部門訊息置入於公眾領域內，創用CC 並指出可藉由修改各國國內得著作權法使之排除於著作權法規範之外而不受著作權之保護，至於若修改著作權法有困難者，則可運用前述所提及之公眾領域貢獻宣告 (CC0) 此一工具，將置放於公眾領域內以確保無限制的再利用行為 。

在美國也可以觀察到其政府對於公眾領域的重視，美國聯邦機構決定了將如何來支持總統對於使大眾進用聯邦政府資助所獲得的研究成果和數據資料的行政指令，而白宮本身也指出了應該如何來實踐有關開放資料的行政指令。事實上，任何使用政府金錢所產生的資料應該要明確的標示為公眾領域的內容較適當。

對於公眾領域的政策應該要有所改變，以更積極的方式來推動我國一同建構此一領域，而上述目前其他國家或國際性組織的建議及政策等即為我國可參考並思考是否引入或推行的方向。

公眾領域並非單一個人、團體甚至一個國家的責任而已，此一領域屬於全球人類所共享，任何人都有運用其領域內素材的機會、情況和需求，我們應該共同致力於協助建構並豐富它的內容。除了運用各種工具來擴增公眾領域的內容，也需要有政策改變以及著作權改革的加入，方能真真正正建立出有豐富內容的公眾領域。 [註]

[註] 參考資料：

BioMed Central moves to CC BY 4.0 along with CC0 for data. (https://creativecommons.org/weblog/entry/41329)

Europeana celebrates 5 years and 30 million. (http://blog.europeana.eu/2013/11/europeana-celebrates-5-years-and-30-million-objects/)

Policy Recommendations. (http://www.communia-association.org/recommendations-2/)

Copyright Week: Tools and policies for building and defending a robust public domain, Timothy Vollmer, January 14th, 2014. (http://creativecommons.org/weblog/entry/41688)
_______________________________________________________________

□ 關於本報 □__________________________________________________

◎ 主編︰洪華超
◎ 法律專欄編輯︰葛冬梅
◎ 執行編輯︰陳蕙蓁
◎ 外稿編譯︰林誠夏、黃郁文、謝良奇

本電子報自行採訪、報導、編譯、撰寫文章之智慧財產權屬於中央研究院，採用創用CC「姓名標示－禁止改作－非商業性」授權條款臺灣 3.0 版授權散布，歡迎在不變更內容的前提下，以任何形式重製與散布本報，但必須遵守下列義務︰(1) 不得為商業目的之利用；(2) 必須標明本電子報智慧財產權屬於中央研究院；(3) 完整引用本著作權說明。

若欲以創用CC「姓名標示－禁止改作－非商業性」授權條款臺灣 3.0 版以外的方式利用上述文章，請與自由軟體鑄造場編輯群(ossfepaper at openfoundry.org) 聯絡。

非自由軟體鑄造場自行撰寫的單篇文章，其智慧財產權利屬於原作者所有，其以非專屬的方式授權予自由軟體鑄造場運用，而與本電子報其他文章併以創用 CC「姓名標示－禁止改作－非商業性」授權條款臺灣 3.0 版的方式進行散布。

若欲以創用CC「姓名標示－禁止改作－非商業性」授權條款臺灣 3.0 版以外的方式利用個別作者的文章，請自行與該作者聯繫，或透過自由軟體鑄造場編輯群 (ossfepaper at openfoundry.org) 來轉發聯絡訊息。

授權條款全文請見︰
http://creativecommons.org/licenses/by-sa/3.0/tw/legalcode
授權條款簡介請見︰
http://creativecommons.org/licenses/by-sa/3.0/tw/deed.zh_TW

若欲訂閱本電子報，請至以下網址︰
http://www.openfoundry.org/tw/news

如欲取消訂閱這份電子報，可透過自由軟體鑄造場新聞首頁左上方之自動退訂機制︰
http://www.openfoundry.org/tw/news

或寄發電子郵件至︰ossfepaper@openfoundry.org，以進行人工退訂。