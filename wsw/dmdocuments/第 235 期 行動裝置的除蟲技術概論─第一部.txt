________________________________________________________________

□■□ 自由軟體鑄造場電子報第 235 期 | 2014/01/28 □■□
________________________________________________________________

◎ 本期主題︰行動裝置的除蟲技術概論─第一部 
◎ 訂閱網址︰http://www.openfoundry.org/tw/news/
◎ 下次發報時間︰2014/02/25

□ 本期標題 □__________________________________________________

■ [技術專欄] 行動裝置的除蟲技術概論─第一部

■ [法律專欄] GPL 與常見授權條款相容性淺析

■ [自由專欄] 五種開源迷思

■ [源碼新聞] 在家自學或補充孩童教育的開放源碼

■ [源碼新聞] 見證開源專案的永續發展 - 奠基 MeeGo 的智慧型手機 Jolla 上市囉！

■ [源碼新聞] 開源圖存 - 搶救 Winamp 大作戰！

■ [源碼新聞] Bithub 透過 Bitcoin 來實質嘉惠開放源碼專案的貢獻者！

■ [源碼新聞] Google 加入 OIN 成為正式會員–共建自由開源軟體專利防護圈

■ [源碼新聞] Apache 基金會與 Linux 基金會攜手舉辦 ApacheCon

■ [源碼新聞] 2014 年二月份社群活動列表

□ 本期內容 □__________________________________________________

■ [技術專欄] 行動裝置的除蟲技術概論─第一部

張准榕／編譯 

◎本文翻譯自 DZone，原作者為 Raymond Camden：http://css.dzone.com/users/cfjedimaster

當你需要對行動裝置的網頁（或透過 PhoneGap 製作混合的應用程式）進行除蟲有時候是相當痛苦的。除非你是完美的（如果是，你不需要存在，你為什麼需要閱讀這篇文章？），否則在你得到對的方法之前，你將需要反覆透過許多不一樣的建立方式。在這邊文章中，我將著重於一些可行的選項去幫助開發者針對他們的行動裝置上之網頁應用程式除蟲。


Safari遠端除蟲

第一個選項，我們來看看是專門針對 iOS 設備但仍然可以用於一般除蟲的方式。在 iOS6 中，Apple 介紹了一個新的功能叫做 Safari 遠端除蟲機制 (Safari Remote Debugging)。這允許你在 iOS 裝置上（包含 iPhones 和 iPads）利用 Safari 瀏覽器針對網頁應用程式除蟲。這也包含了使用 PhoneGap 所建立的應用程式。不幸的是，這選項僅適用於使用 Mac OS X 的夥伴們。

為了使用這特性，你的 iOS 裝置必須實體的連結到你的筆記型電腦。接著你第一次使用時必須在裝置上開啟它。開啟「設定 (Settings)」，開啟 Safari，接著點選進階 (Advance) 功能。下方為 iOS7 裝置的截圖。

(https://www.openfoundry.org/images/140128/PhoneGap/image001.jpg)

簡單地開啟網頁檢查員 (Web Inspector)，而這裝置就準備好進行遠端除蟲了。在進行下一步之前，開啟你的 Safari 並瀏覽網頁。

接著，開啟你的 Safari。如果你沒有看到開發 (Develop) 選單，請確認你的 Safari 選項。選擇進階 (Advanced) 頁籤，並開啟它。

(https://www.openfoundry.org/images/140128/PhoneGap/image002.jpg)

在開發選單中你將會看到一個新的菜單選項，它會根據你 iOS 裝置來命名。注意如果你連結了多個裝置，你將會全部看到。同樣地如果你連結了 iOS 模擬器，選單中也會包含它。

(https://www.openfoundry.org/images/140128/PhoneGap/image003.jpg)

當你的滑鼠移動到這裝置名稱時，你將會看到 Safari 上顯示的網頁之名字，或者如果你開啟了多個頁籤，將會顯示一串 URLs 列表。

(https://www.openfoundry.org/images/140128/PhoneGap/image004.jpg)

選擇該 URL 及 Safari，你將會開啟一組開發者工具。

(https://www.openfoundry.org/images/140128/PhoneGap/image005.jpg)

現在你將有能力透過電腦直接互動你行動裝置中的 Safari。如果你主要是使用 Chrome 的使用者，這選單項目可能不會這麼的明顯。在下一個版本的 Safari 將會改善開發者工具的使用者介面，你將會發現有一些不一樣。

從左到右看起，這些操作的圖示如下：

(https://www.openfoundry.org/images/140128/PhoneGap/image006.jpg) 資源 (Resources)：這提供了大致相同於 Chrome的 開發者工具中的元件頁面 (Elements panel)

(https://www.openfoundry.org/images/140128/PhoneGap/image007.jpg) 儲存裝置 (Storage)：這類似於 Chrome 的開發者工具中的資源頁面 (Resource panel)。請注意不同於 Chrome 的開發者工具，網頁檢查員只支援了 cookies 和網頁 SQL 資料庫。本機端的存儲裝置將不會出現在這使用者介面中。然而，你可以利用控制台 (console) 來檢查這些數值。

(https://www.openfoundry.org/images/140128/PhoneGap/image008.jpg) 儀表 (Instrument)：這包含了排版或 Javacript 的資料之網路回應時間。這相對應 Chrome 的則是網路 (Network)，時間軸 (Timeline) 和簡介 (Profile) 頁面。

(https://www.openfoundry.org/images/140128/PhoneGap/image009.jpg) 搜尋 (Search)：允許你在現在的回應資料中橫向搜尋所有資料─包含了 HTML，Javascript 和 CSS 的原始碼。

(https://www.openfoundry.org/images/140128/PhoneGap/image010.jpg) 問題 (Issue)：為當下回應資料中所發現的問題之報表。你可以在 Chrome 的控制台找到類似的資訊，但這種集中管理的瀏覽方式相當地方便。

(https://www.openfoundry.org/images/140128/PhoneGap/image011.jpg) 除蟲 (Debug)：Safari 的 JavaScript 的除蟲工具。

(https://www.openfoundry.org/images/140128/PhoneGap/image012.jpg) 中斷點 (Breakpoint)：你可以在任何地方設定且瀏覽斷點資料。

最後是控制台(Console)

讓我們來進一步檢閱一些我認為對你們除蟲時最有幫助的幾個頁籤。清楚地說，你應該要知道每個不同頁籤所具有的功能，但在此文章中我們將會針對部分較重要的來說明。


控制台

希望你對控制台已經相當熟悉。在桌上型電腦中這是個你可以找到錯誤並隨意執行程式碼的地方。對於行動裝置的網站，它更為實用。在下面的截圖中你可以看到在控制台報告裡顯示了一個簡單的 JavaScript 錯誤。

(https://www.openfoundry.org/images/140128/PhoneGap/image013.jpg)

如果之前所說的，你也可以在此處運行程式碼。這對於手動觸發事件或是檢查變數相當方便。

這裡有一個簡單的例子。我使用了控制台去確認 navigtor.userAgent 的變數值並使他跳出訊息。注意到它是觸發於裝置上（這此狀況中模擬器也是一樣）。

(https://www.openfoundry.org/images/140128/PhoneGap/image014.jpg)

(https://www.openfoundry.org/images/140128/PhoneGap/image006.jpg) 資源

資源的頁籤提供你對 DOM 的存取。當你在頁籤中選擇了某段程式碼，你將會即時的在裝置上看到明亮的區塊。

(https://www.openfoundry.org/images/140128/PhoneGap/image015.jpg)

更進一步你可以即時的在裝置上編輯 HTML 程式碼。雙擊型態標示為 h1 的文字讓我們可以編輯並修改它。

(https://www.openfoundry.org/images/140128/PhoneGap/image016.jpg)

選擇右上角的圖示你可以存取該標籤的節點和樣式屬性。在樣式屬性的菜單中你可以修改它的設計方式。這對於行動裝置相當的有用。在下面的例子中我增加了一個顏色，但你可以利用修改頁邊 (margin)、填充 (padding) 和尺寸的數值來替你的網站增加視覺效果。

(https://www.openfoundry.org/images/140128/PhoneGap/image017.jpg)

(https://www.openfoundry.org/images/140128/PhoneGap/image018.jpg) 儀表

在儀表的頁籤中，網路請求的狀況將可能會是你第一個有用的工具。在複雜的 Ajax-based 應用程式，追蹤跟監視網路地請求的狀況是難以置信地有用。

第一個你應該要知道的是網路請求失敗。舉例來說 404s 的訊息將不會顯示於此。取而代之地他們只會顯示在控制台頁籤。桌上型的 Chrome 將會在網路頁籤及控制台上都顯示出失敗的網路請求。

讓我們來看個簡單的例子。我執行了一個簡單的 Ajax 請求。請注意到它與其他請求（CSS、JavaScript......等等）是如何顯示於網路頁籤的。

(https://www.openfoundry.org/images/140128/PhoneGap/image019.jpg)

注意到被選擇列的箭頭了嗎？點選它將會載入該請求的原生資料 (raw result)。

(https://www.openfoundry.org/images/140128/PhoneGap/image020.jpg)

請務必檢查儀表板的其他部分，對於呈現區域和 JavaScript 事件將相當的有幫助。

(https://www.openfoundry.org/images/140128/PhoneGap/image021.jpg) 除蟲者

最後一個我們來看的是除蟲者 (debugger)。這涉及到網路監視員的幾個不一樣的部分。第一，在資源頁籤中我可以從我的應用程式中選擇一個 JavaScript 檔案。

(https://www.openfoundry.org/images/140128/PhoneGap/image022.jpg)

接著我可以簡單地透過點選某行的方式去增加斷點。如下圖我在第 7 行執行了斷點。

(https://www.openfoundry.org/images/140128/PhoneGap/image023.jpg)

現在當我在裝置上執行它，它將會暫停執行並讓你一步一步的執行。

(https://www.openfoundry.org/images/140128/PhoneGap/image024.jpg)


Chrome 的遠端除蟲

在本文的下一個部分，我們將專注於 Chrome 的遠端除蟲工具 (Chrome Remote Debugging)。你可能會猜，這將會是專注於 Android 裝置和 Chrome 瀏覽器。有一點很重要的是你記得在制式的 Android 瀏覽器和 Android 的 Chrome 瀏覽器間有一個差別。桌上型電腦的 Chrome 所提供的除蟲工具支援了行動裝置上的 Chrome。這可能很明顯的但不要忘記了。大約六個月前有一份報告，制式的 Android 瀏覽器比 Android 的 Chrome 花費大於十倍以上的時間！儘管如此，你還是可以使用 Chrome 遠端除蟲工具。

在一開始，你需要替 Chrome 安裝 ADB 擴充元件 (https://chrome.google.com/webstore/detail/dpngiggdglpdnjdoaefidgiigpemgage) 。這擴充元件在你的 Chrome 瀏覽器的右上角新增了一個圖標。

(https://www.openfoundry.org/images/140128/PhoneGap/image025.jpg)

在這例子中，我已經連結了 Android 裝置。（補充說明，不同於 iOS 遠端除蟲工具，你不能在此功能中使用 Android 模擬器）。點選它，並展開其選項：

(https://www.openfoundry.org/images/140128/PhoneGap/image026.jpg)

「開始 ADB」及「結束 ADB」選項參照於除蟲服務的狀況，並且只要它已經開始運作，你只能停止它。「檢查監視目標 (View Inspection Target)」選項將會幫你列出所有已連線的裝置。

接著，在你的 Android 裝置上開啟 Chrom，點選設定 (Settings)，再點選進階功能 (Advanced)、開發者工具 (Developer tools)，接著開啟 USB 網頁除蟲機制 (USB Web debugging)。

一旦你做完上述步驟，回到你的桌上型電腦，點選「檢查監視目標」。桌上版的 Chrome 將會告訴你一些在裝置上你所開啟的網頁資料。事實上，你如果開啟多個不同的頁籤，你可以在你的電腦鐘看到一串它們的列表。

(https://www.openfoundry.org/images/140128/PhoneGap/image027.jpg)

你可以看到每一個頁籤的一些選項。重新載入或是關閉恰巧會是你所想要的。在這裡有一個有趣的選項是「檢查 (Inspect)」。點選「檢查」的選項開啟一個類似於 Chrome 開發工具 (Chrome Dev Tools UI) 的新視窗。

(https://www.openfoundry.org/images/140128/PhoneGap/image028.jpg)

（你會問什麼是 ChemaDump 頁籤？實際上他是一個我替自己撰寫的擴充元件。Chrome 讓你自己替任何事情撰寫擴充元件，包含建構在開發者工具上的擴充元件。同樣的元件可以在我的桌上型電腦及 Android 上運作）

假設大部分的夥伴都已經相當熟悉 Chrome 了，我們並不會逐一去看這些頁籤。如果不是，你可以先免費地閱讀這個開發工具 DevTools course on CodeSchool (https://www.codeschool.com/courses/discover-devtools)。如你所想像，控制台是已連結的裝置。在桌上型電腦執行一個命令將會執行在行動裝置上。

(https://www.openfoundry.org/images/140128/PhoneGap/image029.jpg)

同樣地，類似於 Safari 除蟲者，你可以在元件頁籤 (Elements panel) 中選擇 DOM 元件，並可以及時地在裝置上更新。你也可以修改這些元件以便測試 CSS 修改狀況或是其他的改變。（請原諒我使用這樣的相機相片，但沒有辦法選擇 DOM 並同時呈現其在裝置上被標示及桌面的樣子）

(https://www.openfoundry.org/images/140128/PhoneGap/image030.jpg)

如你所想像，Chrome 的開發者工具對大多數的開發者而言非常地強大且熟悉。有了這些可行方案，讓您測試行動裝置將是非常有用的！


接下來呢？

在本文中我們著重於那個大男孩 (big boys) ─ iOS 和 Chrome 的遠端除蟲工具。當然也有其他行動裝置平台和其他你可以使用的工具。在下一個章節，我們將討論另外兩個工具─ Adobe's Edge Inspect 和 Weinre。


譯者簡介：
張准榕，Lilina Chang。畢業於中華大學資訊管理碩士。
目前任職於華晶科技研發部門，以 C++ 撰寫 PC 應用程式為主。過去曾經任職於漢民科技資訊部門，便以 PHP、MySQL 及 Javascript 開發網頁應 用程式。喜歡資訊科技及旅行，本持著資源共享及共同學習成長的原則與人交流。
_______________________________________________________________

■ [法律專欄] GPL 與常見授權條款相容性淺析

葛冬梅／文

GPL 是被廣泛採用的自由開源授權條款，不過由於 GPL 具有授權拘束性，衍生程式必須仍然適用相同條款授權（註一），所以在利用上會需要注意與之結合的程式碼授權內容是否相容，因為與之結合的程式碼一旦成為 GPL 衍生程式，就代表著在散布時必須要透過 GPL 條款來授權散布，若是其原本的授權內容與 GPL 不相容，會讓使用者無法同時符合兩份條款的義務規定，進而可能發生侵權利用的狀況。

因此本文將以 GPL-2.0 與 GPL-3.0 這兩份授權條款為中心，來說明目前常見授權條款是否與之相容，進而讓讀者了解哪些常見授權條款的程式碼可以與這兩份 GPL 條款的程式碼結合之後一起散布（註二）。

https://www.openfoundry.org/images/140128/licensecompatibility/lc_201401_img1.png
▲ 圖1：GPL 衍生程式結構示意圖。

【BSD 類程式碼大多可改採 GPL 授權散布】

BSD、MIT 與 Apache-2.0 這三份條款均屬於授權規定寬鬆的 BSD 類條款，但是由於各份條款的細部規定不同，因此僅 BSD、MIT 這兩份條款可以被相容於 GPL 條款中，改採 GPL 授權散布。

Aapche-2.0 的相容狀況則會因 GPL 是二、三版而有所不同。因為 Apache-2.0 規定有專利反制與額外的被授權人擔保責任條款（註三），這些規定並不完全相容於 GPL-2.0，因此自由軟體基金會 (Free Software Foundation, FSF)　在草擬 GPL-3.0 時，也將這兩個因素納入考量，增加了可以讓 Apache-2.0 可以被相容於 GPL-3.0 的機制：一方面 GPL-3.0 增加了類似 Apache-2.0 的專利抑制條款規定，另外一方面，在第 7 條的附加條款裡，則是增加了可相容 Apache-2.0 被授權人額外擔保責任的附加條款。因此 Apache-2.0 的程式碼雖然無法改採 GPL-2.0 授權，但是透過 GPL-3.0 新增訂的條款，則可以改採 GPL-3.0 來授權散布（註四）。

【預設機制讓 MPL-2.0 程式碼可以同時適用 GPL 來授權散布】

MPL 系列條款由 Mozilla 基金會 (Mozilla Foundation) 所制定，其規定 MPL 的衍生檔案仍然必須適用 MPL 繼續授權，因此同樣是一份具有授權拘束性的條款，與 GPL 原則上並無法結合相容在同一個專案中。不過為了讓 MPL 可以與 GPL、LGPL 等條款相容，Mozilla 基金會在授權機制上做了調整，弱化 MPL-2.0 原本的授權拘束性。2012 年所發布的最新版 MPL-2.0，即是透過條款中的預設機制，讓 MPL-2.0 程式碼在與 GPL-2.0、LGPL-2.1 以及 AGPL-3.0 程式碼結合成為新程式散布時，該新程式可以額外地適用這三份條款來散布授權，這讓 MPL-2.0 程式碼可以額外地透過 GPL 來散布，而散布新程式的使用者除了必須遵守 GPL 的規定之外，還必須遵守 MPL-2.0 義務規定來散布原 MPL-2.0 程式碼。此外，不只這三份特定版本的條授權款適用 MPL-2.0 的這個預設機制，這三份條款之後的新版授權條款也同樣適用，因為未來若 FSF 發布 GPL-4.0 等更新版本條款，MPL-2.0 程式碼一樣有機會可以改採 GPL-4.0 授權。而 GPL-2.0、LGPL-2.1、AGPL-3.0以及這些條款的其後版本被統稱為「備位條款 (Secondary License)」）。不過程式的著作權人可以選擇排除 MPL-2.0 的這項預設機制，其只要在程式中附加一份 'Exhibit B - “Incompatible With Secondary Licenses” Notice' 的聲明，使用者就不能將 MPL-2.0 程式碼與備位條款程式碼結合散布，此時，MPL-2.0 程式碼也自然不能與 GPL 程式碼相結合來一起散布（註五）。

這樣的備位條款機制與雙重授權 (dual licesnsing) 看上去很相似，但是兩者略有不同：雙重授權是一個程式透過兩份不同的條款來授權，任何一位使用者都可以從中選擇適合的一份條款，來作為利用或再次散布該程式的授權條款，使用者沒有義務要同時遵守兩份條款的義務規定，但是讓 MPL-2.0 程式碼與備位條款程式碼結合成為新程式的使用者，其在散布這個新程式的時候，必須同時遵守兩份條款的義務規定，並沒有選擇的餘地，只有當這樣的新程式被散布到後手使用者的時候，後手才有權利可以選擇是否要將 MPL-2.0 的授權聲明從程式或檔案中排除，讓該檔案僅適用備用條款來授權散布。

另外要注意的是，即使有這樣的預設機制，這也僅讓 MPL-2.0 與備用條款可以相容於同一個更大型的專案程式中，由於「個別 MPL-2.0 檔」然仍然具有授權拘束性，無法與備位條款授權的程式碼相容並存在同一個檔案中，因此 MPL-2.0 程式碼的使用者，仍然不能將備用條款授權的程式碼寫入 MPL-2.0 檔案中，只有當後手使用者取得這個已經結合 MPL-2.0 與備位條款授權的專案時，這位後手因為有權利可以將 MPL-2.0 授權條款從新程式的檔案中排除，所以其可以開始將備位條款授權的程式碼寫入到最初適用 MPL-2.0 授權的檔案中。

【EPL-1.0 與 GPL 條款彼此互不相容】

EPL-1.0 也是具有授權拘束性的授權條款，原程式碼本身以及衍生程式均必須適用 EPL-1.0 授權，因此 EPL-1.0 程式碼無法改適用 GPL 授權。此外，由於沒有 MPL-2.0 的特別相容預設機制，所以也無法與 GPL 程式碼結合在同一個開發專案中相容並存。雖然 EPL-1.0 規定非衍生的獨立模組可以採用非 EPL-1.0 的條款授權（註六），不過當獨立模組採用 GPL 授權的時候，GPL 的授權拘束性仍然有很大的機率會擴散到其他 EPL-1.0 程式碼上，進而產生授權衝突。因此 EPL-1.0 與 GPL 條款間彼此互不相容。 

【互不相容的 GPL-2.0 與 GPL-3.0 透過「及其後版本」機制來單向相容】

這兩份條款同為 GPL 系列的授權條款，因為兩者皆具有強烈的授權拘束性，規定衍生程式僅可以採用原條款授權，因此當 GPL-2.0 與 GPL-3.0 程式碼被結合或連結 (link & merge) 在一個大型專案中的時候，依照這兩份條款的規定，這個專案同時成為 GPL-2.0 程式與 GPL-3.0 程式的衍生程式，此時就產生的授權衝突的狀況。不過若是一個程式所採用的授權方式為「GPL-2.0 及其後版本 ("GPL version 2 or later versions", GPL-2.0+)」的話，表示開發者或權利人從一開始就允許使用者可以在後續的修改或散布過程中，將該程式改為授權內容不同、但是版本號更新的 GPL 版本來授權散布，此時，GPL-2.0+ 的程式碼就可以例外地與 GPL-3.0 程式碼結合在同一個專案中，然後採用 GPL-3.0 來散布整個專案。而透過「及其後版本」的授權機制，任何一個版本 GPL 授權的程式碼，都可以與更新版本的 GPL 程式碼相容在同一個專案中，然後採用更新版本 GPL 來一起授權散布（註一）。

https://www.openfoundry.org/images/140128/licensecompatibility/lc_201401_img2.png
▲ 圖2：Drupal-7.26 在 "COPYRIGHT.TXT" 純文字檔中宣告採用 GPL-2.0+ 模式授權。

【LGPL-2.1 程式碼可以單向改適用 GPL 來授權】

LGPL-2.1 是特別適用於函式庫的授權條款，與 GPL 一樣，也是為了達到四大自由所制定出來的，因此兩者本質相同，都具有授權拘束性，不過為了配合函式庫需要被廣泛利用的本質，所以 LGPL-2.1 的授權拘束性較 GPL 來得弱一些，使得 LGPL-2.1 函式庫在未被修改、直接呼叫利用的情況下，也可以無法提供源碼的軟體來加以利用。不過即使如此，由於 LGPL-2.1 與 GPL 均規定僅可以採用自身條款來授權衍生程式，所以原則上這兩份條款無法存在於同一個程式中。但是對於自由軟體 (Free Software) 理念者來說，因為 GPL 是更為貼近四大自由理念所制定出來的條款，因此在制定 LGPL-2.1 時加入了單向改採 GPL 的規定，讓使用者可以自由選擇是否要將 LGPL-2.1 函式庫改採 GPL 來授權，而一旦使用者決定之後，未來便不能再次更改回來，因此這個授權條款的改變是單向、不可逆轉的（註七）。

至於使用者所可以改採的 GPL 版本，依照 LGPL-2.1 的文意與 FSF 基金會的解釋內容來看，可以選擇 GPL-2.0 之後任何一個版本來改授權 LGPL-2.1 函式庫，包括 GPL-3.0 在內，也就是可以將 LGPL-2.1 條款直接改為採用 GPL-3.0 來授權（註八）。不過筆者以為這樣的文意解釋可能會在實際運用上產生問題，因為 GPL-3.0 與 LGPL-2.1 規定內容並不完全相同，例如 GPL-3.0 有明示的專利授權條款，LGPL-2.1 卻沒有明確的專利授權文字，由於專利授權在一般實務上均以明示的書面授權為準，因此在 LGPL-2.1 沒有明確授權文字的狀況下，一般的程式開發者或權利人極有可能是以「沒有將專利技術授權出去」的認知來為其函式庫採用 LGPL-2.1 授權，若是後續使用者將這樣的 LGPL-2.1 函式庫改為 GPL-3.0 授權散布的話，就與原開發者或權利人的意思相悖，因此筆者不完全認同 FSF 的見解。不過若是一個函式庫是採用 LGPL-2.1 及其後版本授權的話 (LGPL-2.1+)，由於開發者或權利人已經事先預見、並允許函式庫未來可以改採更新、但授權條件不同的條款來授權，因此使用者將 LGPL-2.1+ 函式庫直接改採用授權內容不完全相同的 GPL-3.0 來授權，可以算是在其可預知的範圍之內，因此是相對來說是比較不會產生糾紛的情況。所以筆者以為，在利用到僅標示 LGPL-2.1 授權的函式庫時，建議使用者先與原開發者或權利人取得聯絡、確認其原意之後，再決定是否改採用 GPL-3.0 或者更新的版本來授權，是比較不容易引發紛爭的作法。

【LGPL-3.0 程式碼可以單向改適用 GPL-3.0 】

LGP-3.0 跟 LGPL-2.1 一樣，有著讓使用者可以單向改變程式碼適用授權條款的規定，不過這部份規定的彈性範圍在 LGPL-3.0 較少，因為在沒有修改、單純散布 LGPL-3.0 函式庫的情況下，使用者並不能更改原函式庫的授權條款，只有在修改了函式庫的情況下，使用者才有權利主動為函式庫改適用 GPL-3.0 來授權。此外，使用者僅可以改適用 GPL-3.0 此一特定版本授權條款，而不能選擇其他版本的 GPL，因此即使未來 FSF 制訂了 GPL-4.0 或更新版本的 GPL，使用者也不能為 LGPL-3.0 程式碼直接改適用 GPL-4.0 或其後更新版本的來授權。
此外，LGPL-3.0 還規定了一個強制將 LGPL-2.1 函式庫轉換成為 GPL-3.0 授權的狀況：若使用者修改 LGPL-3.0 函式庫，使得修改後的函式庫受制於另外一個應用程式而無法正常運作的話，那麼這個修改後的 LGPL-3.0 函式庫就必須強制改適用 GPL-3.0 來授權。例如：使用者利用 LGPL-3.0 函式庫 F 來開發軟體 G，為了配合 G 的運作，使用者也對 F 進行了修改，成為函式庫 F'，而 F' 的正常運作必須依靠 G 所傳送的特殊指令，在缺少 G 的情況下 F' 大部份有意義的功能均無法運作，這樣的修改讓 LGPL-3.0 函式庫有機會受制於封閉源碼的應用程式，讓原本預設可以被他人持續自由利用的 LGPL-3.0 函式庫 F' 無法被自由利用，因此除非使用者修改 F' 與 G 間的互動方式，讓 F' 可以在沒有 G 的情況下仍然可以有意義的運作，否則依照 LGPL-3.0 的規定，函式庫 F' 必須強制改採用 GPL-3.0 來授權散布。這個強制轉換規定的意義在於，由於 G 有很高的機率會被認定為 GPL-3.0 函式庫的衍生程式，進而必須在散布時將 G 程式源碼一並提供給後手使用者，為了避免這樣的事情發生，使用者在修改函式庫時，就會避免採用那些會讓 LGPL-3.0 函式庫受制於封閉源碼程式的技術方法，進而維持 LGPL-3.0 函式庫的自由開放特性（註九）。

【AGPL-3.0 與 GPL-3.0 可相容共存於一個專案中】

AGPL-3.0 是修改自 GPL-3.0 而來的授權條款，其目的也同樣是在實踐四大自由的理念，只是 AGPL-3.0 強化了授權拘束性相關的規定，其修改後的衍生程式不僅仍然要繼續適用 AGPL-3.0 授權，當使用者透過網路提供衍生程式的應用服務時，也必須要將程式源碼也提供給予服務客戶。這樣的規定將網路提供程式服務的行為與散布程式的行為等化，造成都會啟動提供程式源碼義務的效果，擴張了授權拘束性的實際影響力。

由於 AGPL-3.0 與 GPL-3.0 都具有授權拘束性，因此原則上彼此是無法結合相容在同一個專案中的。不過這兩份條款的制定者 FSF 在草擬過程中，就考慮到了條款相容性的問題，所以分別在這兩份條款的第 13 條規定有額外的相容機制：當 AGPL-3.0 程式與 GPL-3.0 程式結合成為一個專案時，彼此仍然保持適用各自的授權條款，不會互相干擾，但是當整個專案透過網路提供應用服務的話，提供服務的使用者就必須依照 AGPL-3.0 的規定，將整體專案的程式源碼也提供給予應用服務客戶，此時，專案中原 GPL-3.0 授權部份的程式源碼，也因此必須要提供出來。透過這樣的機制，AGPL-3.0 與 GPL-3.0 兩份條款授權的程式碼因此相容在一個專案中，互不干擾。 

【結語】

本文嘗試在單一文章中，分析常見自由開源授權條款與 GPL 的相容性，條款數量雖然不多，不過由於這些條款內容規定不同，因此細部分析狀況仍然頗為複雜，也可能有部份的組合狀況是本文沒有考慮到的，不過筆者期望透過本文，可以協助有需要的讀者初步了解這些授權條款之間的相容性，並且在討論上起拋磚引玉的效果。

----

註一：關於 GPL 授權拘束性的進一步說明，以及關於衍生程式範圍的說明，請參閱：林誠夏，GPL 條款對於衍生程式的判定標準與其授權拘束性的擴散範圍（上），http://www.openfoundry.org/tw/legal-column-list/8446-the-license-inheritance-bounds-of-gnu-gpl-01；林誠夏，GPL 條款對於衍生程式的判定標準與其授權拘束性的擴散範圍（下），http://www.openfoundry.org/tw/legal-column-list/8447-the-license-inheritance-bounds-of-gnu-gpl-02。

註二：本文以 "GPL"　來兼指 GPL-2.0 與 GPL-3.0 這兩個版本的 GPL 授權條款。

註三：關於專利反制條款與後面所提及的專利抑制條款，相關說明請參閱：葛冬梅，條文解析自由開源軟體的專利授權條款，http://www.openfoundry.org/tw/legal-column-list/8447-the-license-inheritance-bounds-of-gnu-gpl-02。而這邊所謂「額外的被授權人擔保責任」，是指 Apache-2.0 第 9 條後半段的內容，其規定使用者在散布程式的同時，可以自行提供擔保或保證給予取得程式的後手，但是必須自行承擔該擔保或保證的責任，而在這些擔保或保證內容造成其他程式開發者或使用者被告或有所損失的狀況下，該位使用者必須要為其他開發者與使用者辯護與賠償其損失，相關說明請參見：葛冬梅，自由開源軟體預設的不附隨保證與擔保特性，http://www.openfoundry.org/tw/legal-column-list/9146-accompanied-character-of-foss-no-warranty-and-limitation-of-liability-。

註四：單從授權條款的規定來看，Apache-2.0 是否可以被相容於 GPL-2.0，是個有討論空間的議題，因此 Apache Software Foundation (ASF) 對於這個議題的看法其實是傾向於，Apache-2.0 可以被相容於 GPL-2.0 中，所以 ASF 雖然接受 FSF 對於 Apache-2.0 與 GPL-2.0 相容性的見解，但是並不完全認同其理由與背後的理念，這樣的觀點可以從 ASF 的官方聲明中可以看得出來，請參見右列網頁聲明第 5 段文字：http://www.apache.org/licenses/GPL-compatibility.html。

註五：相關規定請見 MPL-2.0 的第 1.5、1.12、2.4、3.3 與 10.4 條內容。詳細的條款說明請參 Mozilla Foundation 的頁面：http://www.mozilla.org/MPL/2.0/combining-mpl-and-gpl.html。

註六：相關規定請見 EPL-1.0 的第 3 條。

註七：LGPL 對於四大自由的實踐程度較低，相關的說明內容與制定理由請參見 LGPL-2.1 前言的說明。而關於單向轉換的規定，請見 LGPL-2.1 第 3 條。

註八：FSF 這樣的觀點可以從其對於 LGPL-2.1 的評註內容，以及對於所有 GNU 授權條款彼此相容性的分析清楚看得出來。FSF 對 LGPL-2.1 的評註請見：http://www.gnu.org/licenses/license-list.html#LGPLv2.1；而其對於所有 GNU 授權條款相容性分析的內容請見：http://www.gnu.org/licenses/gpl-faq.html#AllCompatibility。

註九：LGPL-3.0 與 GPL-3.0 的相容跟轉換相關的規定請見 LGPL-3.0 第 2 條。而關於 LGPL-3.0 的進一步介紹，請參閱：林誠夏，更為彈性中庸的 LGPL-3.0，http://www.openfoundry.org/tw/legal-column-list/1166--lgpl3。
_______________________________________________________________

■ [自由專欄] 五種開源迷思

謝良奇／編譯

◎本文翻譯自 Federal Times，原作者為 Brian Paget：
http://www.federaltimes.com/article/20131215/ADOP06/312150005/Viewpoint-5-open-source-myths

政府機構採行開放源碼多年來，廠商、平台、工具和技術的景況已經有了大幅擴展。用一隻手遍數主要開源選項（Red Hat Linux、MySQL Oracle、Apache 網路伺服器等）的日子已經過去，市場上充斥著來自技術公認廠商與新秀供應者的數十種解決方案。

在來自各方關於每套開源解決方案優劣處的訊息轟炸之下，開源採用漸增的同時，伴隨而來的，是更多的困惑。如何從現實中過濾出迷思，是對政府機構決策者的一項挑戰。當這些機構移往開源專案並評估新解決方案時，普遍存在著五種迷思，值得加以思考。

＊要把你的程式碼開源，就有人會免費幫你工作
把程式碼加以開源的聯邦機構，通常會有一種期待：只要打造好環境，就有人會來，免費幫忙做事。開放源碼也許會吸引到一些人，但是不會有成千上萬的人排隊，準備要貢獻所有公開的開源專案。即使是 Apache Hadoop，這個可以說是最熱門的開源專案，去年也只吸引不到 50 位貢獻者。

＊傳統軟體廠商會不惜一切避免開放源碼
有些人認為因為害怕開放源碼會吸乾產品交付、服務和支援的營收，現今的軟體廠商會保護他們的私有軟體領域。事實是，創新的現有軟體廠商踴躍地靠向開放源碼。Adobe、Google、Amazon 等公司，以開放專案創造出可觀的營收。這些公司之所以擁抱開放源碼，是因為不斷重複建構作業系統、資料庫、網路伺服器等系統的基本元件，越來越不合時宜。最成功的開源專案反映出，軟體創新正向堆疊上方移動的自然發展。同時，元件的標準化與大量商品化推動他們走向開放源碼。

＊開源專案加速創新速度
有個普遍存在的迷思是，當專案開源之後，機構就可以為創新解決方案縮短上市時間。的確，開放源碼透過把軟體許多基本組成單元自由化、公開化，讓更大的社群無需重複開發即可運用這些基礎，因而促進創新。不過，這些元件的成功有賴於不會隨時間急劇變動的穩定核心功能集，這一點也是事實。因此，在核心元件上的創新腳步，事實上比傳統軟體要來的緩慢。

＊開源軟體會自動幫你省錢
商業軟體的前期成本一般會高於免費下載的開源專案。然而，整體 IT 轉型的成本，大部分是落在實現機構轉型的相關人事費用上。這些人事成本是會變動的，或高或低主要是受到實現轉型所利用的工具影響。因此，最好的工具加上最優秀的人才，才能最終按時在預算內達成最棒的專案。

＊開源專案品質不高
開源專案的狀況與涉及其他類型軟體的技術專案沒有什麼不同。有些專案品質很高，有些很低，很多則處於中間。開源軟體在許多情況下是絕佳選項，然而和其他技術一樣，機構必須在個別案例的基礎上研究各種選項，了解是誰在貢獻開源專案，貢獻者的背景，專案的活躍程度如何，以及多少人將這套專案運用到企業規模上。
_______________________________________________________________

■ [源碼新聞] 在家自學或補充孩童教育的開放源碼

謝良奇／編譯

◎本文翻譯自 opensource.com，原作者為 Carolyn Fox：
http://opensource.com/education/13/12/open-source-tools-homeschooling

在去年開始在家自學之前，我一直不知道我有多麼依賴開放源碼及公共圖書館。當我開始為 Opensource.com 寫稿時，我的小孩還在學校。他差不多 8 歲，不過他已經上過公立與私立學校，並且在上特殊需求與資優課程。因此，這個教育光譜的兩邊我都待過。身為一名圖書館員、前任教師、在家自學母親，我很熟悉正規學校以及在家自學和開源資源（課程、工具等）各自能提供些什麼。

學校提供的，以及開放源碼對在家自學者所能提供的，兩者之間的差距，已使得在家自學越來越蔚為風潮。 即使在中國，像我小孩一樣的資優孩童也逐漸開始在家接受教育，或在家補充其公立或私立教育的不足。家長對於教育環境的不滿，在美國教育部最近一項調查中，如今已成為在家自學的主要原因。對於課程以及學院教育的不滿仍居高不下。

在美國，各州都擁有各自的法律、政策框架，以及公立學校和在家自學者的有關教育標準。各州共同核心標準 (Common Core State Standards，CCSS) 正是要解決此一問題，並提供更為一致性的國家標準。然而，這些標準仍舊以決策者和其他人認為必要的內容知識與學術技能為基礎。但是，正如 Ian Stewart 所指出，他們很少顧及最新的研究或發展，像是最近 20 年內的數學。更重要的是，公立學校標準與課程是依照一般水準而訂定：針對的是假想中處於特定實足年齡和年級，且具典型心智的孩童。資優與雙重特殊學生 (twice exceptional，2e) 提倡者一般認為，CCSS 不足以激勵或滿足這些學生的需要。

在任何既有的公立學校系統中，校長、教師或其他學校職員會為學生選擇課堂使用的課程教材。多年來，傳統課程出版者像是 Pearson 或 McGraw-Hill，提供公立學校印刷教科書和視聽教材。這些教科書由老師提供給學生，之後學生基本上是以這些教科書與其中內容進行學習，儘管教師或許會補充其他教材。同樣的，這些教科書是基於一般需要而定：假想中處於特定實足年齡且具典型心智的孩童，在學校特定年級所應該學習的。

針對在家自學者有關課程需要，甚至是使用公立學校資源的政策與法律彼此之間差異頗大。只有少數的州，例如明尼蘇達州，有法律明定在家自學者有合法權利借用教科書。在大多數的州，這是個灰色地帶。在許多州，像是麻薩諸塞州，公立學校在法律上並無義務出借教科書給在家自學者，雖然學區或許會允許在家自學者，根據要求與書面許可進行借用。能不足為奇的是，傳統課程出版者與其他公司包括 Microsoft，正積極地向逐漸增加的自學者家庭，以及希望補充孩子公立學校教育的家長們進行推銷。可以肯定的是，從傳統教科書到課程與今天的各種軟體程式，教育用品是一塊很大的市場。這些教育用品的價格落差很大：從免費或便宜，到數百或數千美元不等。這些價格可能迅速地飆升。不過，除非這些教育用品和標準公立學校課程與教材有大幅差異，不然依舊是針對假想中處於特定實足年齡且具典型心智的孩童，在學校特定年級所應學習的內容而設計。

透過使用開放源碼，在家自學或希望補足公立學校教育的家庭，可以翻轉或擴充此一學習模式，且不至於在過程中耗盡家產。這些家庭可以建立個人化學習環境 (PLE)。他們可以用部落格、維基 (wiki)、網站等工具，記錄孩子的學習。他們可以分享學習方法、資訊，或透過 Mahara 建立電子學習檔案 (ePortfolios)。他們可以問問題、對照筆記、尋求建議。他們可以尋找並使用教材，數量多寡隨自己喜歡。孩子可以按照自己的速度與步調進步。像 Library of Books, Links, & More 這類網站，因為協助許多像我一樣的人，並無私且公開地，分享他們的知識與教育歷程，值得大力稱讚與關注。

相比之下，身處公立學校的孩子，通常在學習與知識取得上面臨限制。許多學校對於教科書有明文規定，像是一個學生能向圖書館借幾本書，以及網際網路使用等。通常，印刷教科書出借給學生要符合特定準則。一般情況下，公立學校根本無法取得印刷教材。例如說，微積分教科書通常不會放在小學裡。公立高中也是一樣，根本無法複製大學通常能夠提供的課程深度與廣度。無法取得超過公立學校能提供範疇之外的課程或教材，會使學生感到挫折。舉例來說，社會學，雖然是公立高中的選修科目，但是通常必須有教授此教材的老師，以及學生有教科書或教材可用，才會提供這門課程。沒有了這些，學生只能自認倒霉。

共同核心標準雖然並未阻礙學生縮短修業年限，不過這個問題可能變得特別棘手，尤其是數學。學區通常會依照年齡、課堂表現，又或者加上測驗，決定數學編班 (math placement)。不過，數學編班的政策各州差別很大。有些州在 5、6 年級結束時測驗，其他州不測驗，但是要求學生申請許可，並根據某些其他標準展示其學科掌握程度。有些州則直到初中或高中才做決定或提供先修數學編班。

在公立學校外，有一些國家計劃，如資優教育中心 (Center for Talented Youth，CTY)，以標準化測驗為基礎，招收來自美國與全球的小學與初中學生。不過有多少公立學校或家長熟悉這個計劃，則還有待商榷。而且這個課程仍相當昂貴。但沒有高等數學習作，學生通常會被許多大學學位課程，與要求這類高等數學的未來職涯排除在外。

當我的孩子 5 歲，還在學前班時，他在家線上收看 PBS Cyberchase 時，突然嘴裡蹦出 tesselate 這個字。當我驚訝到下巴合不攏時，他用他的積木示範給我看什麼是鑲嵌 (tesselate)。在我們當地的公立學校，鑲嵌的概念要到 5 年級才會教。於是我知道我有一個有數學天分的孩子，他在家裡接觸到高等數學概念並有能力加以理解。我不希望阻礙他對數學或對學習的熱情。因此我為了他及像他一樣的孩子，成為一名開放源碼／雙重特殊學生倡導者。我找到像 Library of Books, Links, & More 的網站，讓開放教育歷程變得不那麼困難和令人生畏。

有三個免費且開放的教材、支援、指引網站，專門給資優與特殊學生、家長、教師。雖然以美國為主，但有來自全世界的訪客：

＊Gifted Issues Discussion Forum (http://giftedissues.davidsongifted.org/BB/)
＊Hoagies' Gifted Education Page (http://www.hoagiesgifted.org/)
＊Gifted Homeschoolers Forum (http://giftedhomeschoolers.org/)
_______________________________________________________________

■ [源碼新聞] 見證開源專案的永續發展 - 奠基 MeeGo 的智慧型手機 Jolla 上市囉！

黃郁文／編譯

還記得 MeeGo 這個幾近與 Android 同期推出，之後卻為 Intel 與 Nokia 策略性中止的作業系統嗎？MeeGo 的設計概念是強化軟硬體之間的互動與效能，它的基礎框架並不似 Android 架有與 Linux Kernel 之間的互動中隔介面，也因此它的停止開發一度引發軟體社群成員的感嘆與扼腕，因為從技術應用的角度來看，MeeGo 相較於 Android，似乎是一個更尊崇開源精神與運作效能的研發模式。但其實，正因為 MeeGo 採自由開源授權的方式釋出，故其一部份的成果已經被匯入了 Tizen 這個新專案，並前進到車載 Linux 的系統研發上，而無獨有偶的，幾位不願放棄 MeeGo 的前 Nokia 員工，也共同創立 Jolla 這家公司，繼續開發 MeeGo，如果你曾經預購 Jolla 智慧型手機的話，現貨現在已經開始進行發送了！Jolla 共同創辦人 Marc Dillon 向 BBC 表示，MeeGo 手機已打造完成，並已與芬蘭電信商 DNA 達成販售協議，同時正與另一英國電信商洽談手機販售事宜，目前首批手機已於 2013 年底舖貨上市，而消費者也多了一個世界級的手機平台可供選擇。當前 Jolla 手機的販售模式先針對預購族群，將小規模的將首批手機郵遞到消費者手上。

Jolla 手機的作業系統為 Sailfish，此作業系統的前身即為 MeeGo，由於 MeeGo 採開源授權的方式運作，故原專案的官方團隊停止研發之後，具有開發技術的朋友，一樣可以依循其適用的授權模式，永續的就此開源專案進行研究與應用！而有鑑於當前行動裝置上，Android 系統所享有市佔率已高達 82%，故 Sailfish 的應用程式架構，除了 Sailfish 平台的原生程式外，還可兼容運行在 Android 平台上的其他應用程式，此舉預估將有助於 Jolla 在當前的情勢下另創新局、開疆闢土。在硬體規格方面，Jolla 手機配有 4.5 吋高品質的 In-Plane Switching (IPS) 觸控螢幕，可讓使用者順暢的進行多點觸控；中階的雙核心處理器，並可直接支援下一代的行動網絡 LTE 服務系統；16GB 的基礎內存容量，亦可支援 microSD 卡來擴充儲存空間；1GB 的預設記憶體，800 萬畫素的後置相機鏡頭，配置 LED 閃光燈，200 萬畫素的前置相機鏡頭；電池可更換，造型上並可視使用者的偏好來抽換彩色後蓋。

從開發思維來看，Jolla 可說是一個以用戶使用經驗為開發核心的作業系統，Jolla 手機在第一次開機後，會出現應用程式的設定精靈 (Start-up Wizard)，透過這樣的機制，讓使用者選擇真正所需的應用程式 (App)，而非直接預先下載系統預設的 App 給使用者，如此一來，系統只會更新確實被使用者利用的應用程式，而不會有不符使用需求的多餘預設。另外，Swipe 功能則進一步可讓使用者逕行跳過所有的 App，直接回到首頁；而 Peek 功能則可讓使用者在使用應用程式時，毋須離開該程式的顯示頁面，仍能同時查看社交網站的最新訊息；至於 Pull 功能則會秀出一連串選單，讓使用者快速啟動相機、或通話等功能。Jolla 也宣佈其所使用的 Sailfish 作業系統，將會直接搭載 Nokia 的線上 HERE 地圖，讓使用者可以利用該地圖集裡，現已有的 190 個國家地圖與在地資訊。同時，Jolla 亦已與第三方 Android 市集公司 Yandex.Store 簽約，該市集上目前約有超過 85,000 的智慧型系統應用程式，使用者可透過它下載免費支援的 App，或是直接線上付費下載收費型的 App，如此一來 Jolla 智慧型手機的用戶，就可不需要另行尋覓主流應用程式在 Android 系統上的個別安裝包，而可以透過 Yandex.Store 平台，來取得並安裝這些原生於 Android，卻可同時運作於 Sailfish 系統上的應用程式。

MeeGo 是在 2010 年由 Nokia 將其所主力開發的 Maemo Linux，與 Intel 合作的 Moblin 合併而形成，原本預設是用來取代 Symbian 作業系統，並大舉使用於 Nokia 之後製作的手機裝置上。但據許多評論家釋出的看法，MeeGo 平台的開發速度並不符合 Nokia 管理高層的期待，故於 2011 年 2 月 Nokia 與微軟的熱鬧結盟聲中，為 Windows Phone 所取代而劃下被 Nokia 擁抱的句點。不過，當時 Nokia 內部有許多員工，其實並不完全認同 Nokia 捨棄 MeeGo 系統的作法，認為該系統尚未得到表演舞台來大顯身手，而期望該系統能夠被持續研發，甚至不少的芬蘭國民，也表達希望能透過 Jolla 重返榮耀。再者，Microsoft 在 2013 年的秋天，正式收購了 Nokia 的裝置與服務事業部門，此次收購也連帶披露了 Nokia 前 CEO Stephen Elop 因而獲得的巨額紅利，此舉震驚芬蘭的人民，也挑起了部份芬蘭人的怒氣。故而 Jolla 的共同創辦人 Marc Dillon 也表示：雖然 Jolla 並無意藉此趁勢而起，但不可諱言因此發展，而得到更多芬蘭人對 Joola 手機的支持。而芬蘭國內大型的電信商 DNA 亦感受到這股強烈的國民情感，其消費事業部門副總 Pekka Vaisanen，日前已公開表示支持芬蘭自有商品的重要性，其亦相信 MeeGo 接續至 Sailfish 的研發潛能，故已與 Jolla 展開手機與電信方案配合銷售上的合作。

當前，Jolla 延續 MeeGo 基礎發展出來的手機生產線已蓄勢待發，其線上社群平台也得到許多支持者的奧援，部份資深的軟體社群參與者，也已開始積極開發相應的 App，並將其所開發的 App，上傳至 Jolla Harbour 這個開放並免費的應用程式發布入口平台上，好讓 Sailfish 作業系統配合 Jolla 手機，能帶給使用者更高品質的使用體驗。依據許多觀察者的評論來看，MeeGo 藉由 Sailfish 的重生是被寄予高度的期望的，其後續對於智慧型手機現時的戰國市場，將帶來如何的震憾效力與改變，開放平台的共工模式是否能脫穎而出佔得一席之地，或為一般消費者與使用者創造更優質的使用環境，且讓我們拭目以待。


參考網址：

1、Nokia 原 MeeGo 團隊轉出新創 Jolla 手機
http://www.eweek.com/mobile/jolla-smartphones-spun-off-by-nokias-meego-team-now-shipping.html

2、Jolla：前 Nokia 工作團隊啟動智慧型手機事業
http://www.bbc.co.uk/news/technology-25120727

3、Jolla 智慧手機將內置 HERE maps 服務及透過 Yandex.Store 軟體市集來提供應用程式
http://www.tuicool.com/articles/iQVFBb

4、5 套敢於與 Android 競爭的行動 Linux 作業系統
http://www.openfoundry.org/foss-news/8877

5、Tizen Linux 再進化！跨國車商將與科技研發公司共組車載 Linux 工作群組
http://www.openfoundry.org/tw/foss-news/8823-tizen-linux-linux-

6、Jolla Harbour 應用程式發布網址
https://harbour.jolla.com/
_______________________________________________________________

■ [源碼新聞] 開源圖存 - 搶救 Winamp 大作戰！

黃郁文／編譯

一場跨國際的拯救 Winamp 請願大作戰，去年年底正如火如荼的在網際網路上進行。

這場搶救音樂多媒體播放程式 Winamp 的請願活動，是肇因於開發 Winamp 的公司 AOL，宣佈將於 2013 年 12 月 20 日終止，對已問世 16 年的 Winamp 後續的開發支援，如此一來，不僅 Winamp 播放器本身將從此無法被下載，甚至其網站也將關門大吉。此消息一經發布，震驚了 Winamp 廣大的忠心愛用者，並因此激起搶救 Winamp 的請願活動，目前該請願活動已募集接近 50,000 位愛用者的連署。此項搶救活動是在 Change.org 平台上展開，由一位澳洲籍的網路開發者 Peter Zawacki 所發起，其呼籲 AOL 繼續支持 Winamp，復要求若 AOL 真的不願意持續開發 Winamp，或可將其轉售，或至少應將 Winamp 的程式源碼釋出，使其如同 Netscape Navigator 轉化為 Mozilla Firefox 一般，成為一個永續發展、眾人皆可加入維運與開發的自由開放源碼專案。

Zawacki 在請願頁面上寫道：Winamp 使用者遍及全球，並被廣泛用於網路廣播串流頻道，是有史以來最棒的音樂多媒體播放器，其許多的優點目前仍沒有其他軟體能出其右，亦無法完全被取代。Zawacki 更強調，數位音樂的時代肇始於 Winamp，若 AOL 能將 Winamp 開放源碼並對外釋出，則 Winamp 將會永遠與愛用者同在，故其呼籲 AOL 繼續支持 Winamp，不然亦應就此放手，以開放 Winamp 源碼的方式來嘉惠使用大眾！而相應於此，另外一個專題請願協力網站 ”Save Winamp”，則更是直接邀請願意參與後續開源版 Winamp 寫作的程式設計師能加入連署行列，希望藉此能夠說服 AOL 上層的 Nullsoft 公司，能順應眾人的期望釋出 Winamp 的程式源碼，從此之後將 Winamp 帶入永續發展、眾人皆可共工的開源大道。

目前的發展局勢是，據後續的新聞報導，此一跨國的拯救 Winamp 請願大作戰，確實發揮了相當的影響力，AOL 後續的處理方式是將 Winamp 及其網路電台服務 Shoutcast，出售給另一家願意接手的商業公司 Radionomy，而其原本的播放器下載網站，也還在持續維護的階段，並沒有如同之前聲明的，在 2013 年 12 月 20 日自動離線停止提供。但在 savewinamp.com 的頁面上，請願者仍然訴求希望未來能夠以開源的方式，參與 Winamp 專案的後續發展與協作，至於開源圖存此事是否能夠成真，便有賴接手 Winamp 的 Radionomy 公司，後續是否有相對應的前瞻視野與商業眼光了。


參考網址：

1、Winamp 愛用者懇請 AOL 能釋出程式源碼
http://arstechnica.com/information-technology/2013/11/winamp-lovers-beg-aol-to-open-source-code/

2、救救 Winamp、不然至少開放源碼來讓大家幫忙
http://www.theregister.co.uk/2013/11/26/petition_to_save_winamp/

3、Winamp 下載網址
http://www.winamp.com/media-player/download/en

4、搶救 Winamp 請願網址
http://savewinamp.com/
https://www.change.org/en-AU/petitions/save-winamp

5、AOL 將 Winamp 及網路電台服務 Shoutcast 出售給 Radionomy
http://techcrunch.com/2014/01/01/aol-sells-winamp-and-shoutcast-music-services-to-online-radio-aggregator-radionomy/
_______________________________________________________________

■ [源碼新聞] Bithub 透過 Bitcoin 來實質嘉惠開放源碼專案的貢獻者！

黃郁文／編譯

以隱私防護軟體販售聞名的軟體開發公司 WhisperSystems，宣布其正推出一個新的開源專案–Bithub (https://github.com/WhisperSystems/Bithub)。Bithub 是結合自由開放源碼管理網站 GitHub 來運作，再加上以比特幣 (Bitcoin) 為金流標的，在此三個元素的基礎上提供一項新服務，那就是自由開源軟體專案的開發者，將可以有一個簡單、公平，且公開的管道與機制來取得報酬，也就是說，經由 Bithub 提供的管道與機制，貢獻自由開放源碼軟體專案程式碼的開發者，將有機會可以在參與專案開發的同時，獲得辛勤付出的酬勞補償！

開發 Bithub 專案背後的團隊，主要就是 WhisperSystems 公司的成員 (https://whispersystems.org/)。WhisperSystems 是一家非常善用自由開源軟體開發模式來行銷與研發產品的公司，其所提供的眾多應用程式，皆是透過開放源碼套件庫與託管平台 (open-source repositories) 的途徑來進行散布，所以這些程式源碼都可以被大眾使用，同時應用程式相關的安全性也可透過這種方式，來被大眾驗證，而一般只需要基本功能的程式使用者，也不會因為使用 WhisperSystems 推出的應用程式，而需要支付高額的授權費用。該公司的產品多為協助使用者管理線上儲存空間、簡訊或通話加密應用程式，這些程式都可以在 Apple 及 Android 平台上被使用，例如 TextSecure 這個應用程式，可以取代行動裝置原本的簡訊服務，透過這個取代方案所發送的 SMS 簡訊，在收發訊息方面都會加密，經由這個方式，使用者的私密資訊將可進一步的被防護。此種強化通訊隱私安全的應用程式，在美國國家安全局自 2007 年起開始實施稜鏡ー電子監聽計畫 (NSA PRISM) 的監控新聞曝光後，更形重要。

而 WhisperSystems 的經營與開發團隊們，有感於傳統上自由開放源碼專案的研發資金來源，除了一些有名的大型專案，例如各大 Linux 作業系統 (Linux Distro) 等，會有基金會或大型商業公司在背後支持外，其餘中小型專案，在初創之時都必須透過各界零散的捐款來支援，以持續開發與成長茁壯，而對不同來源捐款之後如何妥善分配一事，一直都是讓開源專案管理者，費心思與傷腦筋的重責大任。而從過去的經驗出發，WhisperSystems 也曾在開發工作的追蹤與獎勵上碰到困難，很多時候的狀況是，哪位開發者在從事哪項軟體的開發是難以被清楚辨識的，以致有時有捐款是指定要提供給 TextSecure 專案的，該筆資金最後卻有可能被改配置給，另一個通話加密的應用程式 RedPhone，事後發現時資金已經難以追回，而為了解決這樣的落差與困境，Bithub 專案因應而生。

WhisperSystems 建置 Bithub 專案的作法是，先將透過 Bithub 捐贈的比特幣統合保管，之後若有開發者在 GitHub 平台上，對這些受 Bithub 管理的自由開源軟體專案做出貢獻，其遞交程式源碼的動作 (pull request) 將會被系統所自動紀錄，並依此讓 Bithub，將前述統合保管比特幣的一部份，依貢獻程度分配給該專案的開發者。目前 WhisperSystems 先在 Bithub 上試設定五個軟體套件庫 (repositories)，以依不同專案性質來紀錄與分析貢獻機制。這五個軟體套件庫分別是其旗下的 Android RedPhone、Android TextSecure、TextSecure Server、iOS TextSecure，以及 Bithub 本身！其實，Bithub 本身就是一個以自由開源軟體授權方式釋出的軟體專案，所以技術上一樣可以透過 Bithub，來紀錄與分析專案裡不同開發者的貢獻程度。而當前，Bithub 的分析架構，較適用於比特幣這種虛擬貨幣上，而要適用到傳統的貨幣分配上，仍然有其機制上的困難性，這是因為實體貨幣的金流交換，必須要透過跨國的金融機構來進行轉換，這是目前法規層面上較難簡易解決的地方。然而，據 WhisperSystems 的經營者表示：未來若有足夠之需求，WhisperSystems 當然會進一步，將 Bithub 這個群體集資、開源分配的機制，配置到傳統貨幣的交換系統上，以接續拓深此一專案的影響力。

Bithub 提供的嶄新服務，可以讓捐款在指定軟體專案裡獲得專款專用，而 WhisperSytems 也努力確保捐款流向具有透明性，捐款人將可以在 Bithub 上看到捐款是如何被配置與利用。可以說，Bithub 正是將自由開放源碼透明、易驗證的特性，轉化到群體集資與後續分配的模式上，未來如果能夠持續獲得自由開放源碼社群的認同，便可以協助自由開源軟體專案的資金，朝向更容易募集的道路，而好的自由開源軟體專案創意，也才能夠因為這些及時雨的滋潤，而更加源源不絕！


參考網址：

1、Bithub 用 Bitcoin 來支付酬勞給開放源碼的開發者
http://www.coindesk.com/Bithub-pays-open-source-developers-bitcoin/

2、將 Bitcoin 與 GitHub 結合起來運用、開源程式的貢獻者將可得到實質的金錢回報
http://www.wired.com/wiredenterprise/2013/12/Bithub/

3、Bithub 專案網址
http://Bithub.com/
_______________________________________________________________

■ [源碼新聞] Google 加入 OIN 成為正式會員–共建自由開源軟體專利防護圈

黃郁文、林誠夏／編譯

Open Invention Network (OIN) 是一個保護創新自由，並推動開源軟體被持續創作的合作企業 (collaborative enterprise)。它主要是透過專利收購，以及與各大開源社群、商用 Linux 企業，簽訂契約來建立專利互不侵犯的合作領域，以維護 Linux 生態系統 (ecosystem) 中投資者、販售者、開發者與使用者之間的良性循環，可以說，OIN 是從專利互不侵犯的角度出發，洽詢各方建立契約基礎的合作，以確保自由開源軟體的永續應用與發展。

軟體專利是當代任一家商業軟體或相關服務提供的公司都必須面對的課題。軟體專利每天都在世界各地持續增加，而惡質軟體專利所造成的訴訟賠償金額，在過去幾年更是在全球急遽的上升。任由這樣的現象發展下去，不僅扼殺創新，也限制了經營和創新的自由。因此，IBM、NEC、Novell、Philips、Red Hat 和 Sony，在 2005 年投資成立 OIN，以保護與 Linux 相關的商業經營與創新自由。而由於近年來 Google 主推的 Android 系統，搭配 Linux Kernel 的行動式應用比例漸高，故從 2012 年 8 月開始，OIN 亦應勢將其專利防護圈的保護範圍，拓深到 Android 核心系統以及 dalvik 上，而到 2013 年 12 月中，Google 正式與 OIN 完成合作契約的簽署與換約，成為繼上述 6 家公司之後，第 7 家支持 OIN 運作的正式會員！

OIN 的重點工作主要有：1、推動專利改革：與各國的行政部門、立法部門以及決策者合作，以限制惡質軟體專利對 Linux 和開源軟體的影響；2、建立專利互不侵犯社群，在這個社群裡，公司與組織均放下對 Linux 套件所各自擁有的軟體專利武器，在此「互不侵犯」的基礎上，建立起 Linux 商用環境的「專利禁航區 (non fly zone)」；3、藉由 Linux 防衛計畫防止惡質軟體專利，與 OIN 建立合作關係的全球工程師，會透過公開平台分享其軟體開發上的巧思與發明，並將這些資訊傳送給全球各地的專利審核機構，藉此防止惡質或劣質的軟體專利獲得專利核可。而不可諱言的，Google 與其相關的網路服務與行動裝置系統，近年已成應用上的主流，在 Google 宣示加盟 OIN 專利防護圈的此刻，對於 OIN 全球專利防護網的建置與完善，不啻打上了一劑令人鼓舞士氣的強心針，也讓許多憂心軟體專利惡化發展的觀察家，對此事寄予不小的厚望。

其實，Google 早在 2007 年時，就已經與 OIN 接洽過，並與 OIN 簽署了第一份的終端使用者授權協議 (end-user license)，成為其專利共享範圍的被授權人。而近年的發展，由於全球惡質專利訴訟的狀況愈趨嚴峻，Cisco、Twitter，這些傳統上並不被認為是核心 Linux 系統使用者的公司，或者 Dropbox 這類網路服務的新興公司，連帶韓國重要的智慧型家電品牌 LG，甚至國內重要的智慧型手機品牌商 HTC，以及具指標性地位的自由開源軟體社群開發者 PCMan–洪任諭醫師（就其 LXDE 桌面系統部份），都已經加入 OIN 成為其授權會員，以形塑全球共同的專利防護網。擔任 OIN CEO 的 Keith Bergelt 表示：Linux 可說是史上最具創新性的資訊平台，它被適用在智慧型裝置、網通裝置，以及電腦運算裝置裡，史無前例地大為降低這些領域裡研發與應用所需耗費的成本，Google 經過多年的觀察也切實的體認到這個事實，故將其與 OIN 的合作關係，由聯合會員 (Associate Member) 再次提升到正式會員 (Full Member) 的位置，此舉也展現了 Google 在 Linux 與開源領域裡的領導地位與貢獻指標。位居 Google 開源中心主任的 Chris DiBona 也表示：Linux 搭配開放源碼專案的應用已成為軟體產業的核心基礎，如何保護這個共享資源，對於 Google 本身、我們的使用者，以及未來網際網路的發展，都是需要被認真關注的重要議題。Google 很榮幸能夠在此議題上，與 OIN 合作以擔任這個新角色。

不過到目前為止，Google 也還沒有宣告其會將轄下擁有的所有 Linux 相關專利貢獻給 OIN。而在過去一年裡，Google 更是對外公告了一個「開放專利互不侵犯的許諾書 (Open Patent Non-Assertion Pledge)」，大意是只要其他的商業公司允諾不會對 Google 提出專利侵權的訴訟，那麼相應於此，Google 也不會對這些公司提出其他的專利侵權訴訟，在 2013 年的 8 月，Google 公告其轄下更多的專利技術，已被置於「互不侵犯許諾」的共享範圍裡，所以也有評論家認為，Google 加入 OIN 成為正式會員，也可以說是其貫徹互不侵犯許諾書的延伸作為，至於其未來在 OIN 正式會員的地位上，會不會有更多創造性的嶄新作為，則還有待後續的觀察。


參考網址：

1、Google 加入 OIN 成為正式會員以建立專利共享的防護圈
http://www.zdnet.com/google-joins-open-invention-network-patent-commons-as-a-full-member-7000024434/

2、OIN 歡迎 Google 成為其正式會員
http://www.openinventionnetwork.com/press_release12_18_13.php

3、Google 拓深其在開源界專利共享的參與和努力
http://news.cnet.com/8301-1023_3-57615971-93/google-deepens-involvement-in-open-source-patent-effort/

4、Google 未來在 OIN 扮演的新角色
http://google-opensource.blogspot.tw/2013/12/a-new-role-in-open-invention-network.html

5、Google 擴展其在開源領域的承諾、加入 OIN 成為正式會員
http://www.androidauthority.com/google-oin-open-source-325990/

6、OIN 低調努力，專利交互授權保障商用自由軟體的未來發展
http://www.openfoundry.org/tw/enterprise-application/2320-oin-

7、OIN 將專利保護傘擴展至 Android 核心元件！
http://www.openfoundry.org/foss-news/8793
_______________________________________________________________

■ [源碼新聞] Apache 基金會與 Linux 基金會攜手舉辦 ApacheCon

謝良奇／編譯

◎本文翻譯自 ZDNet，原作者為 Steven J. Vaughan-Nicols：
http://www.zdnet.com/apache-foundation-and-linux-foundation-join-forces-for-apachecon-7000025165/

Linux 基金會 (Linux Foundation) 除了致力於支持 Linux，對於協助其他團體推動開源專案，也出了不少的力。光是 2013 年，Linux 基金會就匯集了物聯網的 AllSeen Alliance、開源生物研究的 OpenBEL、幾乎囊括所有軟體定義網路 (Software-Defined Networking，SDN) 公司的 OpenDaylight、還有 KVM 與 Xen 虛擬化的開放虛擬聯盟 (Open Virtualization Alliance) 以及 Xen 專案。現在，Linux 基金會更與 Apache 軟體基金會 (Apache Software Foundation，ASF) 攜手推動與支援開源發展，共同舉辦今年的 ApacheCon。

邁入第 15 年的 ApacheCon，是一個 Apache 專案開發者的正式會議，主導了當前最熱門開放源碼專案的協同合作，其中包括 大數據分散式資料庫 Cassandra、基礎建設即服務雲端平台 CloudStack、開源旗艦大數據軟體 Hadoop，當然還有 Apache 網路伺服器。

在歷經 15 年之後，ASF 如今為何要跟 Linux 基金會聯手合作？

Linux 基金會執行董事 Jim Zemlin 在聲明中解釋，Linux 基金會致力於在活動中提供獨特的協作經驗。基金會的重點在於幫助社群，並且推動在今後幾年有利於此種開發形式的關係。透過與 ASF 以及其社群的合作，我們能夠在活動中運用我們的專業，幫助更多的開源專案與更廣泛生態系統。

Apache 認可 Linux 基金會的專業價值。ASF 執行副總裁同時也是 ApacheCon 北美 2014 主席的 Rich Bowen，在聲明中指出，Linux 基金會已經在全世界各地展現過，為各種開放源碼專案社群舉辦活動的專業能力。對於 ASF 與 ApacheCon 來說，這是很重要的一年，Linux 基金會的貢獻能夠協助我們為與會者擴大機會和經驗，是可喜的加分。

今年的 ApacheCon 將於 4 月 7-9 日，在美國科羅拉多州丹佛市舉行。 CloudStack 北美協作會議會在 4 月 9-11 日舉辦。兩個會議都已開始徵集稿件，將於 2 月 10 日結束徵稿。

ApacheCon 的早鳥註冊到 1 月 31 日截止，優惠價為 799 美元。之後直到 3 月 14 日止的標準票價為 1099 美元。

由 Citrix 所贊助的 CloudStack 北美協作會議，將舉辦一天的黑客松 (hackathons)，之後會有兩天的主題演說與會議議程。早鳥註冊到 3 月 14 日止，優惠價為 149 美元。之後標準票價為 199 美元。
_______________________________________________________________

■ [源碼新聞] 2014 年二月份社群活動列表

二月份的活動列表出爐囉！有興趣的朋友們請多多邀請您的朋友們一同前往參與！另外，由於活動列表出來的時間比較早，若後續有活動希望也能一起做宣傳的朋友們，記得來信告訴我們喔！信箱： ossfepaper@openfoundry.org 。


MozTW + Arch Linux Lab（每週一，2/3、2/10、2/17、2/24）
時間：19:30~22:00
地點：新竹市北區勝利路195號新橋 b3
活動資訊：https://etherpad.mozilla.org/moztw-lab-hc


TOSSUG BoF（每週二，2/4、2/11、2/18、2/25）
時間：18:00~21:00
地點：台北市中正區南昌路二段 200 號（Mix Coffee & Tea）
活動資訊：http://www.tossug.org/


MozTW Lab @ 基隆（每週三，2/5、2/12、2/19、2/26） 
時間：19:00~21:00
地點：基隆市仁愛區港西街 4 號 1 樓（1915 海洋咖啡館）
社群網址：https://groups.google.com/group/moztw-general


KSDG 高雄開發者社群 (Kaohsiung Software Developer Group) meetup（2/6）
時間：19:00~21:00
地點：高雄軟體園區 B 棟 708 室（高雄市前鎮區復興四路 2 號 7 樓之 5）
社群網址：https://www.facebook.com/groups/KSDGroup


Hacking Thursday（每週四，2/6、2/13、2/20、2/27）
時間：19:30~22:30
地點：台北市重慶南路一段 1 號 2 樓（MarketPlace）
活動資訊：http://www.hackingthursday.org/
 

MozTW Lab @ TP（每週五，2/7、2/14、2/21、2/28）
時間：19:00~23:00
地點：台北市中正區新生南路一段6號2樓（Thé6 6号茶）
活動資訊：https://groups.google.com/group/moztw-general
 

台中自由軟體愛好者固定聚會（雙週一，2/10、2/24）
時間：19:00~21:00
地點：台中市中港路二段 60-3 號（默契咖啡）
活動資訊：https://groups.google.com/forum/#!forum/taichung-foss-fans-meeting


Cocoaheads - Kaohsiung（2/13）
時間：19:00~21:00
地點：高雄市前鎮區復興四路 2 號 7 樓之 5（高雄軟體園區 B 棟 708 室）
社群網址：https://www.facebook.com/groups/cocoaheads.kaohsiung/
 

CTLUG (Central Taiwan Linux User Group) meetup（2/14）
時間:18:30~22:00
地點:台中市西區台灣大道二段 505 號（伯朗咖啡中港店）
活動資訊：https://ctlug.hackpad.com/


KSDG web course（2/15）
地點：高雄軟體園區 B 棟 708 室（高雄市前鎮區復興四路 2 號 7 樓之 5）
社群網址：https://www.facebook.com/groups/KSDGroup


WoFOSS 第 42 次聚會（2/19）
時間：19:30~22:00
地點：台北市松山區民生東路三段 140 巷 11 號（果子咖啡）
活動資訊：https://kktix.com/events/wofoss040-201401
_______________________________________________________________

□ 關於本報 □__________________________________________________

◎ 主編︰洪華超
◎ 法律專欄編輯︰葛冬梅
◎ 執行編輯︰陳蕙蓁
◎ 外稿編譯︰林誠夏、黃郁文、謝良奇

本電子報自行採訪、報導、編譯、撰寫文章之智慧財產權屬於中央研究院，採用創用CC「姓名標示－禁止改作－非商業性」授權條款臺灣 3.0 版授權散布，歡迎在不變更內容的前提下，以任何形式重製與散布本報，但必須遵守下列義務︰(1) 不得為商業目的之利用；(2) 必須標明本電子報智慧財產權屬於中央研究院；(3) 完整引用本著作權說明。

若欲以創用CC「姓名標示－禁止改作－非商業性」授權條款臺灣 3.0 版以外的方式利用上述文章，請與自由軟體鑄造場編輯群(ossfepaper at openfoundry.org) 聯絡。

非自由軟體鑄造場自行撰寫的單篇文章，其智慧財產權利屬於原作者所有，其以非專屬的方式授權予自由軟體鑄造場運用，而與本電子報其他文章併以創用 CC「姓名標示－禁止改作－非商業性」授權條款臺灣 3.0 版的方式進行散布。

若欲以創用CC「姓名標示－禁止改作－非商業性」授權條款臺灣 3.0 版以外的方式利用個別作者的文章，請自行與該作者聯繫，或透過自由軟體鑄造場編輯群 (ossfepaper at openfoundry.org) 來轉發聯絡訊息。

授權條款全文請見︰
http://creativecommons.org/licenses/by-sa/3.0/tw/legalcode
授權條款簡介請見︰
http://creativecommons.org/licenses/by-sa/3.0/tw/deed.zh_TW

若欲訂閱本電子報，請至以下網址︰
http://www.openfoundry.org/tw/news

如欲取消訂閱這份電子報，可透過自由軟體鑄造場新聞首頁左上方之自動退訂機制︰
http://www.openfoundry.org/tw/news

或寄發電子郵件至︰ossfepaper@openfoundry.org，以進行人工退訂。