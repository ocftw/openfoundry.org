________________________________________________________________

□■□ 自由軟體鑄造場電子報第 206 期 | 2012/10/23 □■□
________________________________________________________________

◎ 本期主題︰從開源軟體到開放資料－論 Open Database License v1.0
◎ 訂閱網址︰http://www.openfoundry.org/tw/news/
◎ 下次發報時間︰2012/11/13

□ 本期標題 □__________________________________________________

■ [法律專欄] 從開源軟體到開放資料－論 Open Database License v1.0

■ [源碼秘技] 《雪凡與好朋友們的 Ren'Py 遊戲引擎初學心得提示》第二回：基本觀念與前置作業！

■ [源碼秘技] Graphviz - 用指令來畫關係圖吧！

■ [自由專欄] 能力越強、責任越大

■ [源碼新聞] 新創公司對抗專利蟑螂的十要訣

■ [源碼新聞] ”FSF Respects Your Freedom” 硬體認證計畫

■ [源碼新聞] Open webOS 1.0 發佈

■ [源碼新聞] OSI 與 OSHWA 在認證標章相似性一事達成合作協議

■ [源碼新聞] PHPConf Taiwan 2012 現正熱烈報名中

■ [源碼新聞] SITCON 2013 學生計算機年會 - 議程徵稿啟事

■ [源碼新聞] Node Knockout 台灣黑客頌 2012，號召開發者連續奮戰 48 小時，共同挑戰世界舞台

■ [源碼新聞] Drupal 2012 高雄研討會：從網站開發到資料管理

■ [源碼新聞] 第一屆台灣開放街圖研討會即日起開始報名！

■ [源碼新聞] 2012 年十一月份社群活動列表
_______________________________________________________________


□ 本期內容 □__________________________________________________

■ [法律專欄] 從開源軟體到開放資料－論 Open Database License v1.0

林誠夏／文

近年來公眾授權的風潮，已經跨越地理疆界而被適用在不同的國家與文化圈；而其適用的對象，也不再侷限於軟體程式碼，而是跨足到其他的著作權客體，例如在文章、圖片、音樂、影像，與各種藝術領域裡被多元應用的創用CC (Creative Commons)，甚至，這樣的模式近年更被延伸至超越著作權的領域，而有開放資料 (Open Data) 方面的運動。這些改變與進展，足以證明民智已開，許多原本閉鎖於大型商業公司、政府機關組織裡的各式軟體與資料，透過公眾釋出的方式，讓群眾能夠以自主的方式進行加值與改作，可說是當代資訊科技的演進，帶給整體人類一同受惠的禮物。然而，各種公眾授權的方式，適用在不同的客體上，必然會有些不同的配置，本文即以現今較已為人熟知的自由開源軟體授權方式為引，透過其與新興 Open Data 授權方式的異同比較，帶讀者一窺 Open Data 授權模式的演變方向，以及新撰成文之 Open Database License v1.0 的重要內容。

【開放資料是讓不受權利保護的資料找到向公眾授予的方法】

若從本質的地方來討論自由開源軟體授權與開放資料授予之間的不同，其實就是前者的客體受到著作權法的保護，而後者若是單純的資料集 (data set)，則並不受到著作權法與其他法律的保護。這是因為受到著作權保護的客體，它必須要是人類創意的表現、以及人類精神的創作，而若是 data set 本身，僅是勞務性質的素材 (Sweat of Brow)，則便不能受到著作權法的保護。所以說，開源軟體，是讓本來就受到著作權法保護的客體，找到向公眾授權的方式，因為著作權法的預設是「權利人保留所有權利 (All Rights Reserved)」，若未經自由開源軟體授權條款的預告授權，則即使眼見他人程式碼的寫作內容，那也是無法引用。所以扼要地說，自由開源軟體授權模式其實是一種「加法」的思維，也就是說原本受到著作權保護的程式碼，是不能任意為他人所使用、修改，以及重製、散布的，然而「加上額外的授權規範與條件」，就可以在符合特定條件的狀況下為他人所使用。

與這個概念相對，純粹的 data set 本身是不受到權利保護的，所以理論上這些 data set 一經散布，則任何人都可以不受限制地使用它來進行衍生創作。但是，從現實面來說，資料本身或許是不被法律所保護的客體，但是資料是否能夠被合法散布，有時也會涉及其他權利的保護，例如個人的隱私權保護、商業營利秘密的保護等等。所以簡要地說，開放資料授予模式可說是一種「減法」的思維，也就是說 data set 本身其實並不受到法律的保護，故一經散布之後就可以自由流傳讓人自行利用，然而一個合法適宜的 data set 散布行為，還必須預先「減去那不利於其他合法權利保護的因素」，例如減去隱私權、營業秘密保護，以及國防機密保護等等不利因素後留下來的，才是能夠被傳散出去的 data set，而能被收受資料之人所持續使用。

然而，在加法思維的著作權授權與減法思維的 data set 授予之間，其實還存有一個介於兩者之間模糊地帶的客體。那就是被歐洲議會與歐盟理事會以第 96-9-EC 號指令（Directive 96/9/EC，註一）」的方式，來加以保護的資料庫 (database)。一般來說，所謂的 database 亦為許多資料整理之後呈現的 data set，或者是說，由許多 data set 經整理與分類之後編輯而成的巨型 data set，那麼除了量的差異之外，database 與純粹的 data set 之間也有質的差異，許多 database 是在編排方式與編輯理絡上具有創作性，並且也可能可以被其他電腦程式直接讀取與寫入，此時它便被注入了編輯者的創作精神，而不再被認定為單純資料匯集的 data set，此種類型的 database，就受到歐盟第 96-9-EC 號指令的保護，而升格成為受到權利保護的客體。而這樣的 database 保護機制，雖然並沒有直接列示於我國的智慧財產權相關法律，但依照許多的司法判決，是比附援引著作權法上編輯著作的方式來加以保護（註二）。所以說，當 data set 因創作選編的過程，在質與量一併提升之後，就可能從原本的減法思維改為加法思維，一躍而成為受到權利保護的 database。不過，需要特別注意的是，即使個別的 database 升格受到法令的保護，這是因為選編與資料存取架構上的創意而受到保護，若是使用者單單為引據而抽取其中一段 data 來進行呈現的話，多數論者認為，此一經抽取出來的 data set，仍然應適用減法思維，而不受到權利的保護。

【Open Data 授予模式的一般通則】

從資料量來說，當前各式資料最大的持有者是各國的政府機關以及相關的法人組織，這是因為各國政府在維運一個國家經濟、賦稅、教育、文化、醫療保健各個層面時，必然會經常性地進行相關資料的收集，而這些資料的調查與收集，也是花費人民稅金所完成的，所以理論上也最具有被開放的正當性與公益性，而成為目前討論 Open Data 模式的指標範圍。因為這樣的原因，目前評論 Open Data，也多直接以公開政府資料 (Open Government Data) 為最初起手處，所以關於 Open Data 授予模式的一般通則，在綜合觀察美國 data.gov 網站的管理政策、英國政府的 Open Government License 之後，大抵來說有以下幾項原則：

1、單純的 data set 無償授予，經整理過後的 database 與相關工具才需付費取得；

2、與一般公眾生活息息相關的 data set 與 database 無償授予，應優先開放，並且毋須經額外的書面申請程序；

3、Data 的授予與公開不能與國家其他法律產生牴觸，例如國家安全、國防機密、個人隱私、人身保護，與其他相關合法權利之保護；

4、不負擔保之責，資料提供者僅就提供資料的正確性負責，其他衍生的誤用、錯用，或是判斷分析過程中產生的錯誤，均不得歸咎於提供者；

5、禁止在未經事前書面同意的情形下，引用政府機關或權責機構的名義為釋出 data 的衍生資料與作品進行背書。

上述的幾個要點，我們也可以套用加法思維與減法思維的方式來理解。首先從加法思維出發，經整理過的 database 與相關工具應可能具有著作權法上編輯著作的適格，或是受到歐盟 96-9-EC 號指令的保護，所以這種類型的 database，較有立場可以加上傳統收費的方式為其授權的條件，然而若是相關資料的需求者眾，甚至一般民眾大多有這樣的需求，則應與其他未經再加工的 data set，一併改適用減法思維，也就是說，只要這些 data set 與 database 的釋出，能夠減去妨礙或危害人民其他合法權利的疑慮，則便應該盡量以開放的態度進行釋出。而進一步來說，如果這些 data 與 database 的釋出，是以免付費無償取得的方式為基礎，則當然釋出者除了最基本的資料正確性之外，毋須負擔其他的衍生責任，並且也正因為這是一個無償取得，故 data 與 database 的利用者，也不能在未經提供者書面同意的情形下，就錯引提供者的名義，為這些 data 與 database 的衍生物進行廣告與背書。

而從這些要點來看，各國政府確實已經逐步地往開放政府資料的路子來走，並一步步釋出手上掌有的各類政府資料，不過，從 Open Data 的發展面向來看，相關資料的釋出僅為發展的第一步，後續這些資料可否被融通與再創造，才是 Open Data 日後能否蓬勃發展的關鍵。因為所謂的公眾授權模式，其特徵表現在公眾授權的素材，能夠廣泛且不受限地向一般使用者進行傳散，但是，僅僅散布是不夠的，後續還必須佐以讓素材能被使用者進一步融通與再創造 (reuse and remix) 的機制，才能真正結合參與者的力量，藉由吸納群體創意與共工合作的方式，將這些公眾授權出來的素材發展的更臻完美。所以說，目前各國政府與相關機構就 data 與 database 的釋出，僅為發展 Open Data 的第一步，關於資料與資料間、資料與衍生物之間，如何進行下一步的融通與再利用，則多並未被著墨與規劃，所以，本文接下來將要介紹的 Open Database License v1.0，可說便是 Open Data 的推行組織與發展社群，先行著眼到這個狀況，而預先開始擬定的改善機制。

【Open Database License v1.0 的授權特性與要點】

Open Databse License v1.0（ODbL-1.0，註三）是 Open Knowledge Foundation 旗下專案－Open Data Commons 所編撰出來的授權條款，Open Data Commons 專案的建置目的，主要是提供一些法律授權方面的工具與解決方案，來協助全球 Open Data 的參與者，能透過這些工具與方案做好 Open Data 的應用與推廣，以在世界各地創造更好的資訊社會以及人權社會環境。所以 ODbL-1.0 的規範內容，主要是涉及二個部份的處理，第一個部份是 data set 與 database 裡受到權利保護的客體，例如著作權、著作鄰接權，以及受到 database 特別法令保護的素材；第二部份則是不具權利適格的相關 data，不論這些客體受到法律保護與否，ODbL-1.0 預設了一個調和機制，並在契約自由的基礎上，去明訂釋出物的使用規則，也就是說，在 data set 與 database 裡，原本受到法律保護的部份，ODbL-1.0 透過契約自由的機制，另訂規則讓使用者可以使用它，而不至受到法律預設「權利人保留所有權利」的拘束；而原本不受到法律保護的部份，ODbL-1.0 一併透過契約自由的機制，加訂規則讓使用者了解到，即使這些素材原本並不受到法律的保護，然而透過 ODbL-1.0 這份條款，使用人得以下載整份 data set 與 database 的前提條件就是，他同意遵守 ODbL-1.0 述明的各項規則，所以即使個別的 data 拆開來看並不受到法律保護，但 ODbL-1.0 這份條款的內容，對於下載者一樣具有契約上的拘束力。

那麼就授權特性來說明，將 ODbL-1.0 拆開來看，它具有下列幾項與一般開放政府資料的方式相較，較為不同的要點：

1、採 ODbL-1.0 與 DbCL-1.0（Database Contents License，註四）分工的方式，建構一個完整的釋出模式：ODbL-1.0 主要是處理 data set 與 database 相關的釋出與使用規則，但有時 database 裡也會內含其他個別受到著作權保護的其他客體，例如數位昆蟲圖鑑資料庫這樣的 database，裡面或許就會內嵌許多昆蟲的拍攝圖片，這些圖片本身就是受到著作權保護的客體，而可以另外使用 DbCL-1.0 來進行授權。也就是說，這樣的設計讓 data set 與 database 的授權規則，能夠與內含著作權素材的授權規則，在實務上做脫勾處理，會較具有應用上的彈性。DbCL-1.0 預設的是高度寬鬆的授權模式 (permissive license)，使用者得以後續使用、修改，與散布這些受到著作權保護的素材，只要保留原來的授權規則，以及原作者的顯名聲明即可，而若是使用者認為這樣的授權方式對素材的保護不夠完善，亦可自行以其他授權模式抽換掉預設的 DbCL-1.0，像是以創用CC 的授權模式，或是自行創設的授權方式來取代 DbCL-1.0，例如在數位昆蟲資料庫裡：以 ODbL-1.0 來釋出 data set 與 database，併以「創用CC-姓名標示-非商業性-禁止改作」的方式來釋出其中的昆蟲圖片；或是以 ODbL-1.0 來釋出 data set 與 database，而另外以免費下載僅供個人欣賞的方式 (freeware license) 來釋出其中的昆蟲圖片，這兩種方式都是可以的。

2、ODbL-1.0 內嵌 Copyleft 授權特性，以近似「創用CC-姓名標示-相同方式分享」的方式運作：Copyleft 意指授權人要求，使用者重製原作或就原作產出衍生作品後，亦必須採用相同的授權方式進行日後的散布行為（註五）。這樣的授權規則，大體來說能夠讓公眾授權的專案具有一個不斷向後延伸發展的擴散性，所以為許多自由開源軟體專案，或是知名的共同創作專案所採用，例如 GNU Project 下許多的軟體專案、Linux Kernel，以及自由的百科全書-維基百科，都是此類型的著名專案。那麼 ODbL-1.0 有鑑於 data 與 database 在公眾參與向後吸納後，必定會使資料量日漸龐大，故參照過往的經驗，選擇這一類 Copyleft 的運作模式，以讓資料不論經過多少人的添加、改寫，或散布之後，其整體的授權狀態仍然是合一而不會產生分歧的。

3、ODbL-1.0 含括了違規終止條款、自動升級條款，以及一般政府機構的授權條件裡，尚未出現的授權循環條款：由於 ODbL-1.0 要創造的是，讓 data set 與 database，能透過參與者的不斷修改與更新，而被接續加值、再利用，與擴散的生態環境 (ecosystem)，這樣的授權模式與目前一般政府機構所主導的方式是有若干的不同。首先是違規終止條款，此項機制是複製並改寫自 GPL-3.0 授權條款，以對違約侵權的使用者做出失權的制裁；然後，ODbL-1.0 也是一個預設能夠由使用者作主向後升級授權版本的條款，此項機制是複製並改寫自創用CC 3.0 之後的版本，創用CC 在 3.0 之後，採用「相同方式分享」授權元素的素材，將可以讓使用者自行改用更新的條款版本來使用與散布，例如原本以「創用CC-姓名標示-相同方式分享 3.0」方式得到作品 A 的使用者，在世上出現創用CC 4.0 版本的時候，將可改用「創用CC-姓名標示-相同方式分享 4.0」的方式，來散布這個作品 A 及其衍生物，ODbL-1.0 也學習了這個更新機制；最後，ODbL-1.0 也設置了諸多自由開源軟體授權條款都會有的「授權循環機制 (license relay mechanism)」，所謂授權循環機制，指的是當該 data set 與 database 前手散布者，因為違約侵權使用而罹於失權之時，此一前手的失權狀態將不會影響到善意從其手上得到 data set 與 database 的後手，這樣的機制預先被寫在 ODbL-1.0 的條款內容裡，以確保不會因為個別使用者的違約與侵權，就造成 data set 與 database 循環散布與授權鏈的瓦解。

【幾項對於 Open Database License v1.0 常見的實用問答】

除了以上的特性與要點說明外，本文也透過實用問答 FAQ 的方式，協助讀者用最淺顯直接的方式，來了解 ODbL-1.0 的授權內容。

FAQ-1、將 ODbL-1.0 授權的 database 整合自己擁有權利的 database，並開放 API (application program interface) 以遠端或雲端互動的方式分享給他人使用，可否商業化收錢？需要遵守什麼？又這樣的作法，會不會被要求必須進一步主動提供這些以 ODbL-1.0 授權的 data set 與 database 呢？

首先，ODbL-1.0 授權釋出的 data 與 database，是可以拿來做商業化利用並且收費的，前提是這個商業行為，也必須要遵守 ODbL-1.0 預先設立的規則，而首要的規則，就是必須善盡標示義務，這規定在 ODbL-1.0 第 4.3 條的地方，所以只要商業服務的架設者，在該服務的授權聲明上，清楚標註：「本服務內含 ODbL-1.0 授權方式釋出之資料及資料庫，其資料庫名稱為何，其資料庫下載連結或是說明頁面為何，以及授權條款全文能夠在哪一個附加檔案，或是網路連結頁面參閱到。」以上，就完成了基本的標示義務。而關於這樣的作法，會不會讓以 ODbL-1.0 database 架設服務的使用者，必須主動以 ODbL-1.0 的方式提供這些 database 呢？這其實也是不必然需要的。相關的規定與描述在 ODbL-1.0 第 4.2 與 4.6 條的地方，其規定「公開傳遞 (Publicly Convey)」與「公開揭露 (Publicly Use)」這兩種狀態，使用者必須要能夠以 ODbL-1.0 的方式提供 ODbL-1.0 授權的 database 及其衍生物，然而、條款裡的「公開傳遞」與「公開使用」皆是以首字大寫的方式，來表彰其為專門定義的名詞，而在條款的定義裡，並非單單「使用」就必須要提供整包 database 及相關的data set，而是指涉及著作權法規範的深度使用狀態時 (distributing, copying, publicly performing, publicly displaying)，才需要進一步的提供整包的 database，以及服務架設者對該 database 做了哪些更改的相關資訊。

FAQ-2、承前，其他授權狀態的 database 與 ODbL-1.0 授權之 database 的結合運作，會不會影響到彼此日後的授權方式？

原則上，這要看這些 database 之間是用什麼樣的方式在結合運作的。如果 ODbL-1.0 授權的 database，與其他授權方式的 database，是兩個彼此獨立分工的 database，這種狀況符合 ODbL-1.0 條款裡對於「集合資料庫 (Collective Database)」的定義範圍，此時 ODbL-1.0 授權的 database 並不會去影響其他 database 的授權應用，因兩者僅是集合於同一個系統平台上供程式呼叫之用，雖有集合的外觀，但功能是分立而獨立的，故應用上僅有原 ODbL-1.0 授權的 database，需要遵守 ODbL-1.0 相關的授權規則；但是，倘若 ODbL-1.0 授權的 database，是與其他授權狀態的 database 融合為一個統一的 database，那麼這就該當 ODbL-1.0 下「衍生資料庫 (Derivative Database)」的定義範圍，此時 ODbL-1.0 內嵌的 Copyleft 特性便會啟動，並擴散使得整個衍生的 database，都必須一體遵守 ODbL-1.0 相關的授權規則。

FAQ-3、將 ODbL-1.0 授權的 database 與其他授權狀態的 database 進行整合，並燒成光碟片出售給客戶使用，這樣的使用方式是否被容許？又需要遵守什麼？而不同 database 統一集合於同一片光碟片的狀況，會不會影響彼此之後的授權與散布方式？

將 ODbL-1.0 授權的 database 燒錄在光碟片或其他載體上進行販售，並不違反其授權規則，但此時該 database 因為已被整體散布，所以解釋上必須以 ODbL-1.0 的方式傳遞予後手 (Publicly Convey)，也就是說，能夠收取費用，但收費的名目不能是資料庫授權金，此為 ODbL-1.0 預設的散布規則 (royalty-free but allowed for commercial use)。同上，關於 database 與 database 之間的授權狀態會否互相影響，主要還是得判定該整合方式是屬於「集合資料庫」，抑或是「衍生資料庫」的狀況，前者其他授權狀態的 database 可保留其原來的授權方式，後者則結合後的 database，必須依 ODbL-1.0 的授權方式來進行運用。

FAQ-4、將 ODbL-1.0 授權的 database，有時因為服務平台安全性的考量，必須轉換成另一封閉或加密的格式，此種作法是被允許的嗎？如果可以，又有哪些衍生義務需要被遵守？

如果基於應用上的必要，ODbL-1.0 授權的 database，是可以轉換為受到數位權利管理機制 (digital rights management, DRM) 控制的封閉格式，或是杜絕他人以不正常手段窺探資料內容的加密格式，然而，此種方式的使用者也必須同時符合其但書規定，那就是此一 database，依照 ODbL-1.0 的規則在續行散布時，必須給予收受者一份沒有 DRM 控制與加密限制的乾淨版本，此一平行提供的行為不能向 database 的收受者收取額外的費用，這部份的規則記載在 ODbL-1.0 第 4.7 條以下的地方。

FAQ-5、以實例來模擬，如果使用 ODbL-1.0 授權的 database 來進行系統服務，例如採用未來將轉型以 ODbL-1.0 授權的地理資訊資料庫專案 OpenStreetMap（註六），來進行美食地圖這類的行動定位服務 (Location Based Service, LBS)，我需要遵守哪些授權義務？又，如果是將未來以 ODbL-1.0 授權的 OpenStreetMap 地理資訊資料庫，直接原封不動的搬到自家的伺服器，與透過 API 來與官方伺服器取用資訊的兩種方式，對於商業化模式有無差別？若有，會是什麼樣的差別？

其實，若是單純使用 ODbL-1.0 授權的 database，那無論商業營利與否，重點就是善盡 FAQ-1 回答裡所述明的標示義務；而若是進一步涉及 database 的「公開傳遞」及「公開揭露」的使用狀況，則再依 ODbL-1.0 第 4.2 條與 4.6 條的規定，以 Copyleft 的方式提供此一 ODbL-1.0 授權的 database，或是承襲其授權狀態的衍生資料庫。而就美食地圖行動定位服務的例子來說，將 ODbL-1.0 授權的 database，原封不動的搬到自己的伺服器上，與透過 API 來與官方伺服器取用資訊的兩種方式，單就 ODbL-1.0 的授權規範上來看，在商業化模式的授權義務性上並沒有太大差別，因為若是前者指的是遠端或雲端式的運用方式，則亦並不涉及 database 的「公開傳遞」與「公開揭露」，所以也沒有必然要一併提供 database 給服務使用者的義務。然而，從硬體資源的面向來看，則會有頻寬負載度方面的問題，舉例來說，OpenStreetMap 主網站，可能會因為頻寬被這些商業性 LBS 服務耗盡的緣故，而更動該主網站的服務條款，進而根據新的服務條款要求 LBS 服務的商業提供者，必須以另行架設伺服器的方式來利用 OpenStreetMap 以 ODbL-1.0 釋出的地理資訊，實務上這樣的權衡狀態是有可能發生的，例如在 Android 軟體市集上使用率頗高的「台北公車」App，與 Apple Store 下載使用率一樣驚人的「Speed Bus」App，都曾經因為大量耗用了台北市政府主機的網路資源，而遭截斷資訊、暫時下架，並停止散布，嗣其與權責單位申請資訊介接之後，轉一份資料到自行負擔頻寬與相關資源的伺服器之後，才又重新上架恢復服務（註六）。

----

註一：歐洲議會與歐盟理事會第 96-9-EC 號指令，英文版本全文請見右列連結：http://eur-lex.europa.eu/LexUriServ/LexUriServ.do?uri=OJ:L:1996:077:0020:0028:EN:PDF

註二：事實上我國雖然針對 database，並沒有如歐盟特別以第 96-9-EC 號指令，以獨自成規的方式來保護，但實際在判決中不乏法官把編輯完善的 database 當成「編輯著作」來加以保護。例如「智慧財產權法院 97 年度刑智上訴字第 41 號刑事判決」即為著例，此號判決的判決理由處，承審法官認為「法源法律網的法律資料庫」，其編輯與編排方式並非單單僅為勞務的付出，兼有選編創意與人類精神並列其中，故認定此一 database 為編輯著作，而應受到著作權法相關規範的保護。

註三：Open Database License v1.0 授權條款的全文，請參照右列網址：http://opendatacommons.org/licenses/odbl/1.0/

註四：Database Contents License v1.0 授權條款的全文，請參照右列網址：http://opendatacommons.org/licenses/dbcl/1.0/

註五：關於 Copyleft 的歷史脈絡與進一步的解釋，請參見：葛冬梅，泛談 Copyleft 機制與創用CC 的「相同方式分享」授權要素，http://www.openfoundry.org/tw/legal-column-list/2051--copyleft-cc-

註六：OpenStreetMap 專案，已於 2012 年 9 月 12 日，完成專案內含 data 與 database 的授權轉換，由原來的創用CC 授權條款，轉以 ODbL-1.0 向外散布。

註七：關於「台北公車」App與「Speed Bus」App 事件的發展始末，可參照：周文茵，政府資訊再利用—從Speed Bus事件談起，http://creativecommons.tw/blog/20110701；以及 Lion：從「台北公車」 app 的下架看資訊引用這回事，http://t17.techbang.com/topics/7875
_______________________________________________________________

■ [源碼秘技] 《雪凡與好朋友們的 Ren'Py 遊戲引擎初學心得提示》第二回：基本觀念與前置作業！

林雪凡／文


嗨！各位觀眾大家好，我是雪凡。歡迎各位螢幕前的觀眾們準時收看「雪凡與好朋友們的 Ren'Py 遊戲引擎初學心得提示」第二回：基本觀念與前置作業！

本回，雪凡將概略講述一個 Ren'Py 遊戲專案的資料夾結構，並從不會寫程式的人的角度，講述遊戲腳本檔案的基本觀念。除此之外，還有說明如何讓 Ren'Py 支援中文、使用網路資源的注意事項，並附上可幫您更輕鬆編寫遊戲腳本的額外贈品，敬請各位愉快享用。

沒錯，或許您已經注意到了，本回的內容看來起相當雜亂而零散。事實上，這點節目製作人（我）也感到相當困擾。

雖然希望能儘快讓各位進入遊戲製作實戰中，但在這之前，需要預先準備、解說的東西又實在太多......老實說，本回節目已經重製了三次，報廢的腳本字數已經超過一萬字......我的上帝、媽祖、魔法少女！

但這一切都是製作遊戲所需要的。是必須的啊！（推眼鏡）

那麼，就讓我們踏穩腳步，一步步開始今日的心得吧。


專案目錄與 Ren'Py 腳本檔案

為了能有個好的開始，我們先來了解一下 Ren'Py 遊戲的專案目錄架構。

請打開您的啟動器，選擇您上次新建過的專案。並選擇 base 按鈕，將專案的 base 資料夾打開。

如果您已經忘記啟動器要如何操作，請回頭參考第一回的介紹。

(http://www.openfoundry.org/images/121023/RenPy/renpy2_01_Launcher_project_base.jpg)
▲ 圖1：選擇正確專案後，按下 base 按鈕，可以將 base 資料夾打開。

(http://www.openfoundry.org/images/121023/RenPy/renpy2_02_Dir_Welcome.jpg)
▲ 圖2：新專案的 base 資料夾，內容大約是這樣。


說明書

base 資料夾中，你可以看到大而顯眼的 "README.html" 檔案。這就是當前遊戲的說明檔案......說的更直白一點，就是日後會隨遊戲一起發佈出去，可以給玩家看的遊戲使用說明書。

注意，這是給玩家看的，不是給您看的。您看了也沒什麼大用。

當然囉，因為目前的 "README.html" 檔案是由系統自動產生的，所以只包含了遊戲基本操作方式－－像是滑鼠右鍵點了會怎樣 ，中鍵點了又會怎樣。其中人設、背景故事等東西全都沒寫，而且還是英文的。

本說明檔案的內容，各位日後可以自行改寫，怎樣改都行。但現在暫時不用理會它。我們去看其他部份。


遊戲程式資料夾

讓遊戲實際運行所需的「一切」東西，是被放在一旁的 "game" 資料夾中。


　　【無用檔案】除了 "README.html" 與 "game" 資料夾以外，目前 base 資料夾中的其他檔案，都只是些暫時性檔案。他們對　　　遊戲製作完全不重要，您不需要理解，而嫌他們礙眼的話刪掉也無所謂的。當然也可以不管。

　　　您日後可能會在 base 資料夾中自行塞入其他東西，到了那時，刪起來就請小心一點了。


請打開 game 資料夾。

(http://www.openfoundry.org/images/121023/RenPy/renpy2_03_Dir_game.jpg)
▲ 圖3：新專案的 game 資料夾。檔案不多看起來蠻單純的。

如前所述，game 資料夾中放的是遊戲執行時所需的資源。

因為新建立的遊戲中還沒有圖，也沒有音樂音效，所以這時，在 game 資料夾中，也就只有幾個可憐的「腳本檔」而已。


　　【腳本檔】所謂的腳本檔，就是以 .rpy 為副檔名的檔案。這也是 Ren'Py 開發過程中最重要的檔案。

　　這些腳本檔案，將會定義遊戲怎樣運行。我們日後有七成以上的時間，都會花在學習如何和這些腳本檔案打交道上面。


腳本檔案在初期共有三個，分別是 "options.rpy"、"screens.rpy"、"script.rpy"。

＊options.rpy
    用來設定遊戲專案的各部細項。包括遊戲名稱、解析度、介面風格等等，內容可說是異常繁雜，日後會有專文講述它。
＊screens.rpy
    用來設定各種面板造型的地方。包括對話框造型、選單樣式之類的。
＊script.rpy
    用來撰寫實際遊戲流程的地方。比方說，遊戲角色的對話、旁白、聲音播放、圖片顯示等等。

至於 game 資料夾中其他的檔案，像是 .rpyb、.rpyc、.bak 這些檔案，都是由程式自動產生的，並不重要。刪掉也無所謂。


rpy 腳本檔的「檔名」有什麼用？

一言以蔽之：腳本檔的檔名－－除了副檔名固定需為 rpy 以外－－其他部份並沒有任何特殊意義！

雖然前面介紹了三個特殊檔案，但其實對於 Ren'Py 來說，只要是放在 game 資料夾下，且副檔名是 .rpy 的檔案。遊戲啟動時，都會被一視同仁地以相同的方式讀取運行。

所以就技術上來說，您也可以在 script.rpy 中寫入遊戲設定，或是手動將 screens.rpy 檔案重新改名。總之，只要您有充份的理由這麼做，那就動手吧；不過我打賭你一定找不到那種理由，所以別這麼幹就對了。


　　【請儘量做到】基本設定應集中於 options.rpy 中；而面板方面的設定，也應放在 screens.rpy 裡面。


以上三個基本檔案中，通常只有 script.rpy 會被我們分割切細。

這是因為一個十萬字規模的遊戲，就表示遊戲腳本的份量至少會有十萬字之多，再加上圖片、分歧劇情等等細部操作，要是全部集中在一個檔案中，實在是有點為難人......

總之，檔案安排的原則全在於「容易管理」這項。


替遊戲資源做分類

同樣地，為了方便管理，推荐您在 game 資料夾中加入子目錄。讓各種不同的資源，能夠放在不同的子目錄下面。

比方說如下這般......

bg/ 	#背景
char/ 	#立繪
side/ 	#side image (對話框旁邊的大頭圖)
ui/ 	#使用者介面用的圖檔
item/ 	#其他非全屏圖片

effect 	#轉場特效濾鏡

music/ 	#音樂
sound/ 	#音效
voice/ 	#語音

movie/ 	#影片

font/ 	#字型


特別強調，替資源分類並非必要，僅僅只是為了方便管理而已。

舉例來說，官方提供的 tutorial 教學示範專案中，game 資料夾內部就因完全沒有分類，而成為一個異常恐怖的負面示範教材......我想您一定不會希望您的專案變成那樣。

(http://www.openfoundry.org/images/121023/RenPy/renpy2_04_tutorial_game.jpg)
▲ 圖4：慘烈的 tutorial/game 資料夾。資源完全沒分類，這樣很難處理。



基本腳本觀念

請用文字編輯軟體將 options.rpy 檔案打開來看，觀察一下 rpy 檔案的長相。

(http://www.openfoundry.org/images/121023/RenPy/renpy2_05_options_rpy_no_highlight.jpg)
▲ 圖5：options.rpy 檔案最初的樣子。順便一提，雪凡這邊用的編輯器是 gedit，同時使用 Oblivion 的色彩配置。

對於沒寫過程式，英文又相當普通的同學來說，這時恐怕頭暈得想哭了對吧？

想逃走？

哎呀，別急著逃走啦，本章幾乎不會動到 options.rpy 檔案，所以別慌，這裡只是拿它來說明 rpy 的腳本特性。目前您只要隨便翻翻就夠了。

且聽我解說幾個觀念，您就會知道日後該怎麼閱讀 Ren'Py 腳本。


行

Ren'Py 腳本是以「實體行」作為基本單位來運作的。

一言以蔽之，程式會依照順序，一行接一行地執行。上一行執行完成後，這才處理下一行。

提醒一下：因編輯器寬度不足而「自動折行」產生的行，並不算是前述的「實體行」。只有在行尾按 Enter 鍵產生的那種行才算數－－對初學者來說，這點切勿搞混。


註解

在 options.rpy 檔案中，可看到許多 "#" 符號。

這些 # 號的功用是在說明。在同一行中，# 號後面的內容其實是「註解」。

所謂的註解，就是指寫在腳本裡面，但電腦會忽略過去，當作根本沒看到的東西。

換句話說，註解是寫給人看的，而不是給電腦看的。註解可以提醒閱讀這份腳本的人許多事情，比方說提醒某個變數是幹嘛的啦，某段天書般的程式碼有什麼用......總之，可以讓寫程式的人知道這份程式的用途，以後才方便修改與維護它。

不過，聽說也有人在註解中間寫日記，或是對老闆的咒罵什麼的......嗯嗯，怨念太深的人，我們這就不去管他了。


變數與指定

腳本中的 "=" 符號，表示的不是數學中的「等於」，而是「指定」

一言以蔽之，"=" 左邊的「變數」，將會被指定為右邊的「值」。

舉例來說：

HP = 5           # HP 被指定為 5
MP = 4           # MP 被指定為 4
name = "Luci"    # name 被指定為一串文字：Luci
damage = 3       # damage 被指定為 3
HP = 5 - damage  # HP 被重新指定為 2 （因為 5-3）

上例中，HP、MP、name、damage 都是「變數」。

顧名思義，變數是一些「可被改變的數」。您可以將變數理解為一個「容器」，這個容器實際上表達什麼意思，取決於裡面裝了什麼「值」。

以上面的片段為例，變數 "MP"，其實代表著 "4" 這個數字；變數 "name" 代表著 "Luci" 這串文字。

變數的名字有些規則要遵循，這包括：

＊絕對不會用數字開頭
＊中間不能夾有空白
＊對大小寫敏感（舉例來說，name1、Name1 與 NAME1 是三個不同變數）

除了以上這些條件外，絕大多數的英數混雜字，都能成為變數名稱。

重新強調一次，您可以透過 "=" 決定這些變數的「值」是什麼。


字串

如前所述。在腳本中隨便打入文字，電腦會將他視為變數。那麼我們又該如何表示「文字本身」呢？

就靠「字串」語法。

「字串」是由兩個 "（雙撇號），又或兩個 '（單撇號）束縛起來的一串文字。您不能直接「用文字代表文字」，因為電腦會將您打進去的文字視為變數或指令對待，所以當您要輸入文字時，就得靠字串。

比方說：

Luci = "A good girl!"
name = "Luci"        # 變數 name 被指定為 "Luci"

# 以下這行沒有語法錯誤，程式可以執行，但執行結果鐵定不是您想要的意思
name = Luci          # 變數 name 被指定為 "A good girl!"

不管是單撇號還是雙撇號，都可以被字串使用。只要兩兩相同地，成對使用就行了。


區塊 (block)

區塊是由許多具有相同程度「縮進」的行，連在一起組成的多行程式碼。


label act1:       # 第一個區塊，包含下面三行
    "很久很久以前……"
    "西彷國有一位皇后。"
    "皇后擁有一面巨大的，有著神奇魔力的鏡子"

label act2:       # 第二個區塊，包含下面兩行
    "她有一位漂亮而人見人愛的女兒，這位女兒擁有雪白的皮膚與蘋果般的臉頰，名字叫白雪"

                  # 沒有實際功能的行－－包括註解與空行－－並不會打斷區塊

    "不過身為繼母，皇后發現，自己好像不太受到女兒的歡迎。"

label act3:       # 第三個區塊，僅僅包含下面一行
    "皇后感到煩惱，於是她向巨大的鏡子提出問題……"
"「魔鏡啊魔鏡，請告訴我，我是不是被白雪討厭了？」"  # 這行變更了縮進，就不包含在原本的區塊之內了。


理想狀況是，每級縮進都是四個半形空白。不過實務上，使用 tab 或不同數量的空白也是被允許的。唯一需注意的是，相同一個區塊中，縮進的量要「完全相同」。

區塊幹什麼用的相當囉唆難懂，三言兩語不容易解釋清楚。勉強用一句話來解釋的話：區塊可以將程式碼給聚集起來，供遊戲集中調派使用。

......這樣說好像會讓觀眾更加困惑的樣子。稍微說清楚一點好了。

前面曾經提過，程式是一行接一行執行的，這基本上沒錯。但在需要「進入區塊」的場合，有時卻有例外－－是的，遊戲程式可能「直接跳過整個區塊」。

您可以觀察一下上面的範例腳本，區塊開頭前一行，總會見到一個用 ":" （冒號）結尾的前導語句。比方說 "label act2:" 這樣。

透過各式各樣有著不同功能的前導語句，後方區塊內的程式碼，就有可能會被跳過。這些程式碼可能只會在某種特殊狀況下才會執行，又或是當其他程式碼在別處「呼叫」它時，它才會掉頭回來實際運作。總之，區塊內的東西，究竟會在什麼狀況下被執行，是由前導語句決定的。

嘿呀？果然還是有點困惑吧？沒關係啦，區塊這種東西在腳本中確實常常見到。但您現在不用完全搞懂它，日後再作觀察就好。

暫時，您只要記住「縮進本身是有意義的」就可以了。

除非您知道自己在幹嘛，否則不要變更縮進！遊戲會壞掉的。


贈品

程式碼很難讀？頭很暈？

(http://www.openfoundry.org/images/121023/RenPy/renpy2_05_options_rpy_no_highlight.jpg)
▲ 圖5：options.rpy 檔案於 Gedit 編輯器。

對於使用 Vim (GVim) 與 Gedit 編輯器的用戶們，為了替大家減緩編寫腳本時的頭暈症狀，雪凡有些禮物要送給大家。


語法高亮與編輯器支援

Vim 與 Gedit 編輯器的用戶們，咱在此提供語法高亮與編輯器支援。就看各位要不要用了。

如果您用的編輯器不是以上這兩個，很可惜本節目暫時沒法提供您幫助，或許您該去網路上面搜搜，看看有沒有人已經寫了不錯的外掛程式，或許能幫上您的忙。當然囉，您也可以在沒有語法高亮的狀況下寫腳本－－其實這也不算太難啦。只要把 rpy 的語法規則弄懂就可以了。

或是說，您也可以直接用 Ren'Py 內建的 jEdit 編輯器來編寫遊戲。jEdit 本身是有提供 rpy 高亮支援的。雖然我覺得 jEdit 不好
用......總之各位就自行斟酌囉。


Vim 用 Ren'Py 語法高亮定義檔案
Vim (http://www.vim.org/) 是種初學者難以上手，但極其萬能的編輯器。透過這個檔案，Vim 編輯器的使用者將能夠在 rpy 檔案編輯時獲得語法高亮支援。

這個語法高亮檔案的原作者為 Musashi Aharon，他的原作品可在以下位置找到：http://yesoidos.sourceforge.net/upload/renpy.vim


和原版相比，雪凡修改的版本，額外增加了大量關鍵字高亮區段。在下修改的版本請到這裡下載：【連結：vim-renpy.tar.bz2 (http://www.openfoundry.org/tw/papers-and-teaching-materials/doc_download/1625-vim-renpytar)】

安裝方式為：

將壓縮包 (vim-renpy.tar.bz2) 解壓縮後，放到「Vim 設定資料夾」下面。

＊在 Linux 中，設定資料夾為 "~/.vim"；
＊若在 Windows 中，依照 Windows 版本不同，設定資料夾可能是在 "c:\documents and settings\{使用者名稱}\vimfiles" 或 "c:\Users\{使用者名稱}\vimfiles"。您得稍微找一下......


Gedit 用 Ren'Py 語法高亮定義檔案

Gedit (http://projects.gnome.org/gedit/) 是一款大巧不工，表面看來簡單易用，實則功能異常豐富的編輯器。主要運作在 Gnome 環境下，但也可在 windows 系統中使用。

本語法高亮檔案的原作者為 Koichi Akabe，作品採用 GPL-3.0+ 授權釋出，總之可以免費使用。您可到這一頁來下載：http://vbkaisetsu.sky- air.net/wordpress/2012/08/gtksourceview- 。

雪凡修改的版本也採相同授權釋出。和原版語法高亮檔案相比，差異在於增加了不少內建常數的高亮。請到這裡下載：【連結：gtksourceview-renpy.tar.bz2 (http://www.openfoundry.org/tw/papers-and-teaching-materials/doc_download/1622-gtksourceview-renpytar)】

安裝方式為：

將附件壓縮檔 (gtksourceview-renpy.tar.bz2) 內的 "renpy.lang" 檔案，放到以下路徑下面（如果路徑原本不存在請自行新建）。


~/.local/share/gtksourceview-3.0/language-specs


上面的路徑是用在 Linux 下的。至於 Windows 下的對應路徑，還請各位自行嘗試一下。我沒在 windows 下裝過這個。

經過上面的調整後......

(http://www.openfoundry.org/images/121023/RenPy/renpy2_06_options_rpy.jpg)
▲ 圖6：Gedit 中 options.rpy 加上語法高亮後的狀況，這樣整個就超好懂了啊。


Gedit 與 GVim 用啟動器支援檔案

這兩個程式能讓 Ren'Py 啟動器，直接支援 Gedit 與 GVim 編輯器。

特色在於，能讓啟動器的 "Navigate Script" 面板正確引導 Gedit 與 Gvim 編輯器，跳躍到目標程式碼的行數上，而且還能避免 一次開啟多個編輯器視窗。總之比預設的 system editor 選項好用多了！

兩程式均為雪凡原創，採用 MIT License 授權釋出，可在 Linux 和 Windows 版本上運作。因為太窮沒有 Mac OS，所以也無法撰寫 Mac OS 支援，真是抱歉了。歡迎有興趣者自行改寫。

如果您也想替自己喜歡的編輯器撰寫相應支援的話，請參看這份技術文件：http://www.renpy.org/doc/html/editor.html

本檔案請到此處下載：【連結：Gedit.edit.py (http://www.openfoundry.org/tw/papers-and-teaching-materials/doc_download/1621-geditedit)】、【連結：GVim.edit.py (http://www.openfoundry.org/tw/papers-and-teaching-materials/doc_download/1623-gvimedit)】

SDK資料夾/launcher


然後在啟動器的 preferences -> Text Editor 中，選擇您想用的編輯器。（如果沒看到新選項的話，請重開一次啟動器試試）


中文支援

介面翻譯

還記得之前執行的畫面嗎？

(http://www.openfoundry.org/images/121023/RenPy/renpy2_07_Welcome_new.jpg)
▲ 圖7：新遊戲專案執行畫面。 

主選單、遊戲選單、離開時跳出的訊息等等，這些介面元素目前全都是英文的。

要把他翻成中文，請在 game 資料夾下新增一個名叫 "translations.rpy" 的檔案。至於檔案內容，您可從官網 Wiki (http://renpy.org/wiki/renpy/doc/translations/English )複製一份貼入。記得要複製的是 "Game/Main Menu Translation" 的部份。


要複製的程式碼，大約長得像下面這樣：


init python:
    config.translations[u'Skip Mode'] = u'Skip Mode'
    config.translations[u'Fast Skip Mode'] = u'Fast Skip Mode'


等號左邊的中括號內放著原文，不需要改它；而等號右邊的則是譯文內容。

您可以看到，目前都還沒翻過，還是英文的。

然後就開始對照著翻譯吧。很簡單的啦，量也不多。如果您之前已經翻譯過一次了，翻譯檔當然可以沿用。至於實際實驗後，如果發現還有什麼東西沒翻譯到，可用同樣格式照描，自行新增新行來進行翻譯。

什麼，你不想自己翻？還嫌麻煩？這……算了，稍微照顧一下大家也是咱的責任，那就再失血大放送一次好了。請下載雪凡翻譯好的翻譯檔案 (【連結：translations.rpy (http://www.openfoundry.org/tw/papers-and-teaching-materials/doc_download/1624-translations)】)，本檔案採用 CC-BY 3.0 (http://creativecommons.org/licenses/by/3.0/tw/) 授權釋出。

將檔案處理好後，看看效果......

(http://www.openfoundry.org/images/121023/RenPy/renpy2_08_Welcome_no_font.jpg)
▲ 圖8：字哩？ 

等等，這畫面是怎樣？字全變成方塊酥了！是翻譯失敗了嗎？

其實沒有，翻譯手續是正確的，只是因為 Ren'Py 沒有內建中文字型，所以顯示不出來。


中文字型支援

中文字型有很多麻煩的地方，首先就是他太大了，其次是自由字型極少。再說外國語系用戶也用不到，Ren'Py 官方沒有內嵌也怪不得人家。

不過人家有理，我們的問題還是得解決。

首先，您得先去找一個中文字型，把這個字型扔進 game 資料夾下的 font 子資料夾中。

(http://www.openfoundry.org/images/121023/RenPy/renpy2_09_Dir_font.jpg)
▲ 圖9：把一個字型檔扔進 game/font 資料夾下。當然囉，這個字型檔得要是有支援中文的才行。

著打開 options.rpy 檔案，找到有 "style.default.font" 這個關鍵詞的那一行：


   # style.default.font = "DejaVuSans.ttf"


去掉前面的註解，改成您打算使用的中文字型檔的路徑。比方說下面這樣：


    style.default.font = "font/DroidSansFallback.ttf" # 此處的路徑是相對於 game 資料夾的路徑。


重新執行一次看看：

(http://www.openfoundry.org/images/121023/RenPy/renpy2_10_Welcome_have_font.jpg)
▲ 圖10：中文字出現了，用力歡呼吧！ 


中文字型的授權問題

哪，就像這樣，中文問題就算解決了。是嗎？

......且慢，您最好考慮一下字型版權問題。

中文的自由授權字型非常稀有，而普通人常用的細明體、少女體、綜藝體之類的字型，其實全都是有版權的。著名的華康（現名威鋒）、文鼎等公司，他們的字型包一大包兩三千元就可以買到數百個字型，說來其實也不算貴，但無法用於需要複製 與轉散發的場合－－換言之，透過這種方式購買的字型，無法用於遊戲當中！

您可以看看文鼎的使用合約與 (http://www.arphic.com/tw/products/retail_authority.htm) 與威鋒的使用授權合約 (http://www.dynacw.com.tw/license_agreement.html、http://www.dynacw.com.tw/ia_o.asp)，如果您要在遊戲中使用字型，您多半得先去和他們另簽專有契約，才能成為魔法少......更正！才能使用它們。

我沒簽過不知道要多少錢啦，但想來就很麻煩。有人有這方面相關經驗的話，期待留言補充。

您可在網路上搜尋「自由中文字型」，看看有沒有順眼的可用。需注意的是，所謂的自由字型往往也有許多使用條件需要注意。舉例來說，網路上著名的文泉驛系列字型雖是自由字型，但它採用的是 GPL 授權；這表示如果您使用這些字型發佈您的遊戲，您整套遊戲程式都得要以 GPL 授權釋出－－換句話說，您不能對玩家隱藏您的遊戲腳本。而在此一前提下，也較難以傳統方式營利。

如果您未來有把遊戲拿去賣錢，又或其他考量的話，這方面千萬不可大意。

目前咱在自己遊戲中使用的字型，是採用 Apache-2.0 授權釋出的 Droid Sans Fallback。其 Apache-2.0 License 的授權條件不像 GPL 系列那麼嚴格，而效果也還不壞，至少中規中矩的不礙眼。歡迎參考。

網路上有很多地方可以下載 Droid Sans Fallback 字型，比方說這裡：http://www.ffonts.net/Droid-Sans-Fallback.font


第三方資源登錄

一路閱讀到這裡，字型檔與咱的翻譯檔，應該會是您最初的兩個第三方資源檔案。

當您決定使用任何第三方資源檔案的同時，您都應該用一個檔案，撰寫並保存相對應的資源授權記錄。


比方說在 base 資料夾下，另放一個名叫 "License.txt" 的檔案。

這份授權檔案中，必須記錄「每一份第三方資源」的幾項重要屬性，這應該儘量包括......


＊「本地資源名稱」：如檔名
＊「資源的授權方式」：如 CC-BY 3.0 Unported
    。如果是作者採用自訂的特殊授權條款，為了避免日後找不到條款全文，最好把授權條款原文全文附上。
＊「作者」與「修改者」的名字：
    。幾乎所有自由授權，都會以「在衍生作品中表彰原作者貢獻」作為他人自由使用的最基本條件。如果不登記作者名是誰，　　則您根本做不到這一點。
＊「資源原始來源」：如網址
     。如果您日後發現漏了什麼重要資料，才有機會回來尋找。


記錄授權訊息這件事確實相當麻煩，但非常非常重要。且如果不打從一開始就嚴謹地記錄，日後甚至無從挽救－－你能記得某個小小圖示究竟是從哪裡來的嗎？這當然是做不到的！而日後您的遊戲發表時，說不定就會為此吃上官司。又或是發表前重新檢查資源時，才發現有授權衝突，卻改無可改，陷入窘境。勉強發表，又心裡毛毛......

無論如何，記錄授權是專家必須要有的基本素養。何況作者都讓您免費用他的資源了，這時盡一下義務也是理所當然的。

什麼？您說盜版最高……人客，請小聲點，這樣我會很為難的。


本回內容播放終了，敬請期待下回！
_______________________________________________________________

■ [源碼秘技] Graphviz - 用指令來畫關係圖吧！

林雪凡／文


軟體名稱：Graphviz
介紹版本：2.28.0
官網：http://www.graphviz.org/
授權：GPL-1.0/


簡介

Graphviz 是一個運用廣泛的命令行繪圖軟體，不過說是繪圖軟體，它能繪的圖並不是一般人想像中的漫畫或 logo，而是數學意義上的 "graph"，比較通俗的說法就是「關係圖」。

舉例來說，像是下面這種圖：

(http://www.openfoundry.org/images/121002/Graphviz/graphviz_01.jpg)
▲ 圖1：Unix 家族。Graphviz 官網的示範圖片之一。

用手畫會很痛苦，而 Graphviz 可以替使用者搞定它。Graphviz 提供一套語言，讓您能直接陳述圖片上的節點、邊、方向等性質。之後，由它來為您產生整張圖片。

Graphviz 能畫的圖片有許多種，您可在官網 (http://www.graphviz.org/Download.php) 挖到更多範例。


安裝

Graphviz 支援 Windows、Mac OS X、FreeBSD、Solaris、Linux 等多種作業系統。

若您是 Linux 使用者，基於這款軟體的名氣，您的套件管理器中幾乎一定會有，從套件庫中安裝吧！倘若真找不到，請看官網 下載頁面 (http://www.graphviz.org/Download.php) ，試試原始碼。

若您是 Windows 用戶，請前往這裡下載安裝檔：http://www.graphviz.org/Download_windows.php

Mac OS X 的使用者請往這邊走：http://www.graphviz.org/Download_macos.php


Graphviz 的使用

# Graphviz
＞＜cmd＞ ＜inputfile＞ -T ＜format＞ -o ＜outputfile＞
 
# 舉例：輸出 png
＞ dot input.dot -T png -o output.txt
# 舉例：一樣是輸出 png，只不過檔名是 txt
＞ dot input.dot -T png -o output.txt

 首先，我們看看上面的 ＜cmd＞ 部份。

Graphviz 的 ＜cmd＞ 有好幾種，每種使用方法都完全相同，差別只在於渲染出來的圖片效果不一樣。man 中的簡介是這樣寫的......
..
dot

渲染的圖具有明確方向性。
neato

渲染的圖缺乏方向性。
twopi

渲染的圖採用放射性佈局。
circo

渲染的圖採用環型佈局。
fdp

渲染的圖缺乏方向性。
sfdp

渲染大型的圖，圖片缺乏方向性。

您可以透過 man ＜cmd＞ 取得進一步說明。但還是親自用用比較容易理解。在本文中，凡沒有說明的圖，預設都是以 dot 渲染出來的。

繼續往下看。在 Graphviz 中，若您不指定 -T 參數，Graphviz 並不會自動猜測您想要產生什麼格式，只會以預設格式渲染。可選格式相當多，包括（但不限於）jpg、png、svg 等，全部列表可見官網 (http://www.graphviz.org/doc/Dot.ref) 說明頁的最下方。

-o 可讓您指定儲存檔案的檔名。如果您不用 -o 選項指定輸出檔名，Graphviz 則會將結果輸出到標準輸出上。

除非用法很特殊，否則這兩個參數，每次都要記得下達才行。


dot 語言說明

指揮 Graphviz 繪圖時，所使用的語言叫作 "dot"。下邊就來介紹如何使用它。

有向圖與無向圖

使用 dot 語言，第一步就是決定要畫哪種圖。

圖分兩種：有向圖與無向圖。

(http://www.openfoundry.org/images/121002/Graphviz/graphviz_02.jpg)
▲ 圖2：有向圖

(http://www.openfoundry.org/images/121002/Graphviz/graphviz_03.jpg)
▲ 圖3：無向圖

有向圖以 digraph 宣告圖片，節點間的關係寫為 "->"。

/*demo1。順便一提，在 dot 語言中可使用 C++ 中允許的註解。本行為 C 風格註解*/
 digraph demo1{ //這也是註解，C++ 風格的。
       a -> b -> c;
       c -> a;
 }

無向圖以 graph 宣告圖片，節點間的關係可以寫為 "--"。

//demo2
graph demo2{
      a -- b -- c;
      c -- a;
 }

其中 demo1 與 demo2 是圖片的名稱，一般使用時常常留白不打。

使用引號

上文中的 a, b, c 除了作為程式內的識別字以外，也會成為節點的顯示名稱 (label)。不過如果這名稱中混了中文或夾了空格，Graphviz 就有可能搞錯你的意思。

為防不必要的誤解，所以平常最好都用英文引號括住。就像下面這樣：

//demo3
digraph {
     "總 攻" -> "受";
     "強 攻" -> "受";
     "健氣攻" -> "受";
}

(http://www.openfoundry.org/images/121002/Graphviz/graphviz_04.jpg)
▲ 圖4：混合了空白的示範，採用 fdp 渲染。

這樣就沒問題了！

子圖與簡化技巧

來看個複雜一點的例子，這是一份地中海海域的大略連接圖：

graph G{
     "黑海" -- "亞速海";
     "黑海" -- "博斯普魯斯海峽"
     "達達尼爾海峽" -- "愛琴海"
     subgraph cluster_T{ // 新東西
         label = "黑海海峽"; // 新東西
          "達達尼爾海峽" -- "馬爾馬拉海" -- "博斯普魯斯海峽";
     }
     subgraph cluster_M{
         label = "地中海海域";
         "中部地中海" -- {"愛琴海" "愛奧尼亞海" "西西里海峽"}; // 也是新東西
         "西部地中海" -- {"西西里海峽" "第勒尼安海" "利古里亞海" "伊比利海" "阿爾沃蘭海"};
         "愛奧尼亞海" -- "亞得裡亞海";
         "阿爾沃蘭海" -- "直布羅陀海峽";
     }
 }

(http://www.openfoundry.org/images/121002/Graphviz/graphviz_05.jpg)
▲ 圖5：地中海海域連接圖，使用 fdp 渲染，種子為 8 (-Gstart=8)。


這張圖有些新東西可以看。

第一個是 subgraph 關鍵字。一如名字所示，他是用來定義「次級圖片」用的。

次級圖片在 dot 的官方文件中常被叫作 cluster subgraph，特指圖示中被方框包裹起來的那兩塊，其定義方式和一般的 graph 非常相似，不過使用上有兩件事需要留意：

＊他的命名得以 cluster 前綴開頭，否則語法雖然能過關，但生不出圖面上您預期的效果。
＊如果父圖是無向圖，他本身也得是無向圖；反之如果父圖是有向圖，這邊也得乖乖照著來。

第二個重點是下面這段：

        "中部地中海" -- {"愛琴海" "愛奧尼亞海" "西西里海峽"};

用大括號括起，用空格分開－這是一口氣將好幾個節點群組起來同時操作的方法，其等效於：

        "中部地中海" -- "愛琴海";
        "中部地中海" -- "愛奧尼亞海";
        "中部地中海" -- "西西里海峽";

您甚至可以用以下程式碼畫出圖6：

digraph G{
    {a b c} -> {d e f}
}

(http://www.openfoundry.org/images/121002/Graphviz/graphviz_06.jpg)
▲ 圖6：大括號效果示意圖

這語法糖很方便好吃，可以靈活運用。

第三個不同處在於 label = XXX 這行。這是「屬性」的指定方式。

關於屬性，我們下章再講。

屬性

有了前面介紹過的技巧，所有圖面關係都可以順利地繪製出來。

然而，通常我們畫圖的時候，還會對圖片做一些特別的處理。好比說把字加粗、把圖變色、把標籤或連接線的外型 改變、把某些節點水平對齊......諸如此類。

要控制這些東西，就要用到屬性。

屬性有四種：


＊用在節點上 (Node, N)
＊用在線段上 (Edge, E)
＊用在根圖片上 (Graph, G)
＊用在子圖片上 (Cluster subgraph, C)

您可以閱讀手冊 (http://www.graphviz.org/doc/info/attrs.html) 中的表，判斷哪些屬性能用在哪些地方。

那麼，屬性要怎麼用呢？

屬性的套用

如果要設定根圖片或子圖片的屬性，得像前面範例中所示的那樣，在圖片的大括號範圍內指定......

屬性名稱=值;

這樣就行了。

對於節點 (node) 的屬性，有以下幾種指定法：

節點名 [節點屬性名=值];
節點名 [節點屬性名=值, 節點屬性名=值];
node [節點屬性名=值，節點屬性名=值];

屬性指定的語句必須要被中括號括起。當一次指定多值時，需用英文逗點隔開。

第三行中的 node 是個關鍵字，用來代稱「圖片範圍內」所有「還沒創建」的節點，或者您也可將它理解為：在當前大括號的範圍內，所有尚未創建節點的屬性預設值，會被這個語句給變更。

線段 (edge) 的屬性指定，與節點屬性指定方式很類似：

節點名 -> 節點名 [線段屬性名=值];
節點名 -- 節點名 [線段屬性名=值, 線段屬性名=值];
edge [線段屬性名=值，線段屬性名=值];

其中 edge 是關鍵字。

這邊順便補充一個關於線段的觀念：有些線段相關的屬性，具有 head 值與 tail 值。而這邊說的 head 與 tail，得將它想 像成一個「箭頭」的形狀（就像是「a -> b」這樣）。

對於線段來說，這個箭頭的頭部才是 head。所以囉，這可能和您最初想像的不一樣，因為這邊說的「Head」其實是 兩個節點中，後面的那一個。

屬性範例

把先前的看過的例子加上一些屬性試試。

graph G{
     "黑海" [shape = circle, color = blueviolet, fontcolor = blueviolet, fontsize = 20];
     "黑海" -- "亞速海" [label = "刻赤海峽"];
 
     subgraph cluster_T{
         label = "黑海海峽";
         fontsize = 24;
         fillcolor = darkslategray;
         style = filled;
         fontcolor = white;
         node [fontcolor = white, color = white];
          "博斯普魯斯海峽" -- "馬爾馬拉海" -- "達達尼爾海峽" [color = white];
         "博斯普魯斯海峽" [shape = parallelogram];
         "達達尼爾海峽" [shape = parallelogram];
     }
 
     "黑海" -- "博斯普魯斯海峽" [color = red ,penwidth = 2];
     "達達尼爾海峽" -- "愛琴海" [color = red ,penwidth = 2];
 
     subgraph cluster_M{
         label = "地中海海域";
         fontsize = 24;
         "西部地中海" [shape = Mcircle, style = filled, color = grey, fillcolor = aquamarine, fontsize = 20];
         "中部地中海" [shape = Mcircle, style = filled, color = grey, fillcolor = aquamarine, fontsize = 20];
         "直布羅陀海峽" [shape = parallelogram, fontcolor = red];
         "西西里海峽" [shape = parallelogram];
         "中部地中海" -- {"愛琴海" "愛奧尼亞海" "西西里海峽"};
         "西部地中海" -- {"西西里海峽" "第勒尼安海" "利古里亞海" "伊比利海" "阿爾沃蘭海"};
         "愛奧尼亞海" -- "亞得裡亞海";
         "阿爾沃蘭海" -- "直布羅陀海峽";
     }
 }

(http://www.openfoundry.org/images/121002/Graphviz/graphviz_07.jpg)
▲ 圖7：地中海海域連接圖（加入屬性）。使用 fdp 渲染，種子為 3 (-Gstart=3)。

諸多屬性中，最常用的大概是 label 了。

label 可以決定節點、線段或子圖片上要顯示些什麼。如果您的節點名很長的話，可以在程式內部取個簡短的名稱， 之後透過短名稱操作它，另外透過 label 指定它的顯示內容。

color、fillcolor、fontcolor 這些屬性都是控制顏色用的，不過 fillcolor 只有在 style 被指定為 "filled" 時才會生效。

shape 可以指定節點的形狀，形狀列表官網這邊 (http://www.graphviz.org/content/node-shapes) 有一份資料可參考。

線段屬性方面。有向圖中的箭頭可透過 arrowhead 與 arrowtail 屬性來指定頭尾樣式。至於線段本身，則可透過 style 屬 性，指定不同類型的虛線與短截線。使用者還可以用 dir 屬性讓箭頭方向反過來。

另外還有一個 image 屬性，可以指定讓 node 顯示圖片，需要時也可參考看看。

......屬性實在太多，無法一一介紹，請查官網手冊獲得全面訊息 (http://www.graphviz.org/doc/info/attrs.html) 。

rank

dot 語言中有一個叫作 rank 的概念。

所謂的 rank，在 dot 語言中，含意比較接近於「等級」。他主要用在 dot 渲染器中。

請看以下的圖：

(http://www.openfoundry.org/images/121002/Graphviz/graphviz_08.jpg)
▲ 圖8：rank 示例。

很明顯可以看出來，圖片被從上到下分為四層－這就是 rank。

下方是與上圖對應的 dot 陳述......

digraph demo{
    a -> b -> c -> d;
    b -> {e f};
}

觀察程式碼，可看出 rank 是如何被指定的。

其基本規則在於：每個線段的頭端，都會比尾端多出一個等級（在圖上面就是往下面一層）。

但等等，如果等級指定的語句彼此矛盾呢？

修改以上程式碼為......

digraph demo{
    a -> b -> c -> d [label = "rank 增加"];
    b -> {e f} [label = "rank 增加"];
    f -> a [label = "不影響 rank"];
}

(http://www.openfoundry.org/images/121002/Graphviz/graphviz_09.jpg)
▲ 圖9：rank 示例。

看上面的結果，顯然 rank 的指定是「先說先贏」的。

除了基本規則外，rank 也可以透過屬性來加以調節，有必要時就把手冊抓出來查查看。

參考資料

＊官網屬性手冊，要查屬性就來這看：http://www.graphviz.org/content/attrs。

＊官網純文字版 Graphviz 使用說明兼 dot 語言手冊：http://www.graphviz.org/doc/Dot.ref。

＊如果您偏好 pdf 版本的說明書，請到這邊下載：http://www.graphviz.org/doc/dotguide.pdf。
_______________________________________________________________

■ [自由專欄] 能力越強、責任越大

Kenneth Mak／文 

◎ 本文原載 Linux Pilot，原文章連結按此 (http://www.linuxpilot.com/blog/kiji/2012101702oss-security)。

最近筆者參加了一個廠商舉辦的產品發布會，重點推廣的是一個可判斷軟體是否有保安漏洞的工具。負責介紹產品的是一位資深的保安顧問，但言談之間卻多次將開源技術與危險性劃上等號，目的自然是為了顯示他們的產品何等安全，但概念上卻大錯特錯。

(http://www.openfoundry.org/images/121023/Linux%20Pilot/201210170102.jpg)

先解答一條小學程度的問題：「槍械危險嗎？」對一個對武器系統 (Weapon System) 沒有概念的人來說，槍械的確可能對他甚至他身邊的人構成危險。但對於一個身經百戰的士兵來說，槍械卻是他保命的關鍵，手上如果沒有槍械的話反而更加危險。

說到這裡大家都應該明白了，槍械本身只是一件工具，是否危險的關鍵，在於什麼人在什麼情形下使用它。開源技術也是一樣，技術本身是中性的，從來沒有危險與否之分。攻擊者可以用付費軟體進行入侵，也可以用免費或開源軟體來入侵，防守的一方亦是一樣。依照這樣的邏輯，付費和開源軟體的安全性其實差不多。如果因為有人使用開源軟體作為攻擊工具，就強行將「危險」的標籤加在開源軟體身上，那麼我們和將投擲原子彈責任推在愛恩斯坦身上的人有何分別？

再說要架設 Web 服務，大部分人都會使用開源軟體。除了因為成本低之外，還因為它極高的可塑性，可以配合任何業務環境的需要。但這亦意味著技術人員需具備一定程度的保安知識，例如部分 Linux 版本在預設值下，會將名字和版本編號告知連線到伺服器的用戶，但此等資訊卻可能成為攻擊者找出漏洞的線索。如果因為用戶「學藝不精」就認定開源技術是「危險」的話，在美國我們大概要廢除醫療行業了，因為每年死在醫生手上的人比交通意外和槍擊還要多。

開源軟體是集合了全球開發者心血結晶的產品，他們沒有因此要求任何報酬。如果你認為它不安全，就應該積極參與去改良它，而不是消極地冷眼旁觀、然後提出一些似是而非的觀點恐嚇大眾再謀取暴利。「能力越強、責任越大」不但是電影的經典台詞，也應該是軟體產業友好的座右銘。
_______________________________________________________________

■ [源碼新聞] 新創公司對抗專利蟑螂的十要訣

黃郁文／編譯

無緣無故就被告專利侵權實在不好玩，特別是起訴狀或警告信突然寄送到家門口的那一刻，實在讓人立刻感到愁雲慘霧，不知下一步要如何是好。其實，可別以為只有獲利豐盈的大公司才會被告專利侵權，根據調查，新創公司更是經常成為被控侵權的對象，依數據顯示，在美國被控專利侵權公司有 66% 是年收入低於一億美金的公司，其中 55% 更是年收入低於一千萬美金。那麼，這類事業才剛起步，資源有限的新創公司，在被指控專利侵權時究竟要怎麼辦？Santa Clara 大學法學教授 Colleen V. Chien，以及 Wilson Sonsini Goodrich & Rosati 事務所的資深律師 Stefani E. Shanberg，這兩位在專利領域學有專精的女中豪傑，傳授下列的基本要訣，讓被控侵權的新創公司能夠依步驟調整心態以從容應對：

1、先冷靜、別驚慌

保持心情冷靜也許是最難做到的要訣之一，但卻是至為重要。最近幾年，各行各業被控訴專利侵權的狀況還蠻常見的，對於大型企業來說可能已算是家常便飯，但新創公司由於沒有經驗，初初碰到這樣的狀況，也許就會陷於驚慌，但事實是，大多數專利蟑螂也都不願意走完正式的司法訴訟程序，因為如果沒有勝訴，他們自己就得擔負一部份的訴訟成本，所以首要之務是先冷靜下來。再者，如果不是惡意抄襲而造成的侵權爭議，通常被訴方的客戶也不會單單因為專利蟑螂的聲明，就背棄他的合作公司。

2、保持低調
 
從規模上來說，如果個別新創公司還不到大型，那很可能他便只是眾多收到警告信的公司之一，所以收到警告信的小公司，若在研究之後得到的合理結論是「自家公司並不需要這份專利授權」，就暫時先別理它吧！根據調查，22% 收到警告信的公司，有時候在什麼行動都沒採取時，整件事就不了了之。

3、找個能建立長期合作關係並對企業營利模式有認識的律師

找一位瞭解新創公司企業理念、營利模式，並能夠長期合作的律師。因為若不是如此，一般律師未必能夠根據新創公司的狀況來做出最佳建議，事實上是，這世上並沒有能夠解決所有專利侵權爭議的通用模式，有時候在面對專利侵權爭訟時，什麼動作都不回應甚至可能是最佳模式，所以唯有與該企業深切互動的律師，才有能力針對個案給出最適切的建議。

4、知己知彼

收到警告信或是起訴狀的公司，應認真檢視自己公司是否真的有使用到系爭的專利，探究公司生產產品的方式，是不是可以迴避而不用到這樣的專利技術，或是舉證與該專利技術有關的產品，根本就沒有幫公司賺進多少收益。上述的這些理由，有時便足以讓專利權人放棄追訴。當然，在法庭上進行專利無效之訴，才是一種正規的解決方式，但必須注意到由於訴訟攻防與舉證過程耗日費時，尤其在美國進行專利訴訟的成本更是不低，所以這不是建議的最佳因應方式，對於新創公司來說，直接走訴訟程序常常並非最佳策略，所以首先要務應該是盡一切有效的手段，先讓公司從纏訟的環結中脫身。然而，若是在分析過後，證實手上持有獨特的先前技術 (prior art) 得以成功廢棄掉對手的專利，那麼這是一個較為廉價而直接的手段，確定有勝算的話，倒也不妨朝這個方向努力。

5、查查是誰在興訟

如果專利權人窮追不捨，查查他們的來歷，看看幕後藏鏡人究竟是誰？看看這些訴訟操盤者是否也告過別人？因為有些專利蟑螂的動作只是要錢，有些動作則別有居心，受控訴的新創公司有時也必須知道這些背景資訊，才能研議出有效的防治與因應之道。例如，有些專利蟑螂其實是想從較好下手的新創公司這邊，取得後續與大公司打官司的訴訟基金，或是要殺雞儆猴創造判決先例的，但是少有與新創公司纏訟到法院並堅持到最後審判確定的，因為專利蟑螂即使在這種狀態下贏得了訴訟，他從新創公司手上贏得的賠償金，也未必足以支付其這段期間的訴訟成本。所以受控訴的新創公司，可以透過許多網站的服務來取得這些資訊，例如美國專利商標局提供的搜尋網站：http://assignments.uspto.gov/ 就是一個值得利用的工具。而若進一步有法院判決可以查找，還可和之前的受害人聯繫，善用 PACER (http://www.pacer.gov/) 與 Docket Navigator (https://docketnavigator.com/entry/home) 這些網站來充實相關資訊。其他的，例如 Lex Machina 這家公司提供專利權人背景搜尋服務，除此之外，還收費為客戶查找同一專利字號被告公司的資訊。而為什麼要做這樣的調查呢？因為其實有些專利蟑螂可能之前就已經興風作浪過，只是公司藉著清算或是重組而改名換姓，回過頭來再告之前的受訴公司一次罷了。

6、貧窮抗辯
 
如果新創公司真的沒賺到什麼錢的話，別不好意思告知發動這些專利訴訟的權利人你很窮的事實，讓這些興訟者知道就算贏了官司，他們也沒辦法從敗訴者身上榨出多少油水。這件事新創公司可以委任律師代為出面，但如果自己可以陳述清楚的話，也可以自己來，以證明該公司連委任律師的費用都已經支付不起。這樣的手段在於，毋須與興訟者爭論產品有沒有侵權或專利無效與否，目標放在金錢與收益上面，因為絕不會有任何一家專門發動專利訴訟的公司，會想對新創公司窮追猛打投入錢財之後，最後卻什麼都拿不到的。

7、合縱策略

新創公司在規模較小時，也可以尋求與其他被告共同合作，來抵卸專利控訴者的司法攻擊，不過需注意別讓成本超乎預期。有可能個別的涉訴公司只想選擇較省錢的防禦方式，但其他公司卻可能想要全力反擊，再把產生的訴訟成本均分至所有合作的被告公司身上。所以，如果個別的涉訴公司，與其他被告公司需求目標相同，那建議可以委由同一間律師事務所統籌處理所有事務，之後再均攤相關費用；而若手段目的與其他公司相異，則應各自聘僱律師協調合作，會是比較經濟而不會衍生糾紛的方式。

8、續命政策

進行專利訴訟的成本雖高，但是仍有一些小秘訣可以將錢與資源節省下來，以延續新創公司的生命力，這些續命政策可讓新創公司，不至於在投入專利訴訟之後便無力再進行公司原本的營運與生產，而在訴訟結束之前就落得破產的悲涼下場。這邊所說的續命政策，像是可以聘僱工程師，找出該專利技術的先前技術來廢棄它，或是產出非侵權抗辯在技術層次上的相關報告，而不要讓高額收費的律師統包所有事務。

9、慎選合適的戰場與手段

在確定要進行專利侵權的反擊之後，接下來的重點就是評估反擊手段的優先順序！通常在法庭上證明沒有侵權是最典型的反擊手段，不過，司法訴訟曠日廢時，進行這些程序的相關成本也並不低廉，所以也可以考慮一些行政程序上的反擊手段，像是直接向掌管專利核可的權責機構提出先前技術，來要求其重新審查 (reexamination) 對手專利技術的有效性，或是要求重啟專利核可後的異議 (post-grant review) 程序，也可當作一種有力的反擊武器。總之新創公司要注意慎選他的反擊戰場與手段，以避免戰爭結束之前就已經傾家蕩產，那就真的是得不償失了。

10、別陷自己於易告之境

專利蟑螂會尋找容易下手的目標作案，所以如果新創公司將自己產品的技術細節，讓別人可以透過網路與各種途徑輕易的搜索並閱讀到，那不啻是燒香迎鬼，讓專利蟑螂有可乘之機。所以原則上是，對於產品的技術白皮書，或詳細說明文件的請求，都應該要求取閱者必須註冊，以將這樣的風險控制在一定範圍之內；而在大肆宣傳新產品之前，也建議進行事先的評估，因為通常產品愈成功、愈知名，則愈容易成為專利蟑螂的下手對象。但當然，也不要由於專利被訴的恐懼而因噎廢食，不敢大舉推展新創公司的業務，只是新創公司的經營者，也應該事先為自己打下一股強心針，因為當代的專利訴訟已經非常廣泛而平常，當接到警告信時，切記別太驚訝就是了。


相關網址：

1. 對抗專利蟑螂十要訣
http://techcrunch.com/2012/10/07/10-ways-startups-can-deal-with-patent-troll-demands/

2. 新創企業與專利蟑螂
http://papers.ssrn.com/sol3/papers.cfm?abstract_id=2146251
_______________________________________________________________

■ [源碼新聞] ”FSF Respects Your Freedom” 硬體認證計畫

黃湘婷／編譯

軟體自由並不僅限於軟體的自由，也包括了硬體的自由。自由軟體基金會 (Free Software Foundation, FSF) 於日前推出了新的 logo 強調 "Respects Your Freedom" 電腦硬體設備認證計畫，鼓勵尊重使用者自由的硬體生產。

自由硬體能確保並沒有任何元件可能監視或限制使用者存取檔案，令使用者的生活更簡單，也能確認使用者是否安裝非自由軟體。

FSF 表示，能夠擁有電腦或設備完全的控制權、知道自己是否被監視或追蹤、不需授權就能夠執行任何軟體、自由的與朋友分享檔案不用擔心數位著作權管理 (Digital Rights Management, DRM)，這些都是數以百萬人所關心的技術。不幸的是由於使用者的需求，硬體製造商目前仍仰賴非自由軟體公司。

其實大約在兩年前，FSF 的硬體認證計畫就開始推動，包括認證的初始條件發布並蒐集各界的意見，現今全套規格的認證也可以在非營利組織的網站 (http://www.fsf.org/resources/hw/endorsement/criteria) 中找到。

根據新的方案進行認證，硬體設備必須使用自由軟體、支援自由的數據格式，並使用自由的工具，通過此認證的製造商便能在產品上顯示 FSF 新的 "Respects Your Freedom" logo 以及 FSF 的相關資料，對於製造商推廣產品便能有相當的幫助。


相關網址

1. FSF 推出硬體認證計劃
http://www.openfoundry.org/tw/foss-news/8831-fsf-qrespects-your-freedomq-

2. Respects Your Freedom 硬體設備認證
http://www.fsf.org/resources/hw/endorsement/respects-your-freedom

3. FSF 的新 logo 強調硬體 Respects Your Freedom
http://www.pcworld.com/article/2011712/new-fsf-logo-highlights-hardware-that-respects-your-freedom.html
_______________________________________________________________

■ [源碼新聞] Open webOS 1.0 發佈

黃湘婷／編譯

Open webOS 在八月下旬發佈 beta 測試版後，經過了 HP 一個多月的努力，於日前發佈了 Open webOS 1.0 觸控優化的版本，使用 Apache Licence 2.0 (http://www.apache.org/licenses/LICENSE-2.0.html) 授權條款，Open webOS 1.0 除了 webOS 的核心元件外，還結合了能跨平台的 Enyo 2 JavaScript 應用框架，為此專案開發的一部份。

Open webOS 的首席設計師 Steve Winston 表示，目前 Open webOS 已可移植至新的設備上，他們也拍攝了一部短片，展示在 HP TouchSmart 一體成型電腦上的運作，使用嵌入式 Linux 系統，核心應用包括了電子郵件與瀏覽器，Open webOS 的開放原始碼也可在 Github (https://github.com/openwebos) 下載。

雖然 Open webOS 是設計為能夠搭載許多硬體，但這不表示能夠完全支援上一代的硬體設備。HP 已明確的列出新版的 Open webOS 無法支援 Touchpad, Veer 與 Pre3。

當然此版本距離完全完成還有一大段路要走，包含缺少藍芽支援、多媒體播放以及先進的網路管理系統，除了建置這些功能外，未來也將加快使用者介面的渲染、新版本的 Qt 與 WebKit。


相關網址

1. Open webOS 1.0 發佈
http://www.h-online.com/open/news/item/Open-webOS-1-0-is-ready-1720508.html

2. HP 發佈 Open webOS 1.0
http://www.geek.com/articles/mobile/hp-releases-open-webos-1-0-2012101/
_______________________________________________________________

■ [源碼新聞] OSI 與 OSHWA 在認證標章相似性一事達成合作協議

黃郁文／編譯

(http://www.openfoundry.org/images/121023/oshwa-osi-logos.jpg)

還記得今年 8 月份時，開放源碼促進會 (Open Source Initiative, OSI) 與開源硬體協會 (Open Source Hardware Association, OSHWA) 之間的認證標章相似爭議嗎？經過 2 個月的討論與磋商之後，目前兩大組織已經針對這件事，簽署了書面的合作協議。

該協議的主要內容有二項，一為 OSHWA 可以繼續延用其鋸齒輪廓的原始標章，OSI 未來針對此事將不會再有任何爭執；二為 OSHWA 與 OSI 之間建立適用範圍與認證對象區隔的合作關係，其明訂 OSI 的標章只適用在開源軟體程式碼 (software code) 的認證上，而 OSHWA 的標章僅適用在開源硬體的實體物與其相關的設計文件上 (physical product and its design documentation)，而二者在各自推廣的範圍以外，若發生定義有所不足的狀況，則會援引對方的成果以進行互補，例如 OSHWA 就在開源硬體的定義裡，明列了若開源硬體裝置在設計上與未來運作上需依靠軟體程式的協力，那麼相關資料的提供，必須讓使用者足以自行開發開源軟體專案來符合這項需求，或者直接用 OSI 認證通過的開源授權方式來提供這些軟體！

依商標法的規定，兩個相似的認證標章確實有可能會引起來源與定義上的混淆與誤認，但如今 OSI 與 OSHWA，透過溝通與協議的方式，明確劃分了兩個標章的適用範圍及個別的專業領域。未來，OSHWA 更將針對開源硬體的標章認證程序公布指導手冊。可以說，雙方藉由本次的合作協議，讓原本可能衍生的標章爭議得以和平落幕，對於整個開源界來說，這不啻也是一個「以溝通與協議代替爭議與對抗」的良好範例，非常值得各界據以了解與學習。

相關網址：

1. 開源硬體標章的爭議與後續處理方案
http://www.oshwa.org/2012/08/02/an-important-question-on-the-open-source-hardware-mark/

2. OSI 與 OSHWA 針對 logo 相似性一事達成共識
http://www.h-online.com/open/news/item/OSI-and-OSHWA-agree-on-logo-usage-1731934.html

3. OSI 與 OSHWA 就標章近似與定義劃分簽署書面協議
http://opensource.org/node/640

4. OSHWA 公布的開源硬體定義
http://www.oshwa.org/definition/
_______________________________________________________________

■ [源碼新聞] PHPConf Taiwan 2012 現正熱烈報名中

PHPConf／文

PHP 是一個熱門的程式開發語言，許多知名的廠商就是透過它來提供各種網站服務，像是 Facebook 或 Yahoo 等。

PHPConf 是個針對 PHP程式開發者 舉辦的活動， 2011 年開始，在 pct、eddie 等社群朋友起頭帶領之下，由中研院資創中心自由軟體鑄造場 OpenFoundry 鼎力協助大部分行政事務及提供場地，整個活動開始順利成行。2011 年的活動，原本預計開放報名人數 100 名，在 10/21 開放報名後的 8 分鐘內立即飛速額滿，含講師與工作人員整個參與人數超過 150 位，而向隅人數之眾，遠遠超乎了當初的預期。



有鑒于此，今年 PHPConf 2012 籌辦團隊將報名人數增加到 300 個名額，包含講師、贊助商與工作人員在內，總數接近 400 人。活動於 10/8 中午 12 點開放報名後隨即湧入大量報名的朋友，截至 10/14 中午 12 點已經有 267 位朋友報名，活動預計在 10/20 晚上 8 點結束報名，有興趣的朋友記得把握最後機會。



PHPConf 2012 的活動聚焦在各種 PHP Frameworks 的展示！PHP Frameworks 是協助開發者快速進行程式開發的一種工具、架構與方法，讓 PHP 開發者能夠宛如站在巨人的肩膀上一般，將大部分的心力投注在個別應用程式的關鍵上，同時藉由 PHP Frameworks 提供的完整架構，在開發強大功能的同時能夠兼顧擴充性、程式品質與各種普遍認同的優秀應用特性。今年講師們帶來的議題包括 Symphony 2, Phalcon, Laravel, Yii 以及 Zend Framework 2 等的介紹。



同時，PHPConf 2012 的議題也相當多元，講師們預計分享的範疇包括應用程式的佈署工具、程式測試、資訊安全、嵌入式系統與國內大型網站的開發經驗等，我們也很幸運能夠邀請到活躍於英國與德國 PHP 社群活動的 Jonathan Maron，在本次活動中，討論他所開發的元件 Zend_Service_LiveDocx。



活動舉辦所需要的資源，有很大的一部分需要仰賴熱情廠商的贊助，PHPConf 2012 有來自於 異客、補夢網、遊戲基地 等單位對活動的支持，以及 行政院國科會、中研院資創中心以及 OpenFoundry 等單位協助張羅活動的場地與相關行政工作，讓我們的活動籌備順利進行。



今年的活動在 11/3 於中央研究院人文社會科學館舉辦，地點以及更詳細的活動資訊請參考活動官方網站： http://phpconf.tw/2012/
_______________________________________________________________

■ [源碼新聞] SITCON 2013 學生計算機年會 - 議程徵稿啟事

SITCON／文

SITCON 2013 學生計算機年會，給予學生們一個用自己力量實踐夢想的舞台。本屆年會之主軸聚焦於「創新與傳承」。其一，佈建一個學生發表創新作品的獨特平台，向全世界展示。其二，幫助學生瞭解各種新興的技術及演進，把夢想集合起來共同往前進。今年 SITCON 提供兩種稿件投稿方式，分別為作品投稿（Call for Project）、教學坊投稿（Call for Tutorial）。


壹、稿件說明：

一、作品投稿（Call for Project）
　　學生，擁有著熱血、執著與無比幹勁。我們期望以學生的主動力量為開展點，向外打破知識與技術跨不過的鴻溝，嘗試著與自身所學結合，解決日常生活中各種問題。Call for Project 的投稿焦點以創新應用之實務導向為主，並以學生為主要募稿對象，其簡報時間為 20 分鐘 (含 5 分鐘 Q&A 時間)。此投稿項目不同於專題競賽及學術、技術研討會模式，議程審核係著重於「問題與想法」、「技術」及「創新解決方法」的交流。

二、教學坊投稿（Call for Tutorial）
　　夢想，必須靠著能力與熱情一步步實踐。Call for Tutorial 的設立，即是期望擁有豐富實戰經驗的投稿者，能以傳承及引導的方式向學生們講解技術內容，讓學生們可以從教學坊中，習得基本的實作能力及技術認知，其簡報時間為 20 分鐘（含 5 分鐘 Q&A 時間）。教學坊投稿不限任何身份，其審核著重於「技術解析」、「實作說明」兩大方向。


貳、徵稿主題範疇：
以下提供投稿參考之主題，但不僅限於此：

＊多媒體娛樂與互動設計 Multimedia, Game & Interactive Design
    （各種娛樂應用，如特效、遊戲或是探討人機互動的範圍。）
＊網路、通訊與安全 Network, World Wide Web, Communication & Security
    （個人通訊、網頁技術、網路技術、資訊安全等。）
＊生命記憶、健康與生活應用 Life, Memory & Healthy
    （生命記憶管理、地理資訊、生活事務、健康管理等。）
＊工業、商業服務應用 Industry & Commerce
    （應用資訊技術於工商業、服務業等領域。）
＊機器學習、資料探勘應用 Machine Learning & Data Mining
    （任何著重資料探勘、機器學習相關理論的應用層面。）
＊嵌入式系統、軟硬體整合設計 Embedded System & Software/Hardware Design
＊程式語言理論與實務探討 Theory and Application of Programming Languages
＊其他屬電腦科學與資訊工程之範疇 Other Topics or Special Works on CSIE
    （任何屬於「現在或未來能以電腦解決的問題或服務」，均納入年會議程的範疇。）


參、投稿方式說明：

一、投稿方式：請以電子信箱 session@sitcon.org 投稿 。

二、投稿期限：

＊1月20日 23:59 後投稿截止（以 Email 報名時間為準）
＊2月中旬審稿結束
＊2月下旬公告完整議程

三、格式概要：請務必詳閱〈稿件排版規定〉，以規定為準：http://goo.gl/BFuSg
依稿件種類採取不同審稿方式，說明如下：稿件均經議程組形式審查。為作品投稿者，按其主題分類，交予該領域之審查委員匿名審稿。審查委員會由業界人士、學界人士及具研究所學籍或以上學歷之學生組成，選定符合本屆年會主旨者錄取。為教學坊投稿者，將由議程組選定適合之主題者。稿件一律以速審為原則。各項投稿之格式摘要如下：

＊作品投稿（Call for Project）：欲投稿者，必須準備至少一頁之技術文章（以六頁為度）及海報投稿（A1 直式海報）。個人資料請列於文章頁首（作者姓名、所屬學校或單位職稱、電子信箱）。為便利匿名審查，正文請勿出現可辨識作者之資訊。凡稿件被接受者，當天會將作品海報張貼至會場；排入議程者，將安排二十分鐘簡報（含五分鐘問答時間）。
＊教學坊投稿（Call for Tutorial）：欲投稿者，必須準備至少一頁之說明文章（以六頁為度）及草稿簡報投稿。個人資料請列於文章頁首（作者姓名、所屬學校或單位職稱、電子信箱）。凡被接受者，議程組將邀請該投稿者與會發表。投稿者需補充更為詳盡之文章、簡報內容。簡報以二十分鐘為限（含五分鐘問答時間）。

凡稿件經接受者，年會將頒予證書，表彰投稿人與發表人之熱情付出與貢獻，並邀請投稿人參與年會，共襄盛舉。

※有任何投稿疑問，歡迎寄信至議程組 (session@sitcon.org) 詢問，我們很樂意為你解答！
_______________________________________________________________

■ [源碼新聞] Node Knockout 台灣黑客頌 2012，號召開發者連續奮戰 48 小時，共同挑戰世界舞台

戚務漢／文

(http://www.openfoundry.org/images/121023/Node.js%20Knockout/node.js%20ko.png)


活動資訊

Node Knockout 台灣黑客頌 2012 活動，由 Node.js 台灣社群、JSDC、自由軟體鑄造場 (OSSF) 及 MiCloud 共同主辦，目標希望藉由本次的黑客頌活動，讓台灣開發者與世界舞台銜接，促進開發者在技術面及市場面向的整合。

本次 Node Knockout 台灣黑客頌 2012 活動特別邀請，台灣創意工場 (TMI) 執行長 Lucas，社群網站噗浪 (Plurk) 創辦人雲惟彬，MiTac 資訊服務研發處處長趙元瀚，iTHome iT 邦幫忙產品經理 Brecht Huang 以及吉立富資訊管理公司專案經理馮旭平，擔任本次活動的評審。

＊活動網站：http://nodeknockout.nodejs.tw/
＊活動時間：2012 年 11 月 10 日 (六) 08:00 至 2012 年 11 月 11 日 (日) 22:00
＊活動地點：中央研究院資訊科學研究所（台北市南港區研究院路二段 128 號）


活動緣起

Node Knockout 起始緣由是從 Node.js 官方主辦活動，每年會號召全世界的菁英開發者共同組隊，在 48 小時內開發全新的產品，再藉由全世界共同投票，選出年度最佳隊伍，同時許多具有潛力的產品，將會被扶植為新創公司，在世界的舞台上發光發熱。

在台灣有一群默默為 Node.js 推廣開發的社群朋友，組織成立「Node.js 台灣」社群，營運至今已有兩年的時間，目前社群成員數高達一千多人，每月於台北會定期舉辦聚會，讓開發者互相交流，透過技術交流等活動，讓彼此技術更增精進。

Node.js 技術已經趨向穩定化，業界對於相關開發者需求也隨之遽增。為求讓開發者看見 Node.js 技術的擴展性與未來商機，因此 Node.js 台灣社群首次將 Node Knockout 競賽機制引入台灣，於今年 (2012) 11 月 10 日至 11 日連續兩天，在中研院進行馬拉松式的實體開發者聚會，將號召全台灣的 Node.js 開發者齊聚一堂，共襄盛舉這個世界級的程式競賽盛事。


活動綱要

Node Knockout 台灣黑客頌 2012 活動正在開放報名中，除了連續 48 小時的程式開發競賽之外，本活動第一天下午提供了專為初學者開設的工作坊，預計 5 小時的 Node.js 入門課程，讓對於 Node.js 及雲端技術有興趣的各界人士能夠一同參與；第二天下午則安排兩場議程講座。黑客頌程式開發競賽的報名踴躍，目前僅剩十人名額，請有興趣的朋友儘速報名、以免向隅；工作坊及講座的部分將於近日開放報名，限量 50 名，詳細資訊將公布於 Node Knockout 台灣黑客頌網站，請各位密切注意。


關於主辦單位：


Node.js 台灣社群

由一群熱血開發者聚集而成，主力在於蒐集及建立 nodeJS 相關中文資訊，提供最佳的學習管道，讓更多人體會 JavaScript 的好處。


JSDC

JavaScript Developer Conference (JSDC, http://jsdc.tw) 為台灣最大的 JavaScript 年度性技術研討會。JSDC 是由 JavaScript.tw、Node.js 及 HTML5 & CSS 這三個台灣開發者社群於 2011 年底所共同發起，成立目標是希望推廣 JavaScript，持續探究舉行 JavaScript 的相關應用主題講座及工作坊等活動。藉由實體的聚會活動，促進產業開發動能，讓國內整體研發素質向上提昇，同時與國外社群及大廠聯繫，引進新一代的技術給予台灣開發者社群。


自由軟體鑄造場 (OSSF)

自由軟體鑄造場 (Open Source Software Foundry) 隸於中央研究院、資訊科技創新研究中心下，成立目的在於促進國內各界在於自由開源軟體的研發、應用及推廣，並提供 OpenFoundry 平台給開發者從事軟體開發，提供使用者下載。此外，OSSF 舉辦各類自由軟體活動及工作坊、協助自由軟體社群活動及發展、提供與自由開源軟體相關之授權法律政策諮詢與服務、發行自由軟體鑄造場電子報等等。目前接受行政院國科會及中研院資創中心的補助。


MiCloud

MiCloud (http://micloud.tw/) 由神通資訊科技建置及營運，係採用 Joyent 最先進的虛擬化技術，提供用戶最佳虛擬主機效能。而獨家追蹤工具 DTrace 更提供穿透式分析，以動態圖示呈現延遲根源，讓使用者掌握程式、OS 及 CPU 底層系統資訊。此外 MiCloud 不會因單一網路連線提供商斷線而導致虛擬主機斷線，因為 MiCloud 之虛擬主機有多組對外連線備源。



新聞聯絡人：
Node.js 台灣社群聯絡人: 戚務漢
Tel: 886-2-2657-6666 #7212
Phone: 0985018121
Mail: contact@nodejs.tw
_______________________________________________________________

■ [源碼新聞] Drupal 2012 高雄研討會：從網站開發到資料管理

Drupal Taiwan／文

(http://www.openfoundry.org/images/121023/Drupal/Drupal2012_1.png)

Drupal 在台灣已經進入第 6 個年頭了，今年 7 月因為眾人的努力，也成功盛大的舉辦了 DrupalCamp Taipei 2012，當時在眾人的討論之下，為了讓中南部的網站相關開發人士也可以一起來體驗這套方便、強大的開源軟體，DrupalTaiwan 決定將於2012年11月17日 星期六在高雄舉行小型研討會，把北部的這份感動也一起帶下去。

▲ 圖 1：DrupalCamp Taipei 2012 辛苦的工作人員 (http://www.openfoundry.org/images/121023/Drupal/Drupal2012_2.jpg)

這次活動特別找來了兩位在 Drupal 使用上有多年經驗的講師，跟大家分享 Drupal 經驗上的點點滴滴，當天更安排了幾位 Drupal 的前輩在台上為大家解惑，不論是使用上、開發上甚至是選擇分析上有任何問題，都將會一一的為各位解說。

▲ 圖 2：DrupalCamp Taipei 2012 活動狀況 (http://www.openfoundry.org/images/121023/Drupal/Drupal2012_3.jpg)

活動請從此報名：http://www.accupass.com/go/drupal


關於 Drupal

Drupal 是一套開源軟體，從西元 2000 年開始發展至今，已經有 228 個國家、82 萬多人在使用，可使用 1 萬 8 千多種功能、1 千多種佈景主題，最重要的是全球有 2 萬 1 千多位開發者在共同維護這套系統。國際上知名的案例更有美國白宮 (http://www.whitehouse.gov/)、華納唱片 (http://www.warnerbrosrecords.com/)、賽門鐵克社群 (http://www.symantec.com/connect/) 等等。


活動資訊

日期：2012 年 11 月 17 日  星期六
時間：13:00 ~ 17:00
報名網址：http://www.accupass.com/go/drupal
專題演講：
    ＊13:50 ~ 14:30 專題演講 I - 善用Drupal啟動你的精實創業 (Joshra)
    ＊15:00 ~ 15:40 專題演講 II - 為客戶打造專屬網站管理介面 (Bobju)
地點：高雄樹德科技大學推廣教育中心（中正分部）
地址：802 高雄市苓雅區中正二路 30 號 8 樓
捷運：高雄捷運橘線文化中心站 (O7) 四號出口
_______________________________________________________________

■ [源碼新聞] 第一屆台灣開放街圖研討會即日起開始報名！

鄧東波／文

開放街圖 (OSM) 計畫已經台灣進行多年，隨著開放街圖在全球知名度大開，台灣的製圖參與者 (Mappers) 與日增多， 台灣開放街圖雖然沒有政府部門開放資料與製圖相關的商業團體支持，在製圖參與者 (Mappers) 一步一腳印地繪製，台灣地區資料量也日漸豐富，但相對於鄰近日本，以及歐美各國，台灣開放街圖仍然不足，亟需更多製圖參與者 (Mappers) 的加入。 台灣開放街圖一年約舉辦二次製圖者聚會（在 OSM 社群稱為 Mapping party），也極積參與各項活動與推廣，如參與今年的全球的開放街圖大會 (SotM 2012)，在今年的開源人年會 (COSCUP) 參展推廣，惟台灣開放街圖 (OSM) 目前缺乏系統性互動討論，以及更深入地對於技術發展、應用推動、和交流的平台，因此舉辦台灣開放街圖 (OSM) 研討會，冀期讓以社群為主的地圖成為產官學界共同討論的目標，達到概念性與技術性的交流，希望各界踴躍參與。


會議時間和地點：

時間：2012 年 12月15 (六)
地點：中央研究院人文社會科學研究中心一樓會議室 (http://osm.org/go/5i1r2ye4m--)
報名網址：http://www.openfoundry.org/tw/activities/details/348-sotm


發起人：

鄧東波
＊中央研究院資訊科學研究所 研究助理
＊荷蘭屯特大學地理資訊科學與地球觀測學院 (ITC) 博士候選人
＊dongpo.deng@gmail.com


主辦單位：
＊台灣開放街圖社群 OpenStreetMap Taiwan Community (http://openstreetmap.tw/)
＊中央研究院人社中心地理資訊科學研究專題中心 (http://gis.rchss.sinica.edu.tw/)
＊中央研究院資訊科技創新研究中心自由軟體鑄造場 (http://www.openfoundry.org/)


協辦單位：
＊中央研究院資訊科技創新研究中心台灣創用CC (http://creativecommons.tw/)
＊fertta.com (http://fertta.com/)
_______________________________________________________________

■ [源碼新聞] 2012 年十一月份社群活動列表

OSSF 電子報團隊／整理

十一月份的活動列表出爐囉！有興趣的朋友們請多多邀請您的朋友一同前往參與！另外，由於活動列表出來的時間比較早，若後續有活動希望也能一起做宣傳的朋友們，記得來信告訴我們喔！信箱：ossfepaper@openfoundry.org 。


2012 年 11 月活動

KuLUG 大高雄 Linux 使用者協會固定聚會（每週四，11/1、11/8、11/15、11/22、11/29）
地點：台灣高雄市左營區富民路 391 號
時間：19:00~21:30
活動資訊：http://kalug.linux.org.tw/

Hacking Thursday（每週四，11/1、11/8、11/15、11/22、11/29）
地點：台北市重慶南路一段 1 號 2 樓 (MarketPlace)
時間：19:30~22:00
活動資訊：http://www.hackingthursday.org/

MozTW Lab @ TP（每週五，11/2、11/9、11/16、11/23、11/30）
地點：台北市中山區民生東路二段 114 號（咖啡．銅號）
時間：19:30~23:00
活動資訊：https://groups.google.com/group/moztw-general

PHPConf 2012（11/3）
地點：台北市南港區研究院路二段 128 號（中央研究院人文社會科學館）
時間：08:30~17:20
活動資訊：http://phpconf.tw/2012/

2012 DRBL / Clonezilla 開發與使用者會議（11/3）
地點：台北市南港區研究院路二段 128 號（國立自然科學博物館立體劇場 (B1) 第二科學教室）
時間：09:30~16:30
活動資訊：http://events.clonezilla.org/reg/index.php

台中自由軟體愛好者固定聚會（單週一，11/5、11/19）
地點：台中市中港路二段60-3號（默契咖啡）
時間：19:00~22:00
活動資訊：https://groups.google.com/forum/#!forum/taichung-foss-fans-party

TOSSUG BoF（每週二，11/6、11/13、11/20、11/27）
地點：台北市南昌路二段 200 號 (Mix Coffee & Tea)
時間：18:00~21:00
活動資訊：http://www.tossug.org/

Taipei Wikipedia Moonthly Meetup: Writing Day 維基台北定期聚—假日寫作月聚（11/10）
地點：台北市大安區泰順街 60 巷 11 號（小哲食堂）
時間：14:00~16:00
活動資訊：https://zh.wikipedia.org/wiki/Wikipedia:WPTP-W

Taipei Wikipedian Weekly Meetup: Community Operation 維基台北定期聚 — 社群經營工作雙週聚（雙週一，11/12、11/26）
地點：台北市松山區民生東路三段 140 巷 11 號
時間：18:00~20:00
活動資訊：http://zhwp.org/zh-tw/WP:WPTP-S

Hackathon in Taichung (HTC) meetup（雙週四，11/15、11/29）
地點：台中市中港路二段60-3號（默契咖啡）
時間：19:00~21:00
活動資訊：https://groups.google.com/forum/?fromgroups#!forum/hackathonintaichung

Drupal 2012高雄研討會：從網站開發到資料管理（11/17）
地點：樹德科技大學推廣教育中心（中正分部）
時間：13:00~17:00
活動資訊：http://drupaltaiwan.org/forum/20121017/6578

WoFOSS 好自由小組聚會（11/21）
地點：伯朗咖啡-北科大店（台北市忠孝東路三段 52 號 1 樓）
時間：19:30~22:00
活動資訊：http://wofoss.blogspot.tw/
_______________________________________________________________


□ 關於本報 □__________________________________________________

◎ 主編︰洪華超
◎ 法律專欄編輯︰葛冬梅
◎ 技術編輯︰曾義峰
◎ 執行編輯︰王怡凱、林誠夏、林珈宏、陳蕙蓁、彭冠雯
◎ 外稿編譯︰黃湘婷、黃郁文、蕭惟杰、謝良奇

本電子報自行採訪、報導、編譯、撰寫文章之智慧財產權屬於中央研究院，採用創用 CC「姓名標示－禁止改作－非商業性」授權條款臺灣 3.0 版授權散布，歡迎在不變更內容的前提下，以任何形式重製與散布本報，但必須遵守下列義務︰（1）不得為商業目的之利用；（2）必須標明本電子報智慧財產權屬於中央研究院；（3）完整引用本著作權說明。

若欲以創用 CC「姓名標示－禁止改作－非商業性」授權條款臺灣 3.0 版以外的方式利用上述文章，請與自由軟體鑄造場編輯群（ossfepaper at openfoundry.org）聯絡。

非自由軟體鑄造場自行撰寫的單篇文章，其智慧財產權利屬於原作者所有，其以非專屬的方式授權予自由軟體鑄造場運用，而與本電子報其他文章併以創用 CC「姓名標示－禁止改作－非商業性」授權條款臺灣 3.0 版的方式進行散布。

若欲以創用 CC「姓名標示－禁止改作－非商業性」授權條款臺灣 3.0 版以外的方式利用個別作者的文章，請自行與該作者聯繫，或透過自由軟體鑄造場編輯群（ossfepaper at openfoundry.org）來轉發聯絡訊息。

授權條款全文請見︰
http://creativecommons.org/licenses/by-sa/3.0/tw/legalcode
授權條款簡介請見︰
http://creativecommons.org/licenses/by-sa/3.0/tw/deed.zh_TW

若欲訂閱本電子報，請至以下網址︰
http://www.openfoundry.org/tw/news

如欲取消訂閱這份電子報，可透過自由軟體鑄造場新聞首頁左上方之自動退訂機制︰
http://www.openfoundry.org/tw/news

或寄發電子郵件至︰ossfepaper@openfoundry.org，以進行人工退訂。
