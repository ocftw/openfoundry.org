________________________________________________________________

□■□ 自由軟體鑄造場電子報第 233 期 | 2013/12/24 □■□
________________________________________________________________

◎ 本期主題︰自由開源軟體預設的不附隨保證與擔保特性
◎ 訂閱網址︰http://www.openfoundry.org/tw/news/
◎ 下次發報時間︰2014/01/14

□ 本期標題 □__________________________________________________

■ [法律專欄] 自由開源軟體預設的不附隨保證與擔保特性

■ [源碼秘技] DOSBox Game Launcher－－方便玩 Dos 遊戲的前端介面

■ [源碼秘技] 使用 GnuPG 建立你的 PGP 金鑰， 讓別人能夠私密寄信給你

■ [自由專欄] Linux 核心社群的企鵝培育之路

■ [自由專欄] Linux 最佳實踐指南：資料安全

■ [源碼新聞] Big Data：你的基礎建設準備好了？

■ [源碼新聞] 來自微軟的開源技術仍舊超乎許多人想像

■ [源碼新聞] 以 Raspberry Pi 為基礎的孩童開源電腦套件正席捲 Kickstarter

■ [源碼新聞] Valve 加入 Linux 基金會

■ [源碼新聞] 2014 年一月份社群活動列表

□ 本期內容 □__________________________________________________

■ [法政專欄] 自由開源軟體預設的不附隨保證與擔保特性

葛冬梅／文

自由開源軟體在散布的過程中，並不收取使用上限定時間、範圍，與對象的授權金（註一），而雖然非授權金性質的其他收費名目是可以要求的，但在大部分的狀況下ー例如透過公開的網路空間平台提供下載，也不會收取其他費用，也就是原則上，自由開源軟體的授權人並不會因為散布自由開源軟體獲得任何的金錢利益，因此相對地，這些授權人並不承諾自由開源軟體的功能一定完美無缺、不會造成使用者有任何損失。這種不附隨保證或擔保承諾，是自由開源軟體的一大特性。不過，這樣的特性，並不等於自由開源軟體的授權人或使用者，可以免除遵守各國法律的強制規定與禁止規定，因此，當授權人或使用者違反法律的強制規定與禁止規定時，還是一樣必須依照法律的要求來負擔一定的責任。本文以下將會針對自由開源軟體這種不附隨保證與擔保的特性加以說明，同時也將舉例說明違反強制、禁止規定的狀況，以協助讀者更進一步了解自由開源軟體的授權特性。 

【基於衡平原則的不附隨保證與擔保條款】 

https://www.openfoundry.org/images/131224/nowarranty/lc_201312_img1.png
 ▲ 圖1：Apache-2.0 在第 7、8 條中規定不附隨保證與擔保條款。 

不附隨保證與擔保條款，通常存在於自由開源授權條款的最末部份，並且常會被冠以類似 "NO WARRANTY"、"DISCLAIMER OF LIABILITY"、"Disclaimer of Warranty" 或 "Limitation of Liability" 等文字的標題。這些條款的內容主要分為兩部份：一部份是宣示授權人僅就軟體現況的基礎 ("on an 'AS IS' BASIS") 來提供使用者利用，且不保證軟體具有特定的品質或功能；另一部份則是表達，授權人並不擔保使用者利用軟體時不會產生任何的金錢或其他實質損失。依據前者的宣示，若是一個自由開源軟體本身具有功能上或結構上的瑕疵，導致使用者無法順暢地利用該軟體，這時候使用者無法強制要求授權人必須修復軟體中的瑕疵，或者重新給予一個可以執行無誤的版本；而根據後者所表達的意思，若因為利用自由開源軟體而導致使用者電腦中的工作資料毀損，使用者必須支出額外的金錢來救回資料，或因此必須賠償工作客戶金錢損失，這些金錢支出與損害都將由使用者自己來承擔，自由開源軟體授權人不會賠償使用軟體而導致的損害。 

而自由開源軟體之所以會有這樣的特性，如本文一開始所提到的，是因為自由開源軟體的權利人並沒有透過散布軟體來獲得實際的金錢利益，相對地，授權人才會透過上述這類的免責條款，來明白表述其並不確保軟體具有一定的品質，以及不會擔保使用者受到實質損失的可能性。因此自由開源軟體這種預設不附隨保證或擔保的特性，其實是一種衡平原則的實踐，既然沒有金錢收益，授權人因此就不會針對軟體給予使用者相應保證或擔保的承諾。 
 
【後手使用者仍然可以收費方式來自行提供保證或擔保】 

不過既然不附隨保證與擔保是一種衡平原則的實踐，那麼若是有收受此自由開源軟體的後手使用者，或者原來的專案開發者，願意花費額外的時間與金錢來確保自由開源軟體使用上的品質，其當然可以在散布自由開源軟體時，以收取費用的方式，來提供取得軟體的更後手使用者一定程度的保證或擔保，以衡平其為了提供保證或擔保所付出的心力。例如：甲公司以自由開源軟體為基礎來替乙企業客製化內部管理系統，而在客製化的過程中，甲公司修補了此自由開源軟體專案的若干瑕疵，同時配合整套內部管理系統來優化軟體的執行速度，這時候甲公司可以先就其優化加值行為，來向乙企業索取承攬性質的服務費用，而為了確保其客製化出來的版本有著一定的穩定度，若乙公司也願意，甲公司便可向乙企業收取後續系統維護上的擔保費用，未來乙企業在利用這套內部管理系統時，若發生當機或者異常狀況，甲公司便須依約維修到正常為止，此外，若是契約中有額外述明，因為此客製化版本的使用，而導致乙企業儲存在系統中的資料流失，甲公司在一定條件下，也必須依約賠償相關的損失。

針對這樣的運用方式，GPL-2.0、GPL-3.0、Apache-2.0、MPL-2.0 與 EPL-1.0 等授權條款，均有明確的文字，表示使用者可以透過收取費用的方式來提供額外的保證或擔保（註二）。而這種保證或擔保費用的收取，更是自由開源軟體的客製化承包商，得以生財牟利的彈性化商業應用模式。 

值得注意的是，此類保證或擔保的承諾，是由特定使用者所自行提供，因此未來若是保證或擔保事由真的發生的話，也必須由這位特定的使用者自己來承擔保證或擔保責任，原自由開源軟體的授權人或其他的使用者，並不會連帶被課予這樣的保證或擔保責任。在一些授權條款中，有著明確的文字來闡明這樣的原則。所以若是因為某特定使用者額外提供的保證或擔保承諾，而使得授權人或其他使用者遭致損失或必須負擔額外責任的話，這位特定的使用者就必須協助授權人或其他使用者，來免於負擔這些額外的責任，而在授權人或其他使用者因此受有損失的情況下，這位特定使用者還必須要加以賠償這些無辜受殃者所遭遇的損失。 

https://www.openfoundry.org/images/131224/nowarranty/lc_201312_img2.png
 ▲ 圖2：Apache-2.0 在第 9 條中規定使用者不可以代表授權人或其他使用者提供保證或擔保承諾。 
 
【不附隨保證與擔保條款無法超越法律的強制與禁止規定】 

不過自由開源軟體這項不附隨保證與擔保的義務，並無法凌駕於法律規定之上，若遇到各國法律有強制或禁止規定，授權人或使用者必須負擔特定義務的時候，這時候授權人或使用者還是必須依照法律的規劃來承擔應負的責任。 

以我國民法關於出賣人的規定為例，凡是商品出賣人均負有瑕疵擔保責任，簡單來說，就是商品出賣人必須擔保所販售的商品具有所宣稱的功能，若是商品的功能沒有達到所宣稱的程度，對於購買者來說，這就是一個有瑕疵的商品，購買者可以向出賣人提出退貨、減價或換貨的要求。因此若販售者丙宣稱其商品具有某特定功能，當消費者丁將商品購買回去後，發現廣告上所宣稱的某特定功能無法運作時，丁可以要求丙更換另外一個運作正常的商品，若丙因為執行該特定功能的是自由開源軟體元件，而對消費者表示不保證商品品質，同時拒絕更換商品的話，那麼丙就違反了民法對於出賣人課予的強制規定，消費者丁可以據此來控告商品的販售者丙（註三）。 

另外，我國刑法自民國 92 年起，在第 36 章中規定有妨害電腦使用相關的刑事罪責，其中開發電腦病毒或木馬程式，進而導致他人產生損害，是被法律明文禁止的不法行為，開發者一旦違反，可能必須面對刑事責任。因此若開發者戊將木馬程式寫入自由開源軟體中，讓使用者己安裝、執行這個自由開源軟體的同時，會連帶植入木馬程式到其作業系統中，導致線上遊戲的帳號密碼因而外洩，導致己花費金錢所購買的網路虛擬寶物或貨幣被盜，使用者己將可以依據刑法第 36 章的相關規定，針對戊這種不法行為，向檢察官與司法警察官提出刑事告訴。此時，戊也並無法引用自由開源軟體不附隨保證與擔保的規定，來加以免除其所必須負擔的刑事責任（註四）。 

【結語】 

從本文的說明可以了解到，自由開源軟體這項不附隨保證與擔保的特性並非是絕對值，其是否完整生效，仍然要看個案的發展與具體的法律關係來定。首先，在商業行為裡，使用者可以透過收費來自行提高保證或擔保的承諾；其次，這項特性也無法用來免除授權人或使用者，在法律上必須遵守強制規定與禁止規定的義務。

---- 

註一：這邊主要是指不收取著作權授權金，不過，許多新近草擬的自由開源授權條款，例如：MPL-1.1、MPL-2.0、EPL-1.0、Apache-2.0、GPL-3.0等，也將軟體專利納入到授權範圍中，因此對於這些條款來說，所謂的不收取授權金也包括了不收取軟體專利的授權金在內。 

註二：這些條款的規定分別在：GPL-2.0 第 1 條第 2 項、GPL-3.0 第 4 條第 2 項、Apache-2.0 第 9 條、MPL-2.0 第 3.5 條與 EPL-1.0 第 4 條。 

註三：相關規定在我國民法第 354、364 條中。 
民法第 354 條： 
「物之出賣人對於買受人，應擔保其物依第三百七十三條之規定危險移轉於買受人時無滅失或減少其價值之瑕疵，亦無滅失或減少其通常效用或契約預定效用之瑕疵。但減少之程度，無關重要者，不得視為瑕疵。 
出賣人並應擔保其物於危險移轉時，具有其所保證之品質。」 
第 364 條： 
「買賣之物，僅指定種類者，如其物有瑕疵，買受人得不解除契約或請求減少價金，而即時請求另行交付無瑕疵之物。」 

註四：相關規定在我國刑法第 368、369、362 條中。 
第 358 條： 
「無故輸入他人帳號密碼、破解使用電腦之保護措施或利用電腦系統之漏洞，而入侵他人之電腦或其相關設備者，處三年以下有期徒刑、拘役或科或併科十萬元以下罰金。」 
第 359 條： 
「無故取得、刪除或變更他人電腦或其相關設備之電磁紀錄，致生損害於公眾或他人者，處五年以下有期徒刑、拘役或科或併科二十萬元以下罰金。」 
第 362 條： 
「製作專供犯本章之罪之電腦程式，而供自己或他人犯本章之罪，致生損害於公眾或他人者，處五年以下有期徒刑、拘役或科或併科二十萬元以下罰金。」 
_______________________________________________________________

■ [源碼秘技] DOSBox Game Launcher－－方便玩 Dos 遊戲的前端介面

林雪凡／文

軟體名稱: DOSBox Game Launcher
介紹版本: 0.77
官網: http://members.quicknet.nl/blankendaalr/dbgl/
授權: GPL-2.0+

喜歡老 DOS 遊戲嗎？

因為 DOSBox (http://www.dosbox.com/) 模擬器專案，現在您幾乎想玩任何 DOS 遊戲都不存在技術問題。DOSBox (http://www.dosbox.com/) 能夠幾乎百分之百模擬老式的 DOS 機器，讓您愉快玩您的舊遊戲。像我就三天兩頭將 X-COM: UFO Defence (http://en.wikipedia.org/wiki/UFO:_Enemy_Unknown) 和 Master of Orion II (http://en.wikipedia.org/wiki/Master_of_Orion_II:_Battle_at_Antares) 拿出來玩。

DOSBox 能讓夢想變成現實，但這個現實卻不怎麼方便，因為......你知道的，DOS 是一套基於命令行的作業系統，而 DOSBox 用心模擬出來的自然也是同樣類型的東西。更別說宿主機與模擬機之間需要進行設定與橋接，搞得每次玩個遊戲還要調東調西，mount 來 mount 去，煩都煩死......

為此我們需要一個方便大家玩遊戲的簡單前端。

DosBox 能用的前端不少，好不好用也差距很大。我試用了幾款後，覺得還是本回的主角 DOSBox Game Launcher (http://members.quicknet.nl/blankendaalr/dbgl/) （以下剪稱 DBGL）最方便好用了。


下載安裝

請前往 DBGL 官網下載 (http://members.quicknet.nl/blankendaalr/dbgl/)。下載位置下方有幾個欄位，Windows、Mac、Linux 都有不同的下載包可抓。下載按鈕下方還有一行簡短的執行方法，都非常簡單，照做即可。

DBGL 是一款 Java 軟體，所以請先預備好 JRE 再執行它。也不需要另行安裝 DOSBox 主程式，DBGL 程式中已有內建。

進入 DBGL 後如果沒有顯示中文介面的話，在【File】→【Preferences】→【General】→【Internationalization】中選擇中文，關閉重啟就能看到全中文化的介面了。中文化程度很完善，推薦使用。


加入遊戲

DBGL 的進入畫面如下：

(https://www.openfoundry.org/images/131224/DBGL/DBGL_start_01.jpg)
▲ 圖1：DBGL 啟動後畫面。

畫面中間的空白區域會表列出您設定好的遊戲，想要時只要雙擊就可以玩。當然剛裝好時還空空如也，啥也沒有。

就來設定一下吧。


加入一個已經安裝好的遊戲

假設您擁有一個已經安裝好的 DOS 遊戲資料夾，則 DBGL 的設定程序是非常簡單的。

＊首先，請將您 DOS 遊戲的資料夾，搬到 DBGL 的 dosroot 資料夾底下。
＊點擊【添加配置文件】按鈕。
＊輸入【標題】
＊（可選）按右側的【參看 XX】按鈕
＊切換到【裝載設備】頁籤（最後一個頁籤），按右上角處的添加。讓左側出現 mount C "." 的文字。
＊在【主程序】欄位右側按【瀏覽】按鈕，選擇 dos 遊戲的執行檔。
＊按最下面的【確定】按鈕。完成設定

絕大多數的遊戲這樣設定過後就可以跑了。

請回到原本的主畫面，在新加入的遊戲上面雙擊，或按下右鍵選擇執行。試試看能不能動。

為什麼要把遊戲搬到 dosroot 下？

(https://www.openfoundry.org/images/131224/DBGL/DBGL_dosroot_02.jpg)
▲ 圖2：dosroot 是 DBGL 預設的遊戲資料夾放置位置，可放下諸多遊戲。

DBGL 官方強烈建議將所有 DOS 遊戲資料夾安放到 dosroot 資料夾下，這樣能讓 DBGL 得到更強的跨平台能力。簡單說來，將 DBGL 程式移動到不同的資料夾、不同的磁碟、不同的系統時，都無需修改任何現有的遊戲設定。

不過如果您不在意這種可搬移性，DBGL 也能支援其他路徑，但【裝載設備】時，您得自己留意裝載位置是否適當。

抓取 Meta Data？

(https://www.openfoundry.org/images/131224/DBGL/DBGL_metadata_03.jpg)
▲ 圖3：輸入遊戲資料，其中只有遊戲標題是必要且需手動輸入的。一旦您輸入了遊戲標題，其他資料都可以試著按按鈕從網路上抓取看看，看能否自動抓下來。

剛剛提過的【參看 XX】按鈕，可以讓您透過網路上的一些老遊戲網站抓取 DOS 遊戲的 Meta Data。您可以藉此快速設定好各種資訊欄位，像是開發商、發行年代、遊戲簡介與截圖等等。

但是如果是中文遊戲，那就多半抓不到資料，畢竟那些網站都是外國人在寫在收集資料......中文 Meta Data 的大業尚需大家共同努力才行！

那麼，想要玩遊戲，Meta Data 很重要嗎？非得要輸入 Meta Data 才行嗎？

答案為否，對於玩遊戲而言，它並不重要也不必要。您無需強迫自己填入那些空格。嫌煩的話留空就可以了。除了標題是必須的以外，其他資料不影響遊玩，跳過即可。


其他遊玩技巧

以上說明了 DBGL 最簡單的用法，但以下還有一些其他內容可能可以幫上您的忙。



關於不同等級的電腦硬體模擬

玩家可針對不同的遊戲，讓 DOSBox「模擬不同等級的電腦硬體」。

(https://www.openfoundry.org/images/131224/DBGL/DBGL_profile_04.jpg)
▲ 圖4：設定個別遊戲所採用的 DOS 機器模版。

在「設定遊戲配置文件」的對話盒中，可在【常規】頁籤裡找到「電腦配置模版」，請選擇一個模版，並按下右側的【重新加載配置】按鈕進行確認，以後執行本遊戲時，就會自動套用這組模版的設定。

模版功能可以讓玩家快速地將 DOSBox 模擬為不同的 DOS 機器。它會變動頁籤中的諸多細項，從「執行週期」、「記憶體量」、「CPU 類型」甚至是「顯示模式」都會有影響。

有些遊戲必須要有特定的機器才能執行，如果採用了設計之外的機器，遊戲畫面或速度可能會出現異常，甚至根本無法啟動，此時您就可以透過「模版」來進行快速切換。當然，如果您有著相當程度的技術背景，也可以去個別頁籤中微調機器細部設定，嚐試各種組合，不過這就需要更多知識與測試了。

一般而言模版功能就已經很好用了，要調整機器性能時請優先試試這個。

稍稍提醒一下，玩 DOS 遊戲時並非設備愈先進愈好，適當才是最重要的。


預設模版

(https://www.openfoundry.org/images/131224/DBGL/DBGL_template_05.jpg)
▲ 圖5：主畫面模版頁籤。我的預設模版採用了 80486 66Mhz 組態。

您還可以切換到主畫面的模版頁籤，用滑鼠右鍵來指定「預設的模版」究竟要採用哪一個，如此一來，新建立的項目將會直接套用預設模版，而不用逐一手工指定。

您也可以在此設計自己喜歡的專用模版。


手動啟動

DBGL 允許您手動啟動。

(https://www.openfoundry.org/images/131224/DBGL/DBGL_manual_run_06.jpg)
▲ 圖6：在項目上按右鍵就能選擇手動啟動。

所謂手動啟動就是說，您可以用您設定的機器參數來啟動 DOSBox，並掛載起所有該掛載的東西，但是偏偏在執行主執行檔之前停下來，讓玩家手動輸入執行指令如 play.exe 來執行遊戲。

這能用在諸如：


＊執行檔有很多，不太確定要執行哪一個，正在嘗試時。
＊需要先執行 SETSOUND.exe 之類的程式幫遊戲設定一下音效卡時。
＊想要除錯時。

......等等比較特殊的狀況下。

雖然是些特殊狀況，不過對於老遊戲來說，不時還是有必要處理一下的。不用去煩那些手動掛載資料夾等無聊前置作業就能立刻開工工作，相當方便順手。


多 DOSBox 版本支持

(https://www.openfoundry.org/images/131224/DBGL/DBGL_dosbox_version_07.jpg)
▲ 圖7：您可以選擇不同的 DOSBox 版本。圖中我把本機安裝的 DOSBox 也加進去了。

針對同一份 DBGL 前端，玩家可以設定多套不同版本的 DOSBox 作為執行遊戲的後端，來因應不同狀況選擇使用。比方說 64 bit 版本與 32 bit 版本可以用在不同的電腦上，而 0.74 版本與 0.73 版本對於少數遊戲的支援狀況也不近相同。適度切換 DOSBox 往往可以幫您解決問題。

您可以把多份 DOSBox 主程式放在 DBGL 資料夾底下，讓任何平台的玩家都能自由選用。（註一）

如果玩家想要用非預設的 DOSBox 版本來執行遊戲，請先在主畫面上對要執行的遊戲按下右鍵，然後選擇不同的 DOSBox 版本來啟動。

遊戲進行時常用的熱鍵

這些熱鍵與 DBGL 無關，是屬於 DOSBox 的，不過為了方便大家參考一併簡列於下：

＊Ctrl + F12 機器加速
＊Ctrl + F11 機器減速
＊Ctrl + F10 滑鼠釋放
＊Ctrl + F9 強制關閉程式
＊Alt + Enter 切換全螢幕
_______________________________________________________________

註解：

註一：關於如何收集各種不同平台及不同版本的 DOSBox 執行檔，其方法多不勝數，但大都相當瑣碎麻煩，此處不細講。
_______________________________________________________________

■ [源碼秘技]  使用 GnuPG 建立你的 PGP 金鑰，讓別人能夠私密寄信給你

洪朝貴／文 

◎本文原載資訊人權貴，原文章連結：http://newtoypia.blogspot.tw/2013/12/gnupg-pgp.html。

捍衛私密通訊權利的最佳方式，就是加密。以簡訊／即時通軟體來說，自由軟體界的大大們共同推薦「支援 OTR 的通訊軟體」；以 e-mail 來說，那就非 PGP (https://zh.wikipedia.org/wiki/PGP) 莫屬了。1991 年時，反核運動人士 Phil Zimmermann 為了保護社會運動人士的私密通訊權，撰寫了這套加密軟體並釋出。在 linux 上，我們採用自由軟體基金會所撰寫的版本 Gnu Privacy Guard。你可以用 Gnu Privacy Guard (GnuPG) 建立自己的 PGP 金鑰， 方便別人能夠私密寄信給你。本文假設讀者已有非對稱式加解密 (http://newtoypia.blogspot.tw/2010/09/asymmetric-cryptography.html) 的粗略概念，並且在 linux (antix 13.1) 命令列上面操作。如果要使用圖形介面，可安裝 kgpg 套件。至於在 Windows 上，可以參考島民 No.86991066 所寫的一篇很詳盡的中文教學 (http://www.gpg4win.org/)，解釋如何使用 Gpg4win。建議兩三個人同時閱讀本文，並且在各自的電腦上實驗，用對方的公鑰加密一段文字寄給對方。

一、建立金鑰

建議讀者：第一次（沒有要公開的）實驗先不必太認真，隨便取個使用者 ID 與密碼即可。等實驗全程走完，了解所有動作之後，再用強度夠高的密碼重新建立一對真正要用的金鑰。下 gpg --gen-key 指令產生你的一對金鑰。然後你會被問幾個問題：選取金鑰種類（加密演算法）、金鑰長度、有效期限。如果你用的是 linux 或 openbsd 等等開放原始碼的作業系統，都選預設值就可以了。如果你的作業系統是 windows 或 Mac OS... 因為 Snowden 爆料 NSA 在 RSA (http://ckhung0.blogspot.tw/2013/08/openbsd-fbi-rsa-securid.html) 跟 Windows (http://ckhung0.blogspot.tw/2013/07/nsakey.html) 的亂數產生器裡，都有植入後門；我猜把 GPG 移植到 windows 與 Mac 的自由軟體人士應該不會那麼不小心上當；不過為了保險起見，還是建議選取「DSA 和 Elgamal」而不要選取「RSA 和 RSA」好了。

再來會被問到真實姓名、電子郵件地址、註釋。回答完這三個問題後，你輸入的資料會被合併成一個字串，也就是你的使用者 ID。例如你若分別回答 "史奴比 Snoopy" 、 "snoopy@ somewhere.out.there" 、 "萬人迷" （都不要打引號），那麼你的使用者 ID 就是 "史奴比 Snoopy（萬人迷）「snoopy@somewhere.out.there」 ;"。這個字串就像是你自選的一組電話號碼，或是自選的註冊代號，但也要考慮你希望別人如何能夠搜尋到你。所以建議拿你在網路上常用的代號來填「註釋」。（以我而言，當初應該要寫「資訊人權貴」才對。）其實你若不想用真名也沒人會管你；不過「給真名」應該是博取網友信任的重要基礎吧。

二、保管金鑰

在 linux 底下，新建立的金鑰會放在 ~/.gnupg 資料夾裡面。這些檔案請備份好；但不要讓別人任意取得。就把它當做鑰匙來保管咩。

如果你怕未來有一天你忘記密碼，可以趁現在先產生一份「撤消憑證」 revocation certificate： gpg -o revoke-snoopy.asc --gen-revoke 史奴比把產生出來的 revoke-snoopy.asc 當成像是私鑰一樣地安全保存好。將來真的忘記密碼，需要撤消時，再拿著這個撤消憑證來研究這一篇 (http://www.hackdiary.com/2004/01/18/revoking-a-gpg-key/) 。 

三、釋出你的公鑰

如同白話非對稱式加解密 (http://newtoypia.blogspot.tw/2010/09/asymmetric-cryptography.html) 一文所解釋，你必須把你的公鑰分享出去，別人才能用它加密郵件，寄私密訊息給你。所以請： gpg -ao snoopy.asc --export 史奴比注意：這裡的「史奴比」也可以改用「snoopy」或「snoopy@ somewhere.out.there」等等，總之就是你的使用者 ID 的子字串就可以了。這個匯出 (export) 的動作會產生一個 snoopy.asc 裡面就是你的公鑰。目前你先跟同組的朋友交換就好；等你照著本文重做幾次，覺得很滿意自己所設的使用者 ID 與密碼之後，可以貼在自己的網頁上，甚至上傳到金鑰伺服器昭告天下 (http://www.gentoo.org/doc/zh_tw/gnupg-user.xml#doc_chap3)。

四、加解密郵件內容或附加檔案

假設你的朋友查理布朗也建立了他專屬的金鑰，並且把他的公鑰放在 charlie.asc 檔案裡面分享給你。那麼你可以把他納入你的「知道的人」的清單： gpg --import charlie.asc 這個「匯入（import）」的動作，會把他的公鑰加入你的公鑰清單 (pubring)，這僅僅表示：「我知道有這一號人物」而已。至於他知不知道你？那就要看他有沒有匯入你的公鑰了。又至於如果你想進一步告訴 gpg 「我信任他」，那就要簽署他的金鑰 (http://fourdollars.blogspot.tw/2009/08/gnupggpg-gpg-key.html)；不過貴哥並沒有這麼認真地在使用 gpg，所以從來還沒簽署過。以上的匯入及簽署都只需要做一次。

以後要傳送加密郵件， 就很簡單了。 比方說你要把 secret.tgz 這個壓縮檔加密， 並寄給查理布朗， 那麼可以這樣下： gpg -ear 查理布朗 secret.tgz.asc 這會產生一個文字檔 secret.tgz.asc 你可以把它的內容貼到 e-mail 裡面， 寄給查理布朗。 查理布朗收到之後， 再把那段內容在他的電腦裡貼成一個文字檔 secret.tgz.asc 然後就可以 gpg -d secret.tgz 回答完密碼後（全世界只有他知道的密碼），就會得到原始的 secret.tgz。即使你的 e-mail 經過許多網站、就算是 NSA 或黃世銘在這些網站佈下側錄封包的監聽爪牙，也無法看懂你寄的文件：-）以上步驟適用於文字檔或各種二進位檔（壓縮檔/圖片/聲音/影片/執行檔/...）。

五、更多教學文

其實網路上早就有很多教學文；我這篇只是想把整個過程寫得比較白話而已。此外，GPG 也可拿來製作數位簽章。想要更深入學習，可以參考：

1.GnuPG Gentoo 使用者指南 (http://www.gentoo.org/doc/zh_tw/gnupg-user.xml)（很詳盡的中文教學文）
2.Gnu 隐私卫士（GnuPG）袖珍 HOWTO (http://www.gnupg.de/howtos/zh/index.html)（翻譯自官網的簡體中文版手冊）
3.GNU PG HOWTOs (http://www.gnupg.org/documentation/howtos.html）（官網文件索引， 包含許多文件的各種語言連結）
4.GPG Tutorial（跟我的文章一樣比較口語化， 但豐富很多的英文教學文）
5.GnuPG（GPG）In Win32 免費檔案加解密軟體概念與常用指令 (http://polinwei.blogspot.tw/2013/06/gnupg-gpg-in-win32.html)（中文， 如何在 windows 底下使用指令版）
_______________________________________________________________

■ [自由專欄] Linux 核心社群的企鵝培育之路

謝良奇／編譯

Linux 核心是目前最大且最成功的開放源碼專案之一。以撰寫 Linux 的開發者為調查重點，來自 Linux 基金會 (Linux Foundation) 一份報告指出，近來以 70 天為間隔所釋出的 Linux 核心，包括超過 1 萬個程式修補，由代表 225 家公司超過 1100 位開發者所開發。

從 2012 年 4 月前一版報告發表以來，已經合併了來自代表 536 家公司 3738 位個別開發者，共近 9 萬 2000 個變動集 (changesets)，增加了近 2 百萬行程式碼。累計起來，Linux 核心已經是 1 萬 1000 位開發者，20 年以來共同合作的成果。

這種活動參與和數量的層級是前所未見的，也成為了多數開放源碼專案心嚮往之的一種典範。Linux 與核心社群掌握了很好的時機，且隨著時間過去不可避免的會產生改變。這是件好事。

其中一項改變是，如今 Linux 核心社群的成員組成，已經和過去有所不同。

在 Linux 協同合作大會 (Linux Collaboration Summit) 舉行的一次專題會談中，Linux Weekly News 執行主編 Jonathan Corbet 向一群頂尖 Linux 核心開發者提問：Linux 核心開發者團隊是不是太老了？他針對後續各世代開發者的數量作出觀察。

最近，針對 Linux 核心 Git 代碼庫的貢獻，軟體開發分析公司 Bitergia 在進行分析後發現：

＊世代有越來越縮小的趨勢，從 2005 年約 100 至 150 名到 2013 年每季 30 至 50 名。
＊較早的世代變得較不活躍。
＊年輕世代比起 6 年前要來的小很多。


這個大型社群活力的延續不會自動發生，相反的，它需要社群成員對於如何引進新貢獻者，以及如何加以訓練並和有經驗的開發者相互整合，多加投入與重視。

正如 Red Hat 執行長 Jim Whitehurst 最近在部落格上表示，人們過去投入參與，不表示他們未來會繼續參與。這份吸引力必須不斷加以鼓勵和培育好讓參與得以持續。

因此 Linux 基金會與 Linux 社群中的其他人，正透過一些活動讓新的開發者參與核心開發。例如，贊助業餘開發者參加核心大會，並且在 LinuxCon 議程增加下列活動：

＊新人接待：讓新的與會者有機會關鍵 Linux 核心貢獻者會面。
＊開放源碼女性午餐：讓開放源碼界的女性有交流機會，彼此連接並相互學習。
＊獎學金，針對有意參加 LinuxCon 與 CloudOpen，但沒有公司贊助或個人沒有資金與會的女性。


這份來自 Linux 基金會的 2013 年報告也提到：核心專案首次參與女性拓展計劃 (Outreach Program for Women)，針對 7 個空缺職位有 41 份申請。在申請過程中，374 個程式修補被提交到核心中，超過 1/3 的修補被 3.10 核心釋出所接納。

女性拓展計劃是如此成功，舉例而言，她們對 3.12 核心的貢獻，在頂尖的貢獻組織中依程式碼行數計算，排名第 11，在 IBM 與 Samsung 之上。

這些計劃的重要面向之一，是為加入 Linux 核心社群的新開發者，降低進入、技術、文化的門檻。Linux 核心主要開發者之一也是目前穩定分支維護者，並撰寫過 Linux Kernel in a Nutshell 一書的 Greg Kroah-Hartman，就是個好例子。Greg 解釋道：

我希望這本書有助帶領更多人加入 Linux 的核心開發。為你的機器建構客制化核心，是成為 Linux 核心開發者的一項基本要求。越多人加以嘗試，並瞭解 Linux 核心程序背後並無任何魔法可言，就會有越多人加入並協助讓核心變得更好。

Greg 也觀察到許多 Linux 核心專案，像是他自己的 Linux Driver 專案，對於參與開發的開發者並無太多要求，只要他們的設備驅動程式有正確的開放源碼授權，且他們的軟體可以順利編譯。特別是，要讓程式碼進入 staging-tree 核心不需任何門檻。

一個自然鼓勵年輕人參與 Linux 核心開發的方式，是深入大專院校舉辦訓練活動，讓學生與教師學習如何向核心進行貢獻。這些活動可以特別著重在了解此一過程，以及核心的管理。在與其他開放源碼愛好者的合作下，我們在兩個大學課堂上引入了訓練活動，並將回饋這些經驗至 Opensource.com。

◎本文翻譯自 opensource.com，原作者為 Luis Ibanez：
http://opensource.com/education/13/11/linux-kernel-community-growth
_______________________________________________________________

■ [自由專欄] Linux 最佳實踐指南：資料安全

謝良奇／編譯

開放性有時會讓剛接觸開源軟體的人，產生安全問題上的疑慮。有些人認為 Linux 散佈套件的推陳出新，意味著缺乏標準化，在安全架構與系統管理上，也沒有最佳的實踐標準。

事實上，開放性與大量出現的不同專案其實是優點。上至 Linux 下至小應用程式的開源專案，都會受到開發者不斷地檢視並加以改進。也就是說有許多雙眼睛在審視這些程式碼，他們都想看到這些程式碼順利運作。

Linux 資料安全確有標準存在，主要就是最初由美國國家安全局開發，於 2000 年公開釋出的 Security Enhanced Linux (SELinux)。其他也有像是 ISO 27001、PCI DSS 等中立於平台之外的標準。不過如果不付諸實用，有了這些工具也毫無意義。

常見的問題出在當 Linux 被不同團隊在不同時間，出自不同目的而部署於資料中心各處時，其組態配置所出現的差異。實作並維護適當的安全措施於是變得很棘手。這是風險所在，特別是今日的 IT 基礎架構乃是奠基在廣泛的分散式網路，這為入侵者提供了企業系統與資料的現成進入點。

標準化是關鍵之處，確保安全標準貫徹應用於 Linux 設計、部署、維護過程中。有三項基礎：

＊標準作業環境

標準作業環境是一套經過仔細定義的核心建構規格，能協助組織為依據其不同硬體平台、企業應用與工作負載，實作安全且經優化 Linux 系統，發展出一套可重複的流程。核心建構讓系統能迅速且一致地以安全的方式進行部署。
    
＊標準作業環境管理平台

標準作業環境管理平台是例如像 Red Hat 的 Satellite 伺服器與 Puppet 這樣的一系列技術，讓系統管理者有辦法輕鬆將重複工作自動化，並快速部署與有效管理標準作業環境與其安全性。標準作業環境管理平台能大幅降低核心建構安全性、部署和維護週期的運作成本。

＊最佳的系統管理程序實踐

為了維護 Linux 資料安全，安全管理必須成為 FCAPS 等所有管理方法論的關鍵組成部份。

除了標準作業環境管理平台，像是 Centrify 等技術提供了有組織的辨識與存取管理方法，帶來更強大的安全性，更符合規格要求並降低營運成本。

你需要做的是：

＊在設計與設定 Linux 建構時以安全為優先
＊建立並維護最佳的安全組態
＊及時安裝支援修補和安全更新
＊監視並回報安全組態異動
＊嚴密網路與用戶存取
＊用戶集中管理與認證服務
＊使用日誌紀錄與稽核以提供品質保證與標準相符性
＊定期檢視政策與程序
＊在核心建構組態管理與部署上，挑選像 Puppet 與 Satellite 伺服器這樣的系統管理工具，為用戶認證選擇類似 Centrify 的工具，在監控上選用 Nagios 等工具。


◎本文翻譯自 Linux IT，原作者為 Simon Mitchell：
http://www.linuxit.com/blog/bid/324262/Best-Practice-Linux-Guide-Data-Security?utm_source=feedburner&utm_medium=feed&utm_campaign=Feed%3A+LinuxIT+%28LinuxIT+Blog%29
_______________________________________________________________

■ [源碼新聞] Big Data：你的基礎建設準備好了？

謝良奇／編譯 

找到專業的 Linux 合作夥伴能有助於用戶延展 IT 基礎架構，以應付現在和未來的 Big Data 浪潮。

Big Data 是 IT 領域中定義最不明確的術語之一，而且其定義不僅僅與規模大小有關，因為如果只是這樣的話，那麼擴充到更大、更快的伺服器就能解決問題了。資料規模 (volume)、多樣性 (variety)、即時性 (velocity)，逐漸構成 Big Data 的定義。

規模，很顯然的，就是海量資料。多樣性這裡指的是，資料的形式不一定能夠簡單地置入預先定義好的 SQL 資料庫表格中。舉例來說，傳感裝置的數據、網路應用程式的點擊、部落格的網頁、合約與其他商業文件，這些資料在形式上都各不相同。而這些各類型的資料正向你快速襲來，這就是即時性。

像是 MongoDB 這類的 NoSQL 資料庫正是專門設計來處理上述三個 V。例如 "The Wall"，這是由美國保險公司 MetLife 基於 MongoDB 所開發的創新客戶服務應用程式。有著類似於 Facebook 的使用者介面，The Wall 針對 MetLife 客戶提供整合性的檢視，包括政策細節和跨所有業務線的交易，因此客服人員能夠在單一介面中，取得所需全部資訊。The Wall 負責處理 4500 萬個客戶協議。

MongoDB 公司是 Red Hat 的軟體合作夥伴。Red Hat 與 MongoDB 共同優化 MongoDB 在 Red Hat Enterprise Linux 上的部署。Red Hat 也是 MongoDB 公司的策略投資者。

Big Data 作為一項新科技，客戶需要強大合作夥伴，並與其廠商間建立良好關係，以建立與維護大數據應用程式。MongoDB 是主要的 NoSQL 資料庫並運行在各大 Linux 散佈套件上，但僅有少數組織有專業能力，適當安裝與設置線上環境，並建構自有應用軟體。他們需要專業的技術夥伴提供協助。正如 10gen 業務發展總監 Luca Olivari 最近所指出的，熟知該技術、熟悉其架構與地方夥伴關係的公司，是你交付成功專案的必要條件。

相對於因應大規模資料而擴展硬體設備時，會需要非一般用途的硬體，NoSQL 上的 Big Data 系統，通常能夠運作在數據中心、雲端或混合雲中的常用硬體上。但這並不表示硬體選擇與組態不重要。將現有與擬建的 Linux 基礎架構，交由 Linux 專家進行稽核，對於該系統針對預期工作量的優化而言，十分重要。

當然，並不止於此。Big Data 還會更大，NoSQL 系統特別用來接納新的資料流，不僅僅是取得更多，而是更複雜的資料。與 Linux 專家建立強有力的合作關係，能幫助客戶按照所需擴展其 Linux 基礎架構。

◎本文翻譯自 Linux IT，原作者為 Simon Mitchell：
http://www.linuxit.com/blog/bid/320542/Big-Data-Is-Your-Infrastructure-Ready?utm_source=feedburner&utm_medium=feed&utm_campaign=Feed%3A+LinuxIT+%28LinuxIT+Blog%29
_______________________________________________________________

■ [源碼新聞] 來自微軟的開源技術仍舊超乎許多人想像

謝良奇／編譯

每過一段時間，最好回想起，微軟 (Microsoft) 這間大公司是由許多個人組成，他們擁有不同偏好、觀點、策略，特別是涉及開放源碼時。

正當這間公司一面為了聲稱的智財侵權而持續向 Android 開發者追討之際，同時也藉由提供開放源碼工具與技術，試圖滿足開發者的要求。

就在不久前，微軟剛釋出 Visual Studio 2012 與 2013 的 Node.js 插件 alpha 版本。而再前一週，微軟的 ASP.Net 團隊成員在一則 Reddit Ask Me Anything (AMA) 裡，談到他們的某些專案。這些 ASP.Net 團隊成員表示，他們其中許多人在微軟待了 5 年或更短。不過他們開源了 90% 的 ASP.NET、MVC、Web API，整個 Entity 框架、SignalR、VS Web Essentials 等等。他們也把所有 Azure SDK 開源在 GitHub 上。

Scott Hanselman 身為參與這次 Reddit AMA 的團隊成員之一，他在部落格上表示，Visual Studio 的 Node 工具一開始就採取開放源碼，並且在初期就開始接受貢獻。該工具支援編輯、Intellisense、效能分析、npm、本地與遠端除錯，以及發佈至 Azure 網站與雲端服務。

微軟從 2011 年就開始與 Joyent 合作讓 Node.js 在 Windows 和 Azure 上運作。Node 是一套使用 JavaScript 作為腳本引擎的工具與框架。

Hanselman 日前還分享了一張投影片，其中列出 Visual Studio 2013 使用到的部分開放源碼技術。令人印象深刻。

微軟還有更多技術，特別是在應用程式開發與 Web 開發領域，採用了開放源碼授權。微軟的 JavaScript 擴充集合 TypeScript，採用 Apache 2.0 授權。HDInsight for Windows Azure 則是 100% 的 Apache Hadoop。最近該公司還允許 CodePlex 上的專案使用 GPLv3 授權。

還有，微軟正持續把某些自行開發的開放源碼專案移交給 Outercurve 基金會 (Outercurve Foundation)。並非該公司裡的每個人都認為，開放源碼與微軟一定要水火不容。

◎本文翻譯自 ZDNet，原作者為 Mary Jo Foley：
http://www.zdnet.com/microsoft-still-open-sources-more-technologies-than-many-think-7000023595/
_______________________________________________________________

■ [源碼新聞] 以 Raspberry Pi 為基礎的孩童開源電腦套件正席捲 Kickstarter

謝良奇／編譯 

當 Raspberry Pi 開發之初，創辦人 Eben Upton 設想這台低價電腦能在課堂裡有所發揮，作為孩童電腦教學之用。可是隨著裝置越賣越好，Raspberry Pi 卻在成人創作者之間，開拓出一個強大且獨特的利基市場。然而，這群富有創造力的人，與孩童這個年齡層並沒有多少交集之處。

Alex Klein 認為他公司的專案，以 Raspberry Pi 為基礎的 Kano，能夠為 Upton 的願景帶入新的活力，讓 Raspberry Pi（Upton 是 Kano 的顧問）重新回到課堂之上。Kano 共同創辦人兼技術長 Klein 表示，在 Raspberry Pi 上我們擁有靈活且能夠黑客的低價技術。但這些不足以如期望般吸引入門者與孩童的興趣。

Kano 是開放源碼的 Raspberry Pi 套件，其兩個直接目標是：讓設定 Raspberry Pi 像組合樂高玩具一樣簡單，以及，用這樣的電腦，讓孩童參與可在課堂或家庭進行的有趣且簡單的電腦課程。11 月 19 日在 Kickstarter 上展開募資後，事情進展地飛快。這個專案在 18 個小時內達成最初目標，且在本文撰寫之時，已經超越了籌資目標的 7 倍之多，不但 99 美元的所有 Kano 套件全數賣出，更將於未來募資活動結束後，打破 Kickstarter 令人羨慕的百萬大關。

Klein 表示，Kickstarter 募資活動的發起，顛覆了我們原先的預期，我們收到的回應來自各年齡層、全世界各地的人，他們紛紛表達對於製作一部電腦的興奮。我想他們的確對此有種潛在的渴望。

在這樣的成功之下，該團隊是否能夠兌現向近 7000 名支持者，所許下的承諾，Klein 顯然信心滿滿。Kano 已經花了一年時間在製作上，Klein 與共同創辦人 Yonatan Raz-Fridman 今年夏天，帶著 200 個原型套件環遊世界各地，並在 8 月時全數售出。

藉由讓孩童親自操作，該公司得以改進該裝置硬體，從一個大的棕色套件，變成更小更乾淨的盒裝系統，可攜性更高更具用戶親和力。此外，該公司也在優化 Kano 的軟體。Kano 每個套件都附有一張小的 SD 卡。其中主要的元件是編程環境 Kano Blocks，其中運用了區塊程式設計 (block programming)，將大的編程概念加以分解。

Klein 解釋說，該套件的建構給了進入點，但是我們進一步將其開展成，為時數十小時且能無限擴展的專案。所有你能夠用 Python 或 Javascript 完成的專案，也能夠轉換到這些 Kano Blocks，並輕鬆地建立。

由於其測試經驗，Klein 表示相信該團隊能妥善地處理後勤問題，許多大獲成功的 Kickstarter 硬體專案經常在此跌跤，像是製造上的問題、承包上的繁瑣細節等等小事，累積起來會讓專案從預計日期推遲許久。Raz-Fridman 在電郵中表示同意：

從 Kano 開始的第一天，我們就已經發展出執行、詳細規劃、管理他人與自我預期的 DNA，這一點協助我們在 4 個月內，從倫敦一間公寓內，設計、製作、出貨 200 個原型套件。我們已經學到如何快速執行並兌現承諾。我們努力設計了 Kano 的供應鏈，與正確的合作夥伴建立關係，最重要的是，我們對讓人們快樂充滿熱情，這始於滿足他們的期待。

該團隊希望能有更多資金挹注，Klein 表示募資活動將有新的延伸目標：

＊100 萬美元將協助該公司把 Kano Blocks 和 Pong Lesson 延伸到 Web 上。
＊150 萬美元將把 Kano Blocks 移植到 iOS 與 Android。
＊200 萬美元將協助提供附加的機器人套件，預計 2014 年感恩節推出。

Klein 談到，在他的遠大夢想中，Kano 不僅僅會成為教育下一代如何用電腦進行創造的工具，更能改變全球社群。他已經著眼於以 Kano 在機器人與電信技術上所做的為基礎，建構出擴展套件，帶來更多有用的工具。這樣的開放教育，藉著 Raspberry Pi 原先設定的目標，Klein 相信正是我們解決 STEM（科學、科技、工程、數學）問題的途徑。

◎本文翻譯自 GIGAOM，原作者為 Lauren Hockenson：
http://gigaom.com/2013/11/27/how-an-open-source-computer-kit-for-kids-based-on-raspberry-pi-is-taking-over-kickstarter/
_______________________________________________________________

■ [源碼新聞] Valve 加入 Linux 基金會

Kenneth Mak／文

◎本文原載 Linux Pilot，原文章連結：http://www.linuxpilot.com/industry/news/201312110101Valve-linux-foundation。

一直以來要在電腦上玩遊戲，使用 Windows 是唯一的選擇。但隨著遊戲開發商 Valve Software 宣佈加入 Linux 基金會，未來有部分遊戲都可以在 Linux 平台上執行。

(https://www.openfoundry.org/images/131224/2013112110101.jpg)

2013 年 9 月，Valve 就表示將推出以 Linux 為基礎開發的開源遊戲系統 SteamOS，Valve 成為 Linux 基金會的銀鑽會員後，每年將向基金會捐贈 5 千到 2 萬美元贊助費，以換取 Linux 基金會聘請社群的工程師，投入更多資源改良 Linux 在硬體方面的支援和執行效率，將 Linux 打造成 Windows 以外的另一個遊戲平台。截至目前為止，Valve 的 Steam 客戶端上已經有 200 多款遊戲運行在 Linux 平台上。Valve 的開發員 Drew Bliss 也表示 Linux 與微軟的 Windows 8 相比，更適合作為一個遊戲平台。

根據 Valve 的用戶數據，目前 Windows 的遊戲玩家明顯高於 Linux 玩家。當前的做法是 Steam 平台的用戶必須先安裝 Steam 客戶端，這個客戶端可以在 Linux、Mac OS X 或 Windows 上安裝。透過平台線上訂購並取得付費遊戲序號後，便可下載以及安裝。於 2011 年 4 月 Steam 更加入了與 PlayStation 3 帳戶連結的功能，可以實現 Steam 帳戶與 PlayStation 3 帳戶連接，使其實現跨平台遊戲配對、對戰、好友系統、聊天和成就等。PS3 上的 Steam 也可以把合作模式遊戲進度和單人遊戲存檔保存在 Steam 雲端，使玩家可以在任意 PS3 主機上繼續他們之前的遊戲進度。

長久以來 Linux 無法取代 Windows 的其中一個原因，是 Linux 無法玩在 Windows 上的熱門遊戲。從前在 PC 上玩遊戲的骨灰級玩家都會認同，當時為了玩某個遊戲，總會在電腦做一些特別的設定，對軟體和硬體的認識也是這樣建立起來的。能在 Linux 上玩遊戲，絕對是吸引人更多人學習 Linux 的動力。
_______________________________________________________________

■ [源碼新聞] 2014 年一月份社群活動列表

作者是 OSSF 電子報團隊／整理

又是新的一年！祝大家新年快樂！也請各位朋友繼續支持各地的自發性開源聚會活動哦！有興趣的朋友們請多多邀請您的朋友們一同前往參與！另外，由於活動列表出來的時間比較早，若後續有活動希望也能一起做宣傳的朋友們，記得來信告訴我們喔！信箱：ossfepaper@openfoundry.org。


MozTW Lab @ 基隆（每週三，1/1、1/8、1/15、1/22、1/29）
時間：19:00~21:00
地點：基隆市仁愛區港西街 4 號 1 樓（1915 海洋咖啡館）
社群網址：https://groups.google.com/group/moztw-general

KSDG 高雄開發者社群 (Kaohsiung Software Developer Group) meetup（1/2）
時間：19:00~21:00
地點：高雄軟體園區 B 棟 708 室（高雄市前鎮區復興四路 2 號 7 樓之 5）
社群網址：https://www.facebook.com/groups/KSDGroup

Hacking Thursday（每週四，1/2、1/9、1/16、1/23、1/30）
時間：19:30~22:30
地點：台北市重慶南路一段 1 號 2 樓（MarketPlace）
活動資訊：http://www.hackingthursday.org/

MozTW Lab @ TP（每週五，1/3、1/10、1/17、1/31）
時間：19:00~23:00
地點：Thé6 6号茶（台北市中正區新生南路一段6號2樓 ）
活動資訊：https://groups.google.com/group/moztw-general

MozTW + Arch Linux Lab（每週一，1/6、1/13、1/20、1/27）
時間：19:30~22:00
地點：新竹市北區勝利路195號新橋b3
活動資訊：https://etherpad.mozilla.org/moztw-lab-hc

TOSSUG BoF（每週二，1/7、1/14、1/21、1/28）
時間：18:00~21:00
地點：台北市中正區南昌路二段 200 號（Mix Coffee & Tea）
活動資訊：http://www.tossug.org/

Cocoaheads - Kaohsiung（1/9）
時間：19:00~21:00
地點：高雄軟體園區 B 棟 708 室（高雄市前鎮區復興四路 2 號 7 樓之 5）
社群網址：https://www.facebook.com/groups/cocoaheads.kaohsiung/

WoFOSS 第 40次聚會－性別、機器人與日常生活（1/9）
時間：19:30~22:00
地點：果子咖啡（台北市松山區民生東路三段 140 巷 11 號）
活動資訊：https://kktix.com/events/wofoss040-201401

台中自由軟體愛好者固定聚會（雙週一，1/13、1/27）
時間：19:00~21:00
地點：台中市中港路二段 60-3 號（默契咖啡）
活動資訊：https://groups.google.com/forum/#!forum/taichung-foss-fans-meeting
	
開發者忘年會 @台北（1/14）
時間：19:30~22:30
地點：台北市大安區光復南路 116 巷 9 號
活動資訊：https://kktix.com/events/devhappyday

KSDG web course（1/18）
地點：高雄軟體園區 B 棟 708 室（高雄市前鎮區復興四路 2 號 7 樓之 5）
社群網址：https://www.facebook.com/groups/KSDGroup
_______________________________________________________________

□ 關於本報 □__________________________________________________

◎ 主編︰洪華超
◎ 法律專欄編輯︰葛冬梅
◎ 執行編輯︰王怡凱、陳蕙蓁
◎ 外稿編譯︰林誠夏、黃郁文、謝良奇

本電子報自行採訪、報導、編譯、撰寫文章之智慧財產權屬於中央研究院，採用創用CC「姓名標示－禁止改作－非商業性」授權條款臺灣 3.0 版授權散布，歡迎在不變更內容的前提下，以任何形式重製與散布本報，但必須遵守下列義務︰(1) 不得為商業目的之利用；(2) 必須標明本電子報智慧財產權屬於中央研究院；(3) 完整引用本著作權說明。

若欲以創用CC「姓名標示－禁止改作－非商業性」授權條款臺灣 3.0 版以外的方式利用上述文章，請與自由軟體鑄造場編輯群(ossfepaper at openfoundry.org) 聯絡。

非自由軟體鑄造場自行撰寫的單篇文章，其智慧財產權利屬於原作者所有，其以非專屬的方式授權予自由軟體鑄造場運用，而與本電子報其他文章併以創用 CC「姓名標示－禁止改作－非商業性」授權條款臺灣 3.0 版的方式進行散布。

若欲以創用CC「姓名標示－禁止改作－非商業性」授權條款臺灣 3.0 版以外的方式利用個別作者的文章，請自行與該作者聯繫，或透過自由軟體鑄造場編輯群 (ossfepaper at openfoundry.org) 來轉發聯絡訊息。

授權條款全文請見︰
http://creativecommons.org/licenses/by-sa/3.0/tw/legalcode
授權條款簡介請見︰
http://creativecommons.org/licenses/by-sa/3.0/tw/deed.zh_TW

若欲訂閱本電子報，請至以下網址︰
http://www.openfoundry.org/tw/news

如欲取消訂閱這份電子報，可透過自由軟體鑄造場新聞首頁左上方之自動退訂機制︰
http://www.openfoundry.org/tw/news

或寄發電子郵件至︰ossfepaper@openfoundry.org，以進行人工退訂。