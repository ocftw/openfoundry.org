________________________________________________________________

□■□ 自由軟體鑄造場電子報第 228 期 | 2013/10/15 □■□
________________________________________________________________

◎ 本期主題︰給年輕開發者的 JavaScript 除錯手冊
◎ 訂閱網址︰http://www.openfoundry.org/tw/news/
◎ 下次發報時間︰2013/10/29

□ 本期標題 □__________________________________________________

■ [技術專欄] 給年輕開發者的 JavaScript 除錯手冊

■ [源碼秘技] KeePassX －－ 簡單易用的密碼管理軟體

■ [自由專欄] 亦敵亦友：智財法如何協助自由與開放源碼社群

■ [自由專欄] 排名前 20 個從 Windows 輕鬆轉換到 Linux 的祕技

■ [源碼新聞] 全球最小無人飛機自動駕駛系統採開放源碼

■ [源碼新聞] 孩子的程式教育不能等 - 開放源碼專案帶領小朋友走進程式碼的世界！

■ [源碼新聞] Valve 新推出的 SteamOS 將採用 Linux 挑起電視遊樂器大戰！

■ [源碼新聞] Android 開源韌體 Cyanogen 專案成立新創公司！

■ [源碼新聞] 開源平板在 JavaOne 登場

■ [源碼新聞] 跳出舒適圈，Yahoo! 黑客松 24 小時榨出你的腦力極限

□ 本期內容 □__________________________________________________

■ [技術專欄] 給年輕開發者的 JavaScript 除錯手冊

謝良奇／編譯 

我們最近完成了報社的實習計劃，這不禁讓我想起，當我還是年輕開發者時，有什麼是我想學的。答案是，我希望我更懂除錯。

如何使用各種瀏覽器開發工具之類的資源多不勝數，每天都有新工具出現。它們都很棒，作為一個多年前學過 JavaScript 的人，我很羨慕新開發者能有這些工具。在瀏覽器中設定中斷點，檢視環境中的所有數值，走訪傳呼堆疊，真是一大變革。

然而，你最強大的除錯工具其實是雙耳之間的腦袋。世界上所有神秘的除錯祕訣，都不足以取代你對自己所寫下程式的了解。

開發工作一定會犯錯

撰寫程式碼必定會犯錯。你所遇見最棒的開發者也要為臭蟲負責。他們坐在電腦前，搔著頭狐疑著，問題出在哪裡？

開發者通常認為寫程式就是解決問題，其實寫程式比較像是下廚。就像煮東西一樣，沒有完美的程式，只有比較好或比較差。你可以試試不同的香料，你可以用火雞肉取代雞肉，你可以用大火或小火。這裡沒有盡善盡美，只有盡力而為。晚餐在你開動之時就結束了。

要掌握除錯一事，你必須預期會有臭蟲存在。如果有人報告有臭蟲，你得接受它。有程式碼自然就會有臭蟲。

臭蟲來自何處

假如你是寫程式的新手，最可能造成臭蟲的，是你對平台的瞭解不足。如果你對陣列運作方式沒有精確的了解，你很可能錯用陣列，導致臭蟲。只有經驗能幫你。

這份手冊假定你已經有某種程度的專業知識，會有臭蟲並非因為你不了解特定功能的運作。別擔心，就算這樣你還是會製造臭蟲。

你可能會遇到兩種棘手的臭蟲：

＊容易疏忽的錯別字
＊錯誤的物件型別

每當你要說，我不了解為何 x 會，這樣的句子時，請停止，並回想起假如 x 做了某件事，那對 x 絕對是合理的。只是 x 的行為對你而言令人費解罷了。

從電腦與程式的角度來看，所有行為都正如預期。如果你不了解為何你的程式會有這個結果，問題出在你瞭解的不夠。

電腦永遠是對的。電腦永遠是對的。電腦永遠是對的。某個寫了 10 年以上程式的人說：這機器的運算機制沒有一次故障。

容易疏忽的錯別字

大部份的錯別字都很醒目，給出不存在的名稱，而丟出變數未定義的錯誤。你的工具會出現紅字，所以很容易抓到。有害的臭蟲來自打進一個定義過，但卻不是你想要的名稱或數值。你可以把 linter 納入你的工具中，不過不能依賴它來抓到所有錯誤。

例如說，你有一個雜湊。在 JavaScript 裡，雜湊中的變數如果沒有值的話，會傳回 null。如果這個值是個有方法的物件，呼叫不存在的物件應該會出現有意義的錯誤。四處出現的紅色錯誤很有幫助。不過如果你只是存取一個剛好是 null 的值，你可能會拿到不易追蹤的錯誤數學數值。我的 console 告訴我，null - 3 == -3。

錯誤的物件型別

在 Gmail 與 Facebook 的年代裡，用戶應用程式可能有成千上萬行程式碼，彼此間有複雜的物件階層。由框架控制器控制的傳輸物件，會遞交資料模型給模版引擎來呈現。

現代應用程式有許多物件型別，如果你剛好使用了錯誤的型別，如果型別彼此相似，又或者是其父或子類別的話，大部份會運作無誤，不過有些情況則不是這樣。重要的是檢查產生臭蟲的物件，是不是你預期中的型別，而在該物件內你使用的所有變數，其型別是否如你預期。

舉例而言，假設你把一些重要的資料存在某個雜湊裡。留意，以下的範例是 CoffeeScript，不過僅具示意性。把它們看作要執行的虛擬程式碼 (pseudocode)：

Animals =
    "Fido": DogObject("Fido")
    "Samantha": CatObject("Samantha")
    ...

你的程式有時預期看到 key，有時則是實際物件。常見的錯誤之一是拿到預期外的東西：

# 這是物件還是字串 Fido？
addAgeToAnimal: (animal, age) -> animal.setAge(age)

或者假定 DogObject 繼承了 AnimalObject，而你正從資料庫抓取資料。你產生許多 AnimalObject 物件並自動填入資料。在呼叫該方法時，有時該方法會取得實際的 DogObject，有時則是填入狗的資料的 AnimalObject。但是你之後要改變 DogObject 時，你手動的 AnimalObject 物件們卻缺乏現在所需的資料。要找出這個問題有點棘手。

# AnimalObject 沒有 buyBone 方法。
buyDogNewBone: (dog) -＞ dog.buyBone()

下一步：問題所在

一旦你找出問題所在，你得確定數值為何錯誤。

＊Async

你的腦袋或許不太能理解非同步操作。就算不把時間納入考量時，追蹤龐大的應用程式狀態樹已經夠困難的了。然而，非同步操作卻是 JavaScript 應用程式中的王道。如果某個物件型別有誤或數值不對，很有可能出在非同步操作（AJAX 呼叫、非同步資料庫或 worker 呼叫）產生的競賽情況 (race condition)。或者你可能只是在使用 Node。

# a 的值為何？得看你什麼時候問。

@a = "Default"

jQuery.getJSON destinationUrl, (data) =＞
    @a = data.people[0].firstName

@a = "Bob"

當某臭蟲出現，你需要在你的除錯器中使用中斷點來暫停執行，並檢視不同時間點的應用程式狀態。如果找不出問題，你可能必須檢查同一份程式碼好幾遍。可從非同步取得的資料來開始著手。

＊計數問題與 Off By One

這常見於在程式設計師笑談中。當依次訪問某個物件時，確認該物件的型別如你預期，包含所有你預期的屬性，且具有一致性。如果元件之間共享狀態，像是上述的非同步情況中，迴圈有可能在迴圈執行間遭到破壞。如果你快取了某個記數值，並在沒有檢查其內容是否有效前就用以執行迴圈，將大大增加迴圈錯誤的機會。如果你同時在以 1 為基礎的系統與以 0 為基礎的陣列中進行記數，臭蟲出現的機會將迅速提高。

jQuery.getJSON remoteUrl, (data) =＞
    ###
    # 資料的形式為: [
    #    {
    #       "id": 1,
    #       "first": "Bob",
    #       "last": "Smith"
    # }...
    #]
    ###
    names = []
    data.forEach (item) =＞ names[item.id] = item.first + ' ' + item.last
###
# 噢噢。此處有賴於 id 得以 0 為基礎。但是這裡的 id 是以 1 為
# 基礎，但陣列不是。
# for (var i=0, len=... 就會發生預期之外的結果。
###

＊範圍 (Scope)

變數作用範圍在許多環境下都是個問題，只不過在 JavaScript 中這個問題特別討厭。一個變數取得預期之外數值的最簡單方式之一，就是其作用範圍和預期不同。假如你定義了一個 local 變數卻沒有使用 var，其值將泄露到封閉範圍。JavaScript 關鍵字 this 的意義有時和你預期的有所不同。當暫停在中斷點時，確認 this 是你預期中的物件。最容易出錯的是在事件處理函式或 setTimeout 之中。在這兩種情況下，預設 this 會是全域的 window 物件。我自己的解決方法是使用 CoffeeScript 與寬箭頭 (fat arrow)。下一代的 JavaScript 也就是 ES6，也有解決方案。

# 在 setTimeout 中，這裡會被轉譯為 window.removeFlag
unflag = -＞ @removeFlag()
setTimeout(unflag, 500)

跟其他人討教

最後，或許更重要的，是你應該和別人討論你的臭蟲。我聽說它有很多代號，不過對我來說，它叫做鴨子除錯。做法是在你的電腦旁放隻橡皮鴨，當你遇上臭蟲時，跟鴨子解釋一下。不過，最好還是跟其他開發者談談。

你經常會發現，透過將問題口頭表達，聽你說話的人在開口前，你的腦袋就已經把問題解決了。

臭蟲是程式設計的基本面向。在你的職涯中你還是會持續製造它們。修復臭蟲是我們身為開發者最重要的任務。越快解決臭蟲，你就能越快回到有趣的功能與程式碼設計上。

臭蟲代表你對問題的理解不夠完全或錯誤。現實是最後的仲裁者。在盯著螢幕一整天後，你總會遇上想把螢幕丟出窗外的那種時刻。之後，不知何故，或許是透過鴨子除錯，或許只是偶然的運氣，你會打破僵局。這就是你的獎勵。得來不易的知識，會在你的心中迸發，你會對圍繞你的世界有更多的了解。我無法說明這種感覺是多麼美好。你已經向遙不可及的完美更進一步。

恭喜你。你已經是個除錯員了。

◎本文翻譯自 The New York Times，原作者為 Andre Behrens：http://open.blogs.nytimes.com/2013/08/27/the-young-developers-guide-to-debugging-javascript/?_r=1
_______________________________________________________________

■ [源碼秘技] KeePassX －－ 簡單易用的密碼管理軟體

林雪凡 ／文

軟體名稱: KeePassX
介紹版本: 0.4.3
官網: http://www.keepassx.org/
授權: GPL-2.0


想密碼是件苦差事，記密碼當然也是。

簡單的密碼不安全，亂數密碼又記不起來；就算好不容易記起來，卻每個網站都要記一個。之後回頭再用時就全忘光。網站共用相同密碼又不安全，到底該怎麼辦才好呢？

最簡單的做法，當然就是把密碼全寫在筆記本上。然後再給筆記本加個牢靠大鎖了。 


簡介

KeePassX 是一款簡單易用的本地密碼管理軟體。

網路上有好些密碼管理軟體，可以幫大家收集密碼長期保存。本回介紹的軟體是 KeePassX，因為有著類似名字的軟體還有好幾套，所以請別搞錯了。

為什麼是 KeePassX？其他密碼管理軟體又有什麼不好？嗯，其實也沒啥特別原因，不過這是我確實有在用的軟體，用了許久也沒發覺它有哪裡礙手，實用性一流，故就拿來介紹一下。實話實說，原本還想等到 KeePassX 2.0 推出後再和大家聊它；不過看來 2.0 還要開發很久……還是趕快介紹一下好了！這種東西早用早好啊。

KeePassX 是一款本機端密碼管理軟體，他會將密碼存在本機的一個檔案上。並用一個中控密碼加以保存。要使用它，您需要，也只需要記住一個夠強的中央密碼作為存取之用，剩下來的問題，KeePassX 會幫您搞定。

KeePassX 也支援自動產生亂數密碼。您甚至可以控制亂數密碼是否能發音、是否使用特定符號、是否同時運用大小寫、長度為何等等。


安裝

KeePassX 有 Linux、Windows 與 MAC OSX 版本，直接從這邊下載就裝吧。非常簡單。

目前最新版本是 0.4.3 版，而且已經保持這個版本很長時間了（讓我想提交翻譯都沒辦法）。如果您用 Linux，也可查查看您的套件庫從裡面裝，我玩過的所有發行版都有內建，算還蠻普遍的。

安裝後將其啟動，畫面如下所示。
(http://www.openfoundry.org/images/130924/keepassx/keepassx_01_main_screen.jpg)
▲ 圖1：空白的主畫面。


建立密碼檔

使使用 KeePassX，第一步就是要建立屬於您自己的密碼檔案，用來儲放您那數以百計的密碼。此檔案很小，就幾 KB 而已。

那就立刻新建吧。請點左上角的按鈕，會彈出新建密碼檔的小視窗。
(http://www.openfoundry.org/images/130924/keepassx/keepassx_02_new_database.jpg)
▲ 圖2：新建密碼檔視窗。

小視窗中提供了兩個選項，您至少要選其中一個才能新建密碼檔。但也可以兩個都選。

兩個欄位中，第一欄位是讓您輸入「主密碼」用的，如果您有設定這個，則日後開啟本檔案時都得輸入主密碼才能將檔案打開，防止別人偷看。

而下方的第二欄位，則可選用一把鑰匙（密鑰）作為開檔使用。

此處所謂的鑰匙，其實也就是一個普通的檔案；這個檔案可以是任何類型、任何長度的檔案，不管 jpg、png、pdf 通通都可接受。唯一的要求是這個檔案日後不能被改變，因此最好別用 doc 或 odt 檔來用，不小心改到一點鑰匙就會完全失去作用。

如果您無意自己指定檔案，也可以按下方的 Create File 來產生一個最小所需的隨機檔案（大約 64 bytes）。如果您有用密鑰檔，則資料庫被暴力攻破的可能性會很小，但您當然也就得好好保管您的密鑰才行，如果沒有把密鑰檔帶著跑，密碼檔是打不開的。要是弄丟密鑰檔，也就等於您再也打不開密碼檔，故請特別小心。

推荐同時設定「檔案密鑰」＋「簡單的密碼」，如此用起來比較方便，也兼顧了安全性。

預設的密碼檔案副檔名是 .kdb，但是這樣一來目標太顯眼了，有心人可能會對它進行針對性攻擊，因此建議換個副檔名或索性不要副檔名，就把它偽裝成 exe 或 dll 之類的，KeePassX 一樣可以正確開啟......沒錯！不被攻擊就是最強大的防禦！

(http://www.openfoundry.org/images/130924/keepassx/keepassx_03_files.jpg)
▲ 圖3：重新把檔案命名一下，這樣就很難看出這些檔案是密碼檔或密鑰檔了。就算對方把所有可能的檔案組合都試過一次，也還有手動輸入密碼這道防禦攔阻。

加入記錄項目

(http://www.openfoundry.org/images/130924/keepassx/keepassx_04_main_screen_with_new_db.jpg)
▲ 圖4：密碼檔案建好後的主畫面。

主檔案建立好後，那就在其中加入密碼吧。

請選 Add New Entry 或熱鍵 Ctrl + Y 叫出新建密碼視窗。

(http://www.openfoundry.org/images/130924/keepassx/keepassx_05_empty_entry.jpg)
▲ 圖5：新建一個密碼項目。

比方說我申請了一個 twitter 帳號叫 ossf，密碼為 !@#$%^&* ，為防忘記那就這樣紀錄下去：

(http://www.openfoundry.org/images/130924/keepassx/keepassx_06_twitter_entry.jpg)
▲ 圖6：輸入密碼與相關內容。

其中 Comment 可用來輸入任意文字。我常常用來簡述這個密碼網站是幹嘛的，或是記錄一些重要的輔助訊息，比方說本來故意亂打卻被當作驗證訊息，三不五時就會要您重新輸入的生日號碼（巴哈先生，對，就是在說你！）。至於 Attachment 欄位則可放入任意檔案如金鑰檔等，隨您塞。

如此這般就輸入好了。


自動產生密碼

如果您想要新建一個密碼，又對自己想出來的密碼沒啥自信，那麼您也可以試著使用自動密碼產生功能。就按先前畫面中的 gen 按鈕......

(http://www.openfoundry.org/images/130924/keepassx/keepassx_07_password_generator.jpg)
▲ 圖7：自動密碼

您可以控制密碼的字數、使用字元集、發音可否、是否所有字元集都有用到等項目。

因為是隨機產生的，密碼強度都很高。不過也很難記憶很難打，因此最好搭配以下策略使用。


運用密碼的方法

密碼庫設定好後大約會變成這樣。

(http://www.openfoundry.org/images/130924/keepassx/keepassx_08_main_screen_full.jpg)
▲ 圖8：填滿內容的密碼庫

左邊是密碼群組，右邊是個別密碼項目。如何組成群組本文不論，有興趣請自己試吧；個人認為沒群組也無所謂，反正 KeePassX 的搜尋欄也相當好用，想找出特定密碼還是很簡單的。

您可以在選定個別項目後，按熱鍵使用各種功能。常用功能包括：

＊複製使用者名 ( Ctrl + B )
＊複製密碼 ( Ctrl + C )
＊打開網址 ( Ctrl + U )
＊雙擊打開密碼編輯視窗：可以察看或重新修改內容。

如此一來就能輕易複製貼上了（註一）。熱鍵不用強記，右鍵選單裡都有寫。


Auto Type

如果您使用 Linux 系統，KeePassX 還支援 AutoType 功能。具體用法是：

＊先將游標放到某個登入視窗的 user 欄位，然後......
＊打開 KeePassX，選中正確的密碼項目
＊再按 Ctrl + V

這樣就能自動填入用戶名稱與密碼，輕鬆完成登入手續。用起來非常方便。


其他零散功能

考慮到安全與方便之間每人平衡點不同，KeePassX 在設定頁面中有許多選項可以用，建議去翻翻。以下則要介紹......

＊您可以不關閉程式但鎖定資料庫。設定頁中有「閒置多少秒後自動鎖定」的選項。
＊是否要記憶密碼檔存放位置？是否每次啟動 KeePassX 時都自動讀檔？這些選項會讓使用更方便，但也會讓同電腦的其他使用者知道您的密碼檔是哪一個。當然，他們想偷看時還是得輸入密碼。
＊複製到剪貼簿時，設定多少秒之後剪貼簿會自動清空，以求儘量降低安全風險。


註 1：注意，複製貼上時，您的帳號密碼可能會被「剪貼簿監控木馬」偷走；但是如果您用鍵盤手動敲打，密碼同樣可能被「鍵盤側錄木馬」偷走……總之只要電腦上有病毒，怎樣都無法安心，還請注意。 
_______________________________________________________________

■ [自由專欄] 亦敵亦友：智財法如何協助自由與開放源碼社群

謝良奇／編譯 

過去我曾撰文評估自由與開放源碼社群面對的智財風險，以及如何駕馭這些風險的可能性。我並非第一個，也不會是最後一個作出如此評估的人。畢竟，由於自由與開放源碼社群運動某部分是源自於，對企業使用智財權來阻礙開放性與技術分享的一種反動，因此該社群很自然地會以不信任態度看待智財法。

雖然某種程度的不信任也許是應該的，但這也讓自由與開放源碼社群忽視了智財法某些對他們有所幫助的面向。儘管並非完美，專利、著作權、商標、商業機密法各自都能有益於自由與開放源碼社群。

＊著作權

因為軟體會自動受到著作權保護，自由與開放源碼社群運動的創始者，得以使用著作權作為基礎，在寬鬆的著作權授權下，將自由與開放源碼公開給大眾使用。當然，沒有著作權的話，或許什麼問題都沒有。不過事實證明著作權相當具有彈性，可以允許自由與開放源碼擁護者和私有軟體廠商，各自追求他們對於軟體世界的夢想。

這種彈性的好處彰顯在幾個方面。例如，因為自由與開放源碼社群使用的主要著作權授權如今已眾所周知，後續的使用者更有機會熟悉這些條款與授權下的權益，有助於減少交易成本。雖然我曾指出，在企業環境下授權也許會產生相反的效果，也就是增加交易成本，但對於許多開發者而言，授權的熟悉度很可能帶來信任並促進重用。的確，自由與開放源碼著作權授權的運作，在某些方面更像是商標，將原始碼受到信任的訊息，傳遞給後續開發者。

著作權法也包含了一些能夠幫助自由與開放源碼社群的限制。舉例而言，著作權只能延伸到想法的特定表達之上，而非底層的構想本身。當一個想法僅能以有限形式加以表達時，也就是說這個想法和表達合而為一時，著作權一般來說並不適用。著作權也不適用於功能性系統、流程、操作方法。

自由與開放源碼社群去年就曾受益於這些限制，其重要性未來更可能再提升。例如，Oracle 最近以 Google 在 Android 體系中使用 37 個 Java API 套件為理由，宣稱 Google 侵犯其專利與著作權。地方法院最後認定，問題核心的 Java API 因為在系統或操作方法中扮演功能性角色，所以不受到著作權保護。這些 API 是達成互相操作性這個目的的必要條件。Oracle 的專利索賠也失敗了。該公司雖然正在對此裁決提起上訴，但在此期間，該裁決與其背後的著作權限制，至少可以為追求開放、協作軟體開發的自由與開放源碼社群，提供某些慰藉。這項裁決一旦確定，將有助為自由與開放源碼開發者，鋪好一條通往更加開放未來的路。

＊DMCA

對於自由與開放源碼社群來說，1998 年的美國數位千禧年著作權法 (DMCA) 是另一個好壞參半的東西。DMCA 嚴格來說並非著作權法，但卻與著作權有關。一般認為數位化內容成長可能導致更多著作權侵害案例，成為了國會之所以制定此法的部分原因。因此此法的許多規定，都是為了保障著作權持有者免於可能更多的著作權侵害。而這些都是會引來著作權極簡主義者不滿的典型條文，包括許多自由與開放源碼圈子裡的人。事實上，GPL 3.0 版 (General Public License Version 3.0) 的第三節，正是為了抵制 DMCA 的 DRM 條文。

但是 DMCA 也包含了一些條文，能幫助自由與開放源碼發展與一般著作權保障內容的使用。譬如，DMCA 包含了避風港 (safe harbors) 條款，只要線上服務供應商遵守 DMCA 的基本要求，即可保障服務供應商免於負擔其用戶行為所引發之責任，像是上傳侵權內容。如果沒有這個重要的責任保護，YouTube 與其他線上服務的續存將面臨相當大的困難。

對於自由與開放源碼代管網站，如自由與開放源碼基金會、Github、Sourceforge 等，DMCA 所提供的保護也為協助促進自由與開放源碼發展，扮演了重要角色。複製私有廠商的軟體程式碼，並上傳到線上自由與開放源碼存儲庫，在自由與開放源碼圈子裡是很少見的案例。但是在其所可能發生的範圍內，DMCA 可以保護遵守 DMCA 的服務供應商，免於潛在責任的疑慮。因此大幅降低了為自由與開放源碼社群提供軟體開發平台的風險。

＊商標

傳統上商標法的主要目標是保障消費者。為了保護消費者免於對商品或服務來源產生混淆，而賦予使用特定標誌的商標權。這仍是今日商標法的首要重點。

商標法對自由與開放源碼社群而言多半是雙贏。有效的品牌打造是自由與開放源碼專案賴以脫穎而出的關鍵方式之一，而商標法有助確保此一做法。這對於具開放且寬鬆特質的自由與開放源碼特別重要。沒有商標法，分支自由與開放源碼專案的人，可以為了借用原專案的名氣，使用和原始出處相同的標誌，以吸引使用者。在這樣的情況下，可能有相當多使用者會產生混淆。或許因為上述與相關原因，許多的主要自由與開放源碼授權，都明確地拒絕賦予任何的商標權。

標誌一般只有在市場上作為來源識別使用時，商標法才會對其提供保護。因此，當開發者使用第三方 API，且第三方標誌作為實作該 API 的一部分而必須使用時，在這樣的情況下，技術上該第三方標誌並非在市場上作為來源識別。至少就商標法而言，開發者使用商標作為該 API 實作所需部分，應該不構成問題。

＊專利

正如我在其他文章中所述，專利法可能是自由與開放源碼軟體最大的敵人。從修改專利法以配合自由與開放源碼發展的方面來說，儘管還有許多有待改進之處，事實上專利法已經為自由與開放源碼社群，提供了某些協助，或至少提供了某些自救方案。

專利法的既有技術 (prior art) 或許是最直接的一種方式。對於專利申請者在發明或提出同樣發明前，已經開發或公開釋出的發明概念，技術上不予以發放專利。當然，這個說法把事情過度簡化了，要決定是否構成即有技術，自有一套複雜的規則存在，而本文不會深入這些細節。只不過，這些規則意味著，開發高品質軟體並儘快公開釋出，對於自由與開放源碼社群有很大的幫助。

美國專利局在發放專利前，並未盡力詳熟即有技術這一點，雖然已經飽受許多批評，但那些早已行之有年，或是現有技術下顯而易見的發明，依舊不斷地獲得專利。不過，與其只是抱怨這種情況，自由與開放源碼社群可以且應當利用，近來頒佈的美國發明法 (America Invents Act，AIA) 下所新引入的程序。在 AIA 之下，有了多方複審 (inter partes review) 可以廢止任何專利，不論該專利的發放是在 AIA 實施之前或之後。想要廢止 AIA 生效之後發放的專利，只要在專利發放算起 9 個月之內，也可以選擇走領證後複審 (post-grant review) 程序。對於想扳倒已發放的專利，領證後複審的程序比起多方複審更為有利。

這些程序短時間內變得頗為複雜，但其重點很簡單，那就是儘管 AIA 未能達到許多人的期待，但在讓自由與開放源碼社群能更容易廢止不應該發放的專利上，AIA 的確取得了一些進展。在這方面，像是 Post Issue Peer to Patent 專案等等嘗試，是不錯的開始。擴展這些努力可望有助自由與開放源碼社群。

＊商業機密

由於不被知悉或無法藉由適當工具輕易查明，而可從獲得經濟價值的資訊，基本上是商業機密法的保護對象，必須加以合理的努力以確保其秘密。通常公司會在專利提供的相對短期保障，以及商業機密法提供的潛在性無限期保障之間做出選擇。

商業機密法與專利法之間的關鍵差別在於，商業機密法不會針對他人的獨立開發，而保障商業機密的持有者。而專利，反過來說，一般而言可以控告專利涵蓋之技術的侵權者，即使該侵權者是獨立發展出該項技術（也就是說，不是從專利持者者複製而得）。

因此在商業機密法之下，如果自由與開放源碼社群發展出碰巧與第三方商業機密極為相似的技術，但過程中並未盜用第三方的商業機密，商業機密法一般對他們並無追索權。此外，假如第三方公開釋出其產品，而產品中使用的商業機密可透過逆向工程加以取得時，一般而言這樣的逆向工程在州商業機密法 (state trade secret law) 下，被視為取得該資訊的合理工具（另一方面，一旦複製了程式碼，可能觸犯著作權侵害，而對於逆向工程的合約限制也可能生效）。

這種對逆向工程的寬限，很顯然不適用於聯邦法令美國經濟間諜法 (Economic Espionage Act of 1996)，因為它會把逆向工程列為刑事犯罪。不過，這項聯邦法令受到許多爭議，許多人認為，美國律師不太可能針對州法 (state law) 所允許的行為，而對當事方提起訴訟。到目前為止，現有的證據似乎證實了這一點。

結論

儘管自由與開放源碼社群與傳統智財法並非處處切合，智財法的確對該社群提供了某些幫助。在前文裡我檢視了各種智財法能協助自由與開放源碼社群的方法。但這並非意指智財法不需要重大改革，就能更好地配合自由與開放源碼。我曾經撰文指出若干我認為有助於調和自由與開放源碼發展和傳統智財法的改革。不過在此期間，利用智財法的有利面向，自由與開放源碼社群能獲得更好的保障。

◎本文翻譯自 Outer Curve Foundation，原作者為 Clark Asay：http://www.outercurve.org/Blogs/EntryId/103/Frenemies-How-IP-Law-Helps-FOSS-Communities-guest-blog-by-Clark-Asay
_______________________________________________________________

■ [自由專欄] 排名前 20 個從 Windows 輕鬆轉換到 Linux 的祕技

謝良奇／編譯

你曾想過從 Windows 換到 Linux 嗎？如果你對其過程繁瑣感到畏懼，我們會讓它變得簡單。我們會告訴你，你必須知道的重要訣竅：

＊何謂散佈套件？
　Linux 和 Windows 或 MacOS 那種單一套件不同。由不同的來源提供的基本作業系統，因為不同的理由而有若干差異。雖然部分和硬體相關，其餘則是依照特殊用途而量身打造，像是一般　桌面、網路伺服器或多媒體工作站等。每一個不同的套件被稱之為散佈套件。

＊它們之間有何不同？
    散佈套件彼此間最明顯的差異，在於預先安裝應用軟體的數量和種類。

＊你該選擇哪個散佈套件？
　 Ubuntu 目前為止是初學者間最普遍的散佈套件，不過像鼎鼎大名的 OpenSuse、Fedora 等也各有優點。如果你需要跟 Windows Mobile 同步的話，Mandriva 可能是比較好的選擇。

＊瞭解桌面環境
    任何作業系統知名的視窗化桌面，都只是核心程式碼上的一層，可以讓用戶更容易與電腦互動。由於 Linux 相當模組化，桌面環境可以很容易從核心作業系統拆開，你可從眾多選擇中挑選　一個。
    
＊對從 Windows 來的轉換者，何者最好？
    Gnome 與 KDE 跟 Vista 或 OS X 很接近，一般來說 Gnome 被認為比較好上手。XFCE 或 LXDE 則用來讓低階系統運作更為順暢。
 
＊Live CD
    當你決定用哪個散佈套件後，你需要下載通常為 .iso 的安裝檔案，並燒錄在 CD 或 DVD 上。有若干散佈套件，從碟片開機後會提供你測試體驗版本 (live version) 的選項，該選項可以讓你不　用更動你現有的硬碟，就能開機進入 Linux 桌面。
    
＊多方嘗試
    請記住體驗版本有它自己的限制。多數的散佈套件都是為了最大化硬體相容性。舉例來說，你的 PC 大致上能處理更好的桌面效果。
    
＊把 Linux 裝到 PC 上
    如果你沒經驗的話，安裝作業系統可能有點難度。不過，所有知名的散佈套件為首次安裝者，都提供了優秀的文件。

＊保留 Windows
    安裝散佈套件最簡單的方式，是把你的 PC 清空並從頭開始。你也許會想要保留 Windows，以便執行各種不適合在 Linux 上跑的應用軟體，如遊戲。

＊逐漸理解檔案系統
    在 Windows 中大部份用戶很自然地會瀏覽 C: 磁碟。而在 Linux 下開啓檔案瀏覽器，會驚訝地發現各種像是 "etc" 與 "opt" 等，不知做何用途的檔案與檔案夾，其內容看起來都一樣。如果你　沒用過這類系統，你可能會覺得這些東西很難又缺乏邏輯。請逐漸習慣。
    
＊待在家 (Home)
    所有的重要檔案，像是文件、音樂、影片，都儲存在一個地方，稱之為 Home。由你建立的每個用戶名稱，都會在 Home 裡面有個被其各自密碼保護的區域。

＊瞭解 Root
    和 Windows 一樣，Linux 也有兩種不同的用戶帳號，一個是管理者，一個是一般用戶。管理者被稱之為 'Root'，系統檔案受到保護不讓一般用戶編輯。如果你沒辦法編輯並儲存某個文件，　或複製某個檔案夾，很可能它被鎖定僅供 Root 存取。
    
＊變身超級使用者
    任何人都能暫時變身超級使用者 (Superuser)，允許執行僅限於 root 的各種操作。開啓終端機 (terminal)，並依散佈套件的不同，在指令前加上 "sudo" 或 "su"。

＊別害怕終端機
    非技術用戶很怕終端機這個字，但終端機不過只是一個程式，可以讓你用文字取代滑鼠輸入指令。

＊安裝新程式
    和 Windows 或 OS X 不一樣的是，大多數的 Linux 散佈套件都會配有預先安裝好的圖形化編輯器、辦公室套件、傳訊軟體，而且安裝新程式也比較簡單。

    在主選單上，你會看到套件管理器 (package manager)，一般會是 Synaptic 或 Yum。該程式會顯示你的 PC 安裝的所有檔案。

＊有時可以不要升級
    當升級管理程式通知你的時候，你不一定要更新程式。Linux 的控制權在你手中。

＊修復顯示問題
    假如你的螢幕出現有趣的顯示失真 (artefacts)，像是在 OpenOffice 或郵件程式中，文字和游標會不見，一個明智的選擇是到製造商的網站上，找找看有沒有最近的 Linux 驅動程式。

＊手動安裝驅動程式
    和 Windows 不同的是，你必須要安裝設備驅動程式。核心會負責照料好大多數的硬體。雖然在 Linux 手動安裝驅動程式，有時會是件艱鉅的任務，即使如此還是有文件詳述其步驟。

＊回復模式
    大多數散佈套件在第一個選單畫面，都有回復模式，幫助用戶在作業系統無法開機時輸入問題。在這方面 Ubuntu 是比較好的選擇，它會提供你重置圖形系統的選項，那通常是許多問題的　來源。
    
＊記筆記
    網際網路上有相當豐富的 Linux 逐步操作解說，賦予你在終端機中複製貼上指令的強力支援。明智的選擇是記下你做過的更動，以便在出狀況時回復並修正。


◎本文翻譯自 EFY Times.com：http://www.efytimes.com/e1/fullnews.asp?edid=114271
_______________________________________________________________

■ [源碼新聞] 全球最小無人飛機自動駕駛系統採開放源碼

謝良奇／編譯

4 平方公分的 Lisa/S 晶片，大小約一枚歐元硬幣那麼大，但是這重 1.9 公克的矽所包含的，已可滿足自動駕駛空中無人飛機的所有需求。

這是全球最小的無人飛機自動駕駛系統，根據荷蘭台夫特科技大學 (Delft University of Technology) 的晶片設計者表示，比起前作還要輕上 30 公克。更棒的是，不論軟硬體都採開放源碼，表示任何人都可以免費複製使用。

專案領導人 Bart Remes 表示，他們選擇開放源碼的原因是希望公開給社群取用。他展望開放源碼無人飛機技術，能自農業到搜救，帶來更廣泛的民用無人機應用。

他說，在此之前，只有軍方擁有這類技術。他的夢想是，未來幾年內，每個消防隊員口袋裡都有一部無人飛機。

Remes 說他從 6 歲起，就開始玩起遙控飛機。大約 10 年前，當時身為 Delft 的學生，受到程式設計與電子學挑戰的吸引，他開始打造自己的無人飛機。事實證明，稱為微型飛行器或 MAVs 的超小型無人飛機，因為相對便宜、安全、易於程式化，對於航空工程是很棒的教材。

他說，在大學有許多學生只做電腦模擬，從未看到真實世界。透過 MAVs，他們可以看到真實世界。他的學生作品成為在該大學 MAV 實驗室領導人的全職工作，那裡負責像 DelFly 這種專案，這是造型酷似蜻蜓的撲翼無人機。

Lisa/S 是 MAV 實驗室的最新專案。該晶片的軟體以 Paparazzi 為基礎，這是從 2003 年開始就有的開放源碼無人機自動駕駛系統。真正的創新在於硬體上。這枚小小的晶片包含了自動駕駛系統所需的一切，包括陀螺儀、加速度計、高度計、GPS，和 ARM處理器，就像你的智慧型手機用到的同樣 CPU。

Remes 說，從四軸飛行器到固定翼系統，Lisa/S 可以用在各種無人機上。唯一的限制，是它無法向操作者提供持續的資料連接。因為它是獨自自主的，因此對他們而言這不算是限制。但是他可以理解某些人需要和自動駕駛儀有持續的資料連線，因此他們會需要較大的連接。

此晶片是在一間名為 1Bitsquared 的美國電子公司協助下設計的，該公司從 2014 年 1 月起會販售 Lisa/S 晶片。Remes 說，不過因為軟硬體都是開放源碼，任何公司都可以銷售以該技術為基礎的晶片。


◎本文翻譯自 WIRED，原作者為 Klint Finley：http://www.wired.com/wiredenterprise/2013/08/drone-autopilot/
_______________________________________________________________

■ [源碼新聞] 孩子的程式教育不能等 - 開放源碼專案帶領小朋友走進程式碼的世界！

黃郁文／編譯

想讓小朋友從小就學習如何寫程式嗎？以下有幾個網站，可以讓小朋友在近乎遊戲的過程中，快樂地學習如何撰寫程式碼，並提早一探電腦程式的奧秘與學習自由開放的開源精神！

1、Scratch (http://scratch.mit.edu/)

這個網站提供一些適合小朋友玩的小遊戲，而且網頁的語言選項多達四十種，小朋友進到 “See inside” 的頁面，就可以看到構成這些小遊戲的程式碼，而這些程式碼，都還是以小朋友易懂的方式來表示，透過 Scratch，小朋友除了能夠學習撰寫程式外，也可以在潛移默化中，瞭解到開放源碼的概念。

2、Alice? (http://www.alice.org/3.1/materials_videos.php)

這個網站是為八歲以上的小朋友所設計，以說故事的形式教導小朋友如何寫程式。小朋友可隨著故事將卡通人物放置到故事畫面內，之後在小朋友布置好故事背景畫面後，就可以滑鼠點進這些卡通人物來編輯程式碼，不過編輯的意思並非我們一般所想的撰寫程式碼，而是以下拉選單的方式讓小朋友選擇，邊玩邊學，由此也讓小朋友了解到，程式物件之間的互動關係。

3、Greenfoot? (http://www.greenfoot.org/home)

這是一個針對十二歲以上的大朋友所設計的網站，其運作方式與 Alice 類似。這個網站的程式編輯人員教導小朋友 Java 以及顏色程式碼的編輯，基本上，可說是一個建構於 BlueJ (http://bluej.org/) 專案，在其基礎上加工的視覺介面。

4、Mindstorms (http://mindstorms.lego.com/en-us/default.aspx)

這個網站協助小朋友體驗製造機器人與編輯機器人大腦的樂趣。這是樂高 (LEGO) 系列積木的相關產出，由於組合上較為複雜，該網站比較適合八歲以上的小朋友來使用。

5、Sagan (http://sagan.be/)

Sagan 是一個不折不扣的開放源碼軟體專案，主要是來模擬火星探測機器人，小朋友可以在三個模擬火星地形上測試自己的小機器人，另外還有一些轉換小工具可將程式轉用於 Mindstorms 的機器人上。

6、Arduino (http://arduino.cc/)

Arduino 是一個開放源碼、開放硬體，甚至多數設計圖都採創用CC 授權 (Creative Commons License) 釋出的電子產品雛形平台，主要是以具彈性、容易使用的硬體與軟體為建構基礎，同時也是一個教導小朋友學習寫程式與電子概念的好站。

7、Raspberry Pi (http://www.raspberrypi.org/)

是一個可直接讓小朋友觀察電腦內部構造的微型電腦系統，他包含一個快閃記憶體的儲存空間 (flash hard drive)，其上可安裝與執行 Linux 作業系統，他也配備二個 USB 插孔、一個網路插孔、甚至還有連接 TV 視訊線的外接插孔。小朋友除了能夠用他來學習電腦構造外，還能在寫完程式後，放在上面進行實際測試。

除了上述幾個讓小朋友在玩樂過程中學習的網站外，當前全球也有不少的地方，在有心志工的帶領下，會定期舉辦讓小朋友能夠學習到程式寫作的活動營隊！

1、Devoxx 4 Kids (http://devoxx.com/display/4kids/home)

這是一個直接讓小朋友學習到前述所有工具的研習會，與會的演講者都是電腦達人，而該研習會第一次在荷蘭舉辦時，門票破天荒地在二小時之內，便已宣告售罄。

2、First Lego League (http://www.firstlegoleague.org/)

則是一個以小朋友為對象的機器人計畫，小朋友必須先從 scratch 製造一個 Lego Mindstorms 機器人，之後他們必須與其他小朋友分享自己的解決方案，從中學會開放分享的開源觀念。

3、Maker Faire (http://makerfaire.com/)

這也是一個讓小朋友可以分享創意的製造家博覽會，小朋友在此可以進行科學資訊上的交流，與動手建立專案，從做中學習到自己真心喜愛的知識。

4、VHTO (http://www.vhto.nl/over-vhto/engelse-pagina.html)

是一個在荷蘭，為推動女性參與科技活動的推廣專案，小朋友可藉由該專案裡的不同計畫學習程式語言，像是加入 Talent Watcher 計畫來開發自己的天分，或是 Mirror Image 及 Speeddating 專案, 以獲取女性參與科技領域的資訊，甚至還有 Girlsday 專案，讓小女生能實地走訪科技公司，藉由觀察來想像自己參與科技業的未來。

前述的網站與研習會，對於協助小朋友，能自小便接觸、了解開放思想與開源理念相當地有幫助，而且不僅是小朋友，對於程式撰寫或開放源碼參與有興趣者，都建議能夠撥些時間來這些網站，一探究竟與尋找適合自己的知識寶藏！



相關網址：

1、開放源碼專案將小朋友引入程式碼世界
http://opensource.com/education/13/9/how-get-more-kids-code

2、Wekey-wiki 程式設計 Scratch 教學網頁
http://wekey.westart.tw/%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88_Scratch

3、新北市國中小自由軟體 Scratch 程式設計比賽資源網
http://scratch.ntpc.edu.tw/app/Center/default.aspx
_______________________________________________________________

■ [源碼新聞] Valve 新推出的 SteamOS 將採用 Linux 挑起電視遊樂器大戰！

黃郁文／編譯

繼推出 Linux 作業系統上的 Steam 電玩遊戲線上下載頻道之後，Valve 近期正規劃推出 SteamOS 這個以 Linux 為基礎的電玩作業系統，以讓這些電玩遊戲，可以直接外接大型電視螢幕來進行操作！

新的作業系統 SteamOS，將與 Steam 遊戲頻道的服務結合，並提供大螢幕使用者所有個人電腦版本的功能，甚至還可以玩到部份過去僅能在 Windows 或 Mac 作業系統下進行的遊戲。此外，SteamOS 不僅可用於電腦遊戲，還可以進一步被消費者拿來看電影、聽音樂，以致於受其威脅的市場競爭者，除了 Microsoft、Sony，與 Nintendo 這些傳統的電玩遊戲機製造商之外，甚至可能波及 Apple 及 Google 規劃中的各類多媒體機上盒。

SteamOS 雖然還沒有正式進行商業販售，但會先以免費作業系統的型態進行散布，而 Valve 也會於近期將此作業系統直接機載推出 "Steam Box"，以搭配 SteamOS 引發話題，並供消費者能夠以實機協助進行該系統的使用測試。同時 SteamOS 更規劃將以免費授權的方式，提供給裝置製造商來製造產品，預料此舉將帶給電腦遊戲界新一波 Linux 作業系統的運用風潮。據報導，目前 AMD 及 Nvidia，都已為此著手改進，其旗下產品在驅動程式方面對 Linux 的支援。

Valve 並表示，使用者可期待未來會有 3000 種遊戲使用 SteamOS 作業運轉平台，這樣子的發展除了可以潛在擴展 Steam 電玩頻道的市占率外，也是同時為了提供使用者更多遊戲上的選擇。因為，隨著 Linux 上電玩遊戲受歡迎的程度提升，Valve 也需要對更多相應的 Linux 應用程式進行測試，現在有了 SteamOS 的協助，Valve 便能夠更有效率地，透過使用者的回報，來對此一客製化的電玩系統進行適度修正，以改進使用者在 Linux 作業系統下的遊戲體驗。

目前在 Steam 頻道上使用 Linux 作業系統的電動遊戲約有 250 種，營收僅約佔整體遊戲營收的 1%，所以 Valve 在未來是否能夠吸引遊戲開發商，將資源浥注並投入到 Linux 遊戲的研發，將成為 SteamOS 未來的發展成敗關鍵。除此之外，能否將一般在個人電腦上運作的遊戲，成功轉換至利用電視螢幕來操作，也是能否吸引原 Microsoft、Nintendo，與 Sony 電視遊樂器使用者的要點，這些對於電視遊樂器的新手 Valve 來說都是一大挑戰。不過，電腦遊戲的執行效能，一直以來都是電玩使用者的關注焦點，而 Windows 作業系統的效能，因系統龐大在運作上會耗用不少硬體的運算資源，一直以來便被使用者所詬病，故以 Linux 為基礎的作業系統，若是能夠提供優良效能的發揮環境，將可贏得多數個人電腦遊戲玩家的青睞。同時，Valve 的開放政策，相較於一般電視遊樂系統的封閉環境，自由開放源碼的系統，預料應能吸引眾多的電玩遊戲愛好者加入開發與除錯的行列，若 Steam Box 又能以優惠的價格進行販售，並搭配充份的維修支援，我們應能期待這個開放策略的開花結果！



相關網址：

1、Valve 的 SteamOS 將 Linux 帶進電視遊戲大戰 
http://www.linuxinsider.com/story/79028.html


2、Valve Beta 全力推進 Linux 遊戲 
http://www.linuxinsider.com/story/Valve-Beta-Boosts-Linux-Gaming-Full-Steam-Ahead-79043.html

3、Valve 推出 SteamOS 
http://www.bbc.co.uk/news/technology-24207129

4、SteamOS 來了
http://steamforlinux.com/?q=en/node/332

5、Valve 釋出 Steam for Linux
http://www.openfoundry.org/tw/foss-news/8927-valve-steam-for-linux
_______________________________________________________________

■ [源碼新聞] Android 開源韌體 Cyanogen 專案成立新創公司！

黃郁文／編譯

奠基於 Android 平台上的開放源碼韌體系統 Cyanogen 於近日宣布，其已獲得七百萬美元的資金挹注，將啟動新計畫與成立公司，而這筆資金的來源，主要是來自於 Benchmark Capital 以及 Redpoint Ventures 兩股投顧基金。Cyanogen 創辦人 Steve Kondik 表示，計畫啟動後，Cyanogen 將能展現速度與規模增大的成果，未來更將不會再有發展進度緩慢、或停滯不前的缺點出現。

該公司未來的服務重點，在於將原 Android 平台的裝置，加載 Cyanogenmod 系統的安裝程序簡易化，預估在此一方向下，自動安裝版的 APP (CyanogenMod installer)，亦將於近期內在 Google Play 軟體市集上與大家見面。簡單來說，CyanogenMod 是一款針對 Android 智慧手機與平板電腦裝置的開放源碼替代韌體 (Open Source replacement firmware)，她的開發是根據 Google 官方釋出的 Android 版本，再加上其本身或由第三方撰寫的自由開源軟體授權程式碼所組成。

Cyanogen 這個替代韌體所提供的功能，並不見於一般行動裝置製造商所使用的官方韌體，這些額外功能包含各式佈景主題的提供、大型的無線網路登入清單、OpenVPN 這類的轉 IP 程式，以及 APP 權限進階管理的程式等。此外，Cyanogen 的韌體強調，其已費工過濾掉原廠系統可能自動紀錄使用者習慣的間諜軟體 (spyware)，或多數使用者其實並不需要，會耗用系統不少運算資源的腫脹軟體 (bloatware)。而相較於此，Google 的原生 Android 系統，則因為受制於與 OEM 廠商之間的契約規定，而無法隨心所欲進行上述的調整與修改，因此在某些狀況下，Cyanogen 提供的韌體，也許比起官方釋出的版本，更可以提供使用者較佳的效能與應用穩定度。截至目前為止，CyanogenMod 在網路提供使用者，據以下載之後進行刷機的韌體替代映像檔 (replacement boot ROMs)，已經被下載至不同的行動裝置上，超過 750 萬次以上！

當前 CyanogenMod 安裝程式，所能支援的裝置，主要是已解鎖、不設防刷機制的機種 (unlockable devices)，例如大部份 Samsung 的相關產品均在支援之列。而為了避免法律上的爭議，首批釋出的 CyanogenMod 自動安裝程式，也先不打算支援需要駭入系統主控權限才得以安裝的商用產品。然而，Steve Kondik 表示，Cyanogen 專案的長遠目標，是對 OEM 廠商敞開大門，以取得廠商們的支持，因為禁止消費者刷機，從銷售率上來看並非一定是對廠商有利的事，而消費者，如果有打算試用 Cyanogen 這樣的替代系統，也應該要拒絕購買在出貨時已然上鎖的裝置。Steve Kondik 進一步說明，Cyanogen 專案的未來發展，將繼續保持整個嵌體系統程式碼的開放性，以及現行運作的無廣告內嵌模式，除此之外，她的釋出程序也將更加穩定與持續，讓使用者能同時對多種不同的裝置，進行資料同步化的設定。此外，CyanogenMod 也將支援 Chromecast 行動裝置影音串流器，或 Airplay mirroring 這類的行動裝置影像輸出系統，並接續開發更多新穎而好用的應用程式，目前已有硬體 OEM 廠商，表示對此計畫的支援興趣。

目前，CyanogenMod 有來自 Benchmark 以及 Redpoint 的資金奧援，未來也有機會成為主流平台來創造更多的資金流入，不過，不可諱言的是，截至目前為止，全球尚無 Android 分支成功的明顯範例，多數評論家認為 CyanogenMod 的前景仍不明朗，加上使用者對於更改裝置、自行刷機，導致保固保障喪失的憂慮，以及硬體廠商是否能夠多數支持的不確定性，都是 CyanogenMod 未來商業化發展的隱憂。Cyanogen 能否說服製造商替換官版 Android，以及描繪出自由客製化版本的「錢景」，將會是未來能否成功的重要關鍵！


相關網址：

1、700 萬美元挹注 Cyanogen 
http://www.linuxinsider.com/story/7M-Funding-Means-All-Systems-Go-for-Cyanogen-78993.html

2、Cyanogenmod 成立公司以創造更好的 Android 應用系統
http://www.theinquirer.net/inquirer/news/2295770/cyanogenmod-goes-pro-looks-to-create-a-better-version-of-android

3、Cyanogenmod 專案頁面
http://www.cyanogenmod.org/
_______________________________________________________________

■ [源碼新聞] 開源平板在 JavaOne 登場

謝良奇／編譯 

在今年的 JavaOne 會議上，Oracle 工程師公開了一款雛形平板電腦，採用現成元件與基於 Java SE 8 的介面所打造。這款名為 DukePad 的平板是在該會議的技術主題演說中向與會者公開亮相。

DukePad 採用了 Raspberry Pi，並運行 Raspbian Linux 作業系統來啓動平板的使用環境。以 JavaFX 建構的使用者介面提供了高品質的圖形化使用者體驗。DukePad 的應用程式是以 JavaFX OSGi 模組的形式建構與揭露，並在 Eclipse Equinox 上運行。

該平板被設計為一項自己動手做的專案，在 OpenJDK Wiki 上的頁面明確指出，DukePad 並非一項產品，而是開放源碼、可自由取得的一系列計劃。對於設定該平板的環境，也提供了完整的指示，包括軟體下載、設定，以及用以建構該平板的硬體資訊。

該平板的硬體規格包括，10 吋的觸控螢幕、嵌入式攝影機、16 GB 的 SD 儲存空間、內建 wifi、加速度計、客制化的外殼。來自 Raspberry Pi 核心的 512 MB 記憶體，被設定為均分成系統記憶體與顯示記憶體。該份指示指出，256 MB 機型或許在類似的減半配置中也行得通，不過 DukePad 本身是打造成 512MB。

該專案的 wiki 頁面也針對其外殼設計提供高解析度的模板，可用於雷射切割壓克力以製作平板的機殼。完整組裝後，該平板約為兩吋厚，標價約為 350 美元。該專案頁面指出 DukePad 團隊與 Special Computing 合作，提供可供訂購的預建套件。好讓該平板的元件能以單一產品加以購買，而不用透過多家廠商個別取得。

DukePad 的原始程式碼作為 OpenJFX 代碼庫的一部分，可自由取得。該 wiki 頁面提供了如何使用 IntelliJ IDEA 與 Gradle 建構該專案的詳細說明。


◎本文翻譯自 InfoQ，作者為 Dan Woods：http://www.infoq.com/news/2013/09/dukepad
_______________________________________________________________

■ [源碼新聞] 跳出舒適圈，Yahoo! 黑客松 24 小時榨出你的腦力極限

Liz Chen／文

今年在 COSCUP 開源人年會上以「拆政府，原地重建」聲名大噪的 g0v 零時政府（註一），成立起源得從 2012 年「Yahoo! Open Hack Day」說起，三位台大資工系系友三天內寫出「政府預算視覺量表」，在活動中一戰成名，慷慨激昂的鬥志並未隨著拿到競賽的佳作獎項而消聲匿跡，反而更加凝聚，是年年底，他們組成如今我們都已熟悉的 g0v 零時政府，承襲 Yahoo 參賽的經驗，並且利用獲獎獎金，召開「第零次動員戡亂黑客松」，以自己的方式繼續「駭」政府。

催生了這樣一支激勵人心的團隊，Yahoo! Open Hack Day，究竟是什麼樣的活動呢？它是各路程式高手雲集的地方，組隊成軍彼此競合，在 24 小時內從發想點子到實踐，不眠不休不斷電，零食、搖滾樂與腦力激盪相伴，最後將一天一夜的精華濃縮成 2 分鐘，上台發表成果。這樣的活動形式就是「駭客馬拉松」，結合「Hack」+「Marathon」兩字，在國外早已風行多年，Facebook、微軟等大企業都爭相舉辦，從中發掘人才。


運用 Open API 讓生活變得更好

Yahoo! 台灣也在這幾年陸陸續續舉辦了幾場黑客松（又譯為「駭客松」）活動，今年的名稱由往年的 Yahoo! Open Hack Day 改為「Yahoo! Hack Taiwan（註二），規則也略有改變，相較以往只針對開發者，本屆主辦單位要求團隊最好包含 UI/UX 設計師，兼顧技術與使用者經驗設計。而幾年來比賽始終不變的，便是鼓勵以 Open API 設計出便利實用的點子。

本文開頭提到的 g0v 零時政府因不滿「經濟動能推升方案」廣告而發想創作的「政府總預算視覺量表」，利用政府公開的預算資料，將密密麻麻的數字與表格，轉化為清楚直覺的圖表，公僕到底怎麼花我們的納稅錢，終於一清二楚的呈現在人民眼前。這是運用 Open Data 的絕佳案例，無疑也是黑客松宗旨的實踐。

除了孕育出 g0v 零時政府以外，去年 Yahoo! Open Hack Day 冠亞軍分別頒給兩組運用 Yahoo! Open API 作出實用瀏覽器附加元件「歪新聞」以及「Ya!hook」的團隊。它們都是將 Yahoo! 既有的豐富資訊，發揮創意並與現有服務結合，在 24 小時內作出可行的 app 或網站。


為何參加黑客松

很多人剛開始參加黑客松或許是因為新鮮有趣，於是呼朋引伴報名。在這 24 小時內必須充分展現團隊合作，儘管強調氣氛歡樂，但緊繃的時間是不折不扣的默契反應大考驗，曾參與過 Yahoo 等企業舉辦的多場黑客松，Polydice 創辦人 Lawrance 的心得（註三）恰如其分地描寫出比賽的宗旨：

事實上，Hackathon 活動短短的時間裡，考驗大家的就是專案管理能力，有限的資源、有限的人數、有限的時間內，要能達成上台 demo 的目標，實際上就是在考驗大家有沒有辦法進行有效率的取捨。

此外，黑客松也是「自我檢視」的時機。寫程式、溝通以及解決問題的能力，有可能因為短時間而被逼出來，但更可能發現自己平時未能察覺的盲點，此時團隊成員之間的合作與幫助相形之下更顯重要。

其實比賽較勁是其次，黑客松更重要的意義是先前提到的團隊合作，以及與陌生人的交流。所有參與者都是開發者出身，但彼此未曾相逢。他們藉著各式各樣的黑客松活動在同一時空聚集，本來是陌生人，因為有了這個場合而有了接觸的機會。有些人就是因為參與 Yahoo! Hack Day 而找到志同道合的創業夥伴。

黑客松結束以後，有些人正如上述在這裡找到工作夥伴，也有些團隊在這之中建立革命情感而走向創業之路，有些純屬玩票結束過後返回各自的工作崗位。從表面上看，這 24 小時宛如一場愉快熱血的嘉年華，誠如 Lawrence 的形容，諸如黑客松的活動，實為跳脫舒適圈，挑戰自我的機會，更有甚者，造就人生的意外插曲，像是 Lawrence 與團隊成員擦出創業火花，或者 g0v 這類「鍵盤革命」組織的誕生，時至今日已在社會上發揮實質影響力。「黑客」的意義，不就在此？


（註一）g0v 介紹 http://g0v.tw/about.html

（註二）Yahoo! HACK TAIWAN 2013 http://survey.bnext.com.tw/events/2013yahoo/index.html

（註三）黑客松經驗談：一個週末、54 小時的時間，你能做出有趣、有用的服務嗎？ http://www.inside.com.tw/2012/08/31/startup-weekend-hardware
_______________________________________________________________


□ 關於本報 □__________________________________________________

◎ 主編︰洪華超
◎ 法律專欄編輯︰葛冬梅
◎ 技術編輯︰曾義峰
◎ 執行編輯︰王怡凱、陳蕙蓁
◎ 外稿編譯︰林誠夏、黃郁文、謝良奇

本電子報自行採訪、報導、編譯、撰寫文章之智慧財產權屬於中央研究院，採用創用CC「姓名標示－禁止改作－非商業性」授權條款臺灣 3.0 版授權散布，歡迎在不變更內容的前提下，以任何形式重製與散布本報，但必須遵守下列義務︰(1) 不得為商業目的之利用；(2) 必須標明本電子報智慧財產權屬於中央研究院；(3) 完整引用本著作權說明。

若欲以創用CC「姓名標示－禁止改作－非商業性」授權條款臺灣 3.0 版以外的方式利用上述文章，請與自由軟體鑄造場編輯群(ossfepaper at openfoundry.org) 聯絡。

非自由軟體鑄造場自行撰寫的單篇文章，其智慧財產權利屬於原作者所有，其以非專屬的方式授權予自由軟體鑄造場運用，而與本電子報其他文章併以創用 CC「姓名標示－禁止改作－非商業性」授權條款臺灣 3.0 版的方式進行散布。

若欲以創用CC「姓名標示－禁止改作－非商業性」授權條款臺灣 3.0 版以外的方式利用個別作者的文章，請自行與該作者聯繫，或透過自由軟體鑄造場編輯群 (ossfepaper at openfoundry.org) 來轉發聯絡訊息。

授權條款全文請見︰
http://creativecommons.org/licenses/by-sa/3.0/tw/legalcode
授權條款簡介請見︰
http://creativecommons.org/licenses/by-sa/3.0/tw/deed.zh_TW

若欲訂閱本電子報，請至以下網址︰
http://www.openfoundry.org/tw/news

如欲取消訂閱這份電子報，可透過自由軟體鑄造場新聞首頁左上方之自動退訂機制︰
http://www.openfoundry.org/tw/news

或寄發電子郵件至︰ossfepaper@openfoundry.org，以進行人工退訂。