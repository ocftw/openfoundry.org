________________________________________________________________

□■□ 自由軟體鑄造場電子報第 232 期 | 2013/12/10 □■□
________________________________________________________________

◎ 本期主題︰Scala vs Java：兩者間的差異與相似處
◎ 訂閱網址︰http://www.openfoundry.org/tw/news/
◎ 下次發報時間︰2013/12/24

□ 本期標題 □__________________________________________________

■ [技術專欄] Scala vs Java：兩者間的差異與相似處

■ [源碼秘技] Kalzium－－您手邊的化學字典

■ [企業應用] 如何用自由開源軟體經營你的小型企業

■ [自由專欄] 第三部門中的開放源碼

■ [自由專欄] 開放源碼讓我成為現在的我

■ [源碼新聞] OpenStack 大會綜合報導

■ [源碼新聞] Red Hat 的社群 Linux，Fedora，10 歲了

■ [源碼新聞] Windows XP 過後：另一種方式

■ [源碼新聞] 新一代的授權方式－創用 CC 授權 4.0 與大家見面！

■ [源碼新聞] 政府資料該採取公眾授權（Public License）或是視為公眾領域 (Public Domain) 來公開？

■ [接案／工作] 迎廣科技股份有限公司－誠徵雲端研發工程師

□ 本期內容 □__________________________________________________

■ [技術專欄] Scala vs Java：兩者間的差異與相似處

謝良奇／編譯 

Scala 是新一代的 JVM 語言，作為最普及程式語言之一 Java 的替代選擇，正逐漸贏得用戶青睞。雖然 Scala 的普及度尚不及 Java，但正在逐步地迎頭趕上。有越來越多 Java 開發者學起 Scala，受到 Twitter 的影響，有越來越多公司開始使用 Scala，其前景看來可期。

首先，Scala 有許多地方與 Java 不同，但同時兩者又有許多相似之處，例如說 Scala 與 Java 都是基於 JVM 的語言。你可以用寫 Java 的方式寫 Scala，Scala 也可以使用所有的 Java 程式庫，我認為 Scala 設計者在此做了很棒的決定。因為在 Java 方面已經有龐大的開放源碼框架與程式庫可用，最好的做法是重複使用這些作品，而不是用 Scala 重新打造一份。

在許多差異中，Scala 與 Java 主要不同之處其中之一，是能運用函數式程式設計典範以及當代 CPU 的多核心架構。由於目前 CPU 的發展趨勢傾向增加更多核心，而非提高 CPU 時脈週期，這也有利於函數式程式設計模式。不過，當 Java 8 一旦加入 lambdas 之後，這項差異或許就此不在，但對此發表評論還嫌太早。除了函數式程式設計之外，兩者還有許多差異。其中很明顯的是可讀性的提高與程式碼的簡潔性。Java 常因為太過冗長而遭到批評，Scala 的確考慮到這一點，通常 5 到 6 行的 Java 程式，只需用 2 到 3 行 Scala 就能表達。在本文中，將介紹 Scala 與 Java 間的相似與差異之處。

Scala 與 Java 的相似點

以下是 Scala 與 Java 程式語言的某些主要相似處：

＊兩者都是基於 JVM 的語言。Scala 產生的是和 Java 一樣，並且在 Java 虛擬機器上運行的 byte code。Scala 的編譯器 scalac，類似於 Java 編譯器 javac，會把 Scala 程式碼編譯為 byte code。在這個層次上，所有 JVM 語言像 Groovy、JRuby、Scala 和 Java 沒什麼不同，因為都使用同樣的記憶體空間、型別系統，並在同樣的 JVM 中執行。
＊你可以從 Java 呼叫 Scala，反之亦可，兩者之間提供了完美的整合。再者，你可以在 Scala 中重用現有的應用程式碼與開源 Java 程式庫。
＊主要的 Java 程式設計 IDE 像 Eclipse、Netbeans、InetelliJ，都支援了 Scala。
＊Scala 與 Java 之間另一個相似之處，是兩者都是物件導向，不過 Scala 進一步支援了函數式程式設計方法，這也是它的核心優勢之一。

Scala 與 Java 的不同處

＊在兩者間第一個也是主要的差異，是程式碼變得簡潔了。Scala 巧妙運用了型態推論 (type inference)、將一切視為物件、函數傳遞 (function passing)，以及其他功能，大幅地減少了 Java 應用程式的程式碼行數。
＊Scala 的設計能以優雅、簡潔、型態安全的方式，表達通用的程式設計模式。語言本身鼓勵開發者以不可變形式 (immutable style) 撰寫程式碼，簡化同時性與並行性的實現。
＊許多人或許不會注意到兩者在學習曲線上的差異。Scala 相對 Java 來說，擁有陡峭的學習曲線。雖然作為出於 Java 背景的作者而言，這個意見或許有些偏頗，但由於將豐富語意塞在精簡的程式碼中，Scala 可真是難以預測。和 Java 比較起來，Scala 的語法看來令人困惑又非賞心悅目，不過這一點應該只是初始障礙。克服它的辦法是找一本不錯的 Scala 書籍，像 Programming in Scala 或 Scala in Action。對於想要學 Scala 的 Java 開發者，這兩本都是絕佳參考書。
＊內建惰性求值 (lazy evaluation) 是 Scala 的特點之一，該特性允許將耗時運算，延遲至真正需要時才進行，你可以使用 lazy 這個關鍵字達到這個效果，如下列程式碼：

// 影像載入很慢，所以只在需要秀圖時才載入
lazy val images = getImages()  //用 lazy 關鍵字啓用惰性運算

if(viewProfile){
    showImages(images)
}
else(editProfile){
    showImages(images)
    showEditor()
}
else{
    // 其他不需要載入影像的事
}

如果你喜歡從實例中學習，那麼我猜 Scala CookBook 會是你另一個不錯的選擇，其中針對 Scala 的不同功能，包含了數不清的範例。

＊有人會說 Java 的可讀性比 Scala，原因是 Scala 那些層層套疊的程式碼。由於你可以在某類別中的某個物件之中的某個函式裡的函式中，再定義函式，程式碼會變得極具巢狀結構。雖然某些時候有助於讓程式更清晰，寫得不好時程式會變得很不好懂。
＊Scala 與 Java 之間的另一個差異，是 Scala 支援運算子多載。你可以對 Java 中的所有運算子進行多載，也可以為所有型態建立新的運算子。但 Java 並不支援運算子多載。
＊Java 與 Scala 之間的另一項主要差別，是函式在 Java 中是物件。Scala 將所有方法與函式視為變數。這表示，你可以把它們像物件一樣傳遞。你可以看過在 Scala 程式碼中，有函式接受另一個函式作為參數。事實上這賦予該語言更強大的能力。
＊讓我們比較一下用 Scala 與 Java 撰寫的程式碼，看看有多少差別：

    Java:

    List＜Integer＞ iList = Arrays.asList(2, 7, 9, 8, 10);
    List＜Integer＞ iDoubled = new ArrayList＜Integer＞();
    for(Integer number: iList){
        if(number % 2 == 0){
            iDoubled.add(number  2);
        }
    }

    Scala:

    val iList = List(2, 7, 9, 8, 10);
    val iDoubled = iList.filter(_ % 2 == 0).map(_  2)


你可以看到 Scala 的版本比 Java 簡潔許多。當你開始學習函數式程式設計的概念和模式，你會看到更多這樣的例子。我迫不及待想看到 John Hunt 的 Scala Design Patterns: Patterns for Practical Reuse and Design，這本書雖然尚未發行還在預訂階段，但這個月應該就會發行。

雖然 Scala 與 Java 是兩個不同的程式語言，但彼此有許多共通點，這並非壞事，而且正是這點讓 Scala 可能成為 Java 的替代選擇。正如我在學習 Java 程式設計的 10 個理由 (10 reason to learn Java programming) 這篇文章中提到，Java 工具、程式庫、社群，是該語言的最大優勢，假如 Scala 能加以利用的話，將能夠大幅超前。對於 Java 程式設計者，我覺得學 Scala 沒什麼壞處，你可以會學到一些好的做法，甚至可以應用到 Java 上。由於企業部門仍舊以 Java 為主，Scala 還處於初期階段，如果你現在學 Scala 的話，可以搶先一步。總結來說，Scala 看來很有潛力，所有的設計決策都很不錯，在歷經 Java 多年經驗後。

給 Java 程式設計者的 Scala 推薦書籍

書是學習新程式語言的最佳途徑，首先它們以更具可讀性與權威的方式，呈現了完整的資訊。我強烈建議在投入部落格與線上文件前，先至少看一本書。鑒於 Scala 陡峭的學習曲線，讀 Scala 程式設計書籍以打好基礎是絕對必要的。你可以從以下我列出的書中挑選一本。

Programming in Scala: A Comprehensive Step-by-Step Guide，第二版，作者 Martin Odersky、Lex Spoon 與 Bill Venners
Scala for the Impatient，作者 Cay S. Horstmann
Scala in Depth，作者 Joshua D. Suereth 與 Martin Odersky

◎本文翻譯自 Java Revisited：
http://javarevisited.blogspot.tw/2013/11/scala-vs-java-differences-similarities-books.html
_______________________________________________________________

■ [源碼秘技] Kalzium－－您手邊的化學字典

林雪凡／文

軟體名稱: Kalzium
介紹版本: 2.4.01
官網: http://edu.kde.org/kalzium/
授權: GPL-2.0

最基礎的知識永不過時，Kalzium 所要告訴我們的東西也一樣。

Kalzium 是一款主攻化學知識的學習輔助軟體，能夠向對這門科學有興趣的朋友們提供幫助。它以一份可調整的元素週期表為中心，提供了極為詳盡的元素資料，除此之外像化學公式計算機、分子模型、各式圖表、術語表等也都沒有漏掉。

Kalzium 的元素週期表是「可調整」的，它支援數種不同的週期表格式，還能夠用融點、沸點、凡得瓦半徑等方式來篩選與排序元素，視覺呈現能力很強。

 
安裝

本專案屬於 KDE 計劃的一環，在 Linux 中只要用原生的包管理器就能簡單安裝。不過我沒有找到現成的 Windows & Mac 安裝包，恐怕不能簡單支援 Windows & Mac。

 
功能介紹

主介面的週期表

當您打開 Kalzium 後，第一個看到的就是類似下面這樣的主畫面。
(https://www.openfoundry.org/images/131210/kalzium/Kalzium_main_01.jpg)
▲ 圖1：Kalzium 的主畫面。當您第一次開啟時，周圍可能還會有些小的訊息視窗，但我把他們都關掉讓畫面清爽一點。

不用我說大家都知道，這是一張標準格式的元素週期表。是偉大化學家德米特里‧伊凡諾維奇‧門得列夫的空前成就。這張表在 1869 年被建立時，甚至還大膽地留下了數個空位，並預言了當時還未被發現的元素與其性質。作為近代化學研究最重要基礎工具的發明人，德米特里‧伊凡諾維奇不能獲得諾貝爾化學獎是諾貝爾獎的遺憾，而不是他本人的失敗。這點毋庸置疑。

就如同波函數方程式中的機率波概念，或在馬克士威方程組中推導出的絕對光速等眾多科學發現一樣，在門得列夫的時代，人們也不知道為什麼週期表必須要這樣安排，他只是把看似相關的元素疊在一起，並做出預言。直到後來，人們才發現這樣的排列模式與原子序及原子外層的電子軌域結構有關，換言之，元素的外顯性質正與電子軌域直接相關......愛因斯坦的名言：「在探索道路上真有價值的是直覺，智力沒啥大用」誠不我欺也。（雖然我相信尼爾斯‧波爾會很樂意地對他吐嘈：「愛因斯坦，不要告訴科學祂需要什麼。」）

......因為喜歡科學史，忍不住就興奮了起來。史普到此為止，繼續看程式吧。


不同的週期表格式

元素週期表方面，除了門德列夫的經典格式外，尚有其他數種格式可選用。
(https://www.openfoundry.org/images/131210/kalzium/Kalzium_main2_02.jpg)
▲ 圖2：此為其中一種額外格式－－德國中央委員會 (Deutscher Zentralausschuss) 建議格式。


在週期表上搜尋元素

在上方的搜尋條中可以輸入元素的中英名稱，來快速定位它在週期表中的位置：
(https://www.openfoundry.org/images/131210/kalzium/Kalzium_main_search_03.jpg)
▲ 圖3：搜尋元素


著色與分類

可以變更週期表的著色機制來進行不同的分類。如下所示：
(https://www.openfoundry.org/images/131210/kalzium/Kalzium_main_type_04.jpg)
▲ 圖4：這張圖採用元素的特性來分類，至於先前的「圖1」則是依照最外側價電子軌域來分類。使用者可以自由選擇不同分類方式來參考。

(https://www.openfoundry.org/images/131210/kalzium/Kalzium_main_recolor_by_phase_and_temperature_05.jpg)
▲ 圖5：以 2020 度Ｋ為準，顯示物質的三相狀態。紅色為固態，藍色為液態，綠色為氣態。灰色的人造元素大都是用粒子加速器硬打出來的，產量太少半衰期又短所以還搞不清楚。

使用者可任意變更溫度值來重畫圖5，或是用相同的邏輯去過濾電負性、凡得瓦半徑、發現年代等資料。會非常清晰易讀。
(https://www.openfoundry.org/images/131210/kalzium/Kalzium_main_recolor_by_findtime_06.jpg)
▲ 圖6：以 1871 年為界，看有哪些元素被發現了。


元素的詳細訊息

當您雙擊週期表上的元素時，會列出個別元素的詳細訊息。如下：
(https://www.openfoundry.org/images/131210/kalzium/Kalzium_info_basic_07.jpg)
▲ 圖7：元素的詳細資料表－－基本資料。

(https://www.openfoundry.org/images/131210/kalzium/Kalzium_info_misc_08.jpg)
▲ 圖8：元素的詳細資料表－－雜項資料。

除此之外，就連發射／吸收光譜、同位素的豐度資訊都有，值得參考。

 
其他工具與參考資料

除了基本的週期表與其衍生物以外，Kalzium 中還有更多的好東西。您可以在工具選單中找到他們。以下就來介紹。


同位素總表

下圖的巨大表格，列出了人類目前已知所有元素的所有同位素。滾動滾輪可以縮放本表，右鍵點擊就能在左側顯示出相應資訊。
(https://www.openfoundry.org/images/131210/kalzium/Kalzium_isotope_table_09.jpg)
▲ 圖9：同位素總表

但也因為表太大了，個人覺得有些不太好用。各位參考看看。

分子編輯器

Kalzium 內建的分子編輯器非常有趣，可以讓大家自行下載瀏覽現有的 3D 分子，還可以任意測量分子內部距離，和各鍵結間的夾角。

看圖先：
(https://www.openfoundry.org/images/131210/kalzium/Kalzium_molecular_editor_naphthalene_10.jpg)
▲ 圖10：分子編輯器。這是芳香烴中的萘 (Naphthalene)，樟腦丸的主要材料，有毒不可以吃。但活在維多利亞時代的可憐傢伙們也會用它來治療寄生蟲......

(https://www.openfoundry.org/images/131210/kalzium/Kalzium_molecular_editor_trinitrotoluene_11.jpg)
▲ 圖11：分子編輯器。苯環＋甲基＋三個硝基＝三硝基甲苯 (Trinitrotoluene, TNT)，會爆炸的那個。

瀏覽時可以將分子任意縮放旋轉，而想「新建分子」或「修改現有分子」也非常簡單。

您可以按下方的「下載新分子」取得更多別人已經做好的分子。搜尋時，請用分子的英文名字來搜。

化學計算機

Kalzium 的化學計算機提供了一些常見的化學計算功能。
(https://www.openfoundry.org/images/131210/kalzium/Kalzium_calculator_12.jpg)
▲ 圖12：化學計算機中的「方程式平衡計算機」，可以自動平衡化學方程式中的反應物與生成物。


繪製元素比較圖表

本功能可以將元素的兩種屬性套用到兩個軸上，來繪制關係圖。
(https://www.openfoundry.org/images/131210/kalzium/Kalzium_custom_table_13.jpg)
▲ 圖13：這是六個鹼土金屬元素「原子量」與「原子半徑」間的對比圖。順便一提，此處顯示的原子半徑資料和我在別處查到的資料似乎有點落差，不知道是資料有錯又或是我理解方式不對。熟化學的朋友請幫忙檢查一下看看，看需不需要向上游提交問題。

可選的屬性有多種，包括凡得瓦半徑、原子序、原子量、電負性與熔點等等。

化學字典

Kalzium 提供了一套簡要的化學用語字典供快速查找。
(https://www.openfoundry.org/images/131210/kalzium/Kalzium_dict_14.jpg)
▲ 圖14：化學用語辭典，而且還被完全中文化了。譯者幹得好！

基本上該有的都有了，範圍夠廣但又不會資訊過量，有些還有附圖。

當然，或許您更偏好維基百科？

化學檔案轉換

除了上述這些功能外，Kalzium 還在「檔案選單」中，提供了化學檔案互轉功能。我數了數，能轉換的檔案類型有將近有一百種，值得一試。

在下不是專業化學家，無法深入測試，這方面就得請專家來發表心得了。


相關連結

1.官網 (http://edu.kde.org/kalzium/) 與開發部落格 (http://cniehaus.livejournal.com/)：和 Kalzium 相關且最容易在網路上搜到的入口，可惜這兩個地方根本沒在更新，給人第一印象以為開發已經中止了（但這印象是錯的）。
2.Kalzium 開發資訊頁 (http://edu.kde.org/applications/all/kalzium/development)：大部分的資料要從此頁為入口獲取。
3.官方說明手冊 (http://docs.kde.org/development/en/kdeedu/kalzium/index.html)：詳盡、美觀、易讀、索引完整並附圖說明。對需要細部操作說明者大力推荐。
4.原始碼倉庫 (https://projects.kde.org/projects/kde/kdeedu/kalzium/repository)：架在 project.kde.org 中。可用 git 抓取操作。
_______________________________________________________________

■ [企業應用] 如何用自由開源軟體經營你的小型企業

謝良奇／編譯

看看你的下一部桌機或筆電，裡面跑的不太可能是開放源碼作業系統。至今占有最大 PC 用戶端作業系統市場的，仍是 Microsoft 封閉源碼的 Windows，其次遠遠落後的是 Apple 的 Mac OS X。Linux 與其他所有開源作業系統只有極少佔有率。

原因不難看出，儘管 Ubuntu 等散佈套件已有長足進步，Linux 在多數辦公室人員期待的外觀、操作感受、流暢度上，依舊落後 Windows 與 OS X 許多。大多數公司不打算讓辦公室人員使用開源作業系統，多數辦公室人員也不打算用。

即使你希望續用封閉源碼作業系統，你的公司還是可以利用大量的開源軟體。最大的吸引力在於，你可以免費下載並使用。儘管自由軟體通常不提供支援，不過只要支付額外費用，經常可以從作者或第三方取得支援。這筆費用或許已經包含在低價的商業授權版本之中。

那麼，有可能依賴免費下載的軟體執行你的全部業務嗎？當然有許多選擇可以達成這個目標，多到本篇指引無法一一列舉。

開放源碼辦公室生產套件

使用 Microsoft Office 的公司裡，只有少數會真的向 Microsoft 要求支援。因此，出於財務考量改用開源替代方案算是合理選擇。開源套件相容於 Microsoft Office 檔案格式如 .doc 與 .xls。雖然在功能上不像 Office 那麼全面，但由於大多數人也只用到其中部分功能，因此這並不重要。

以下是四套 Microsoft Office 的開源替代方案：

＊Apache OpenOffice，Windows、Mac OS X 與 Linux 上的全面性套件。
＊開放文件基金會 (Open Document Foundation) 的 Libre Office，是 Open Office 的分支。
＊NeoOffice，OS X 平台上以 Java 為基礎的 OpenOffice 分支。
＊Calligra，運行在 Windows、Linux、FreeBSD、OS X 上。

開源財務與會計軟體

以下三套財務套件可提供 Quicken、Sage、QuickBooks 等商業套件的開源替代方案：

＊GnuCash (Windows、OS X、Linux) 協助微型企業實施專業會計原則，並追蹤銀行賬戶、收入和支出，以確保財務報告的精準。
＊TurboCASH (Windows)，針對中小型企業市場，提供總帳以及過帳與製作財務報告等核心功能。該產品支援 80 個不同地區的稅制，包括美國與英國。
＊最後，xTuple 提供 Postbooks (Windows、OS X、Linux、BSD) 的自由與商業支援版本給中大型企業。其中包括會計 (總帳、應收賬款和應付賬款、銀行對帳、財務報告)、銷售、客戶關係管理 (CRM)、庫存和分銷等企業管理功能。

開源企業資源規劃軟體系統

企業資源規劃 (ERP) 軟體複雜又非常昂貴，但也有 SAP 與 Microsoft Dynamics 之外的開源方案：

＊知名而功能全面的開源 EPR 套件 ADempiere (Windows、OS X、Linux、Unix) 提供會計、生產管理、物料管理、財務、人力資源、專案管理和維護管理功能。
＊OFBiz 是 Apache 基金會以 Java 為基礎的多平台企業業務套件，包含 ERP、會計、客戶關係管理、供應鏈管理、生產資源管理，以及企業資產管理功能。
＊OpenERP (Windows 與 Linux) 提供一整套的應用程式，包含銷售管理、會計與財務、招聘、採購管理、生產資源管理。商業版本包含支援、自動更新、無限臭蟲修復保證，每人每月收費約 50 美元。

開源客戶關係管理軟體選擇

利基廠商、軟體即服務業者如 Salesforce.com，以及 Oracle 等大型軟體公司都提供了商業客戶關係管理軟體。這部分有三套開源替代方案：
＊SugarCRM 社群版本 (Windows、OS X、Linux、UNIX) 是全面性客戶關係管理產品無支援的自由版本，其中包含了銷售自動化、營銷活動和客戶支持。
＊OpenCRX (Windows、OS X、Linux) 的設計可滿足企業，對於銷售支持、銷售實現、營銷，以及針對客戶、合作夥伴、供應商、中介商的服務活動，提供多功能的企業內協同合作。
＊多平台的 Fat Free CRM 是一套以 Ruby on Rails 為基礎的客戶關係管理平台，具有群組合作、廣告與潛在客戶管理、聯絡人列表與商機追蹤功能。

開源通訊與電話軟體

專用交換機 (PBX) 硬體通常非常昂貴，但以軟體為基礎的 PBX 的出現，大幅降低了 PBX 的成本。開源 PBX 市場主要由 Asterisk 所主導。

＊AsteriskNOW (Linux) 是易於安裝的 IP PBX，附有 FreePBX 管理圖形介面。Asterisk 專案是由 Digium 所贊助，該公司提供該 PBX 的商業版本。
＊Elastix (Linux) 以 Asterisk 電話軟體為基礎，但多了來自其他開源專案的傳真、即時通信和電子郵件整合。功能包括語音郵件、傳真到電子郵件、軟體電話、虛擬會議室和通話錄音支援。

開源內容管理系統

內容管理系統 (CMS) 能用來營運網站，全球許多大型網站使用了跨平台的開源內容管理系統。

＊知名網站如經濟學人 (The Economist)、Examiner.com、白宮 (The White House) 都使用了 Drupal。其功能包含用戶帳戶註冊與維護、選單管理、RSS 摘要、客制化頁面佈局、系統管理。
＊WordPress 一開始是部落格系統，但逐漸發展成完整的內容管理系統，有數千種插件、widgets、佈景主題可用。它是網路上最受歡迎的部落格平台，網際網路前 1 千萬大網站中，約有 20% 使用這套系統。
＊僅次於 WordPress 的是受到哈佛大學和花旗銀行等組織採用的 Joomla。Joomla! 延伸套件目錄 (Joomla! Extension Directory) 裡可以找到數千種免費和商業套件可用。
＊以 Java 為基礎的 OpenCMS 提供了基於瀏覽器的工作環境，以及資源、用戶、工作流管理。

開源電子商務工具

電子商務軟體套件包含了從產品展示、購物車、結帳與付費處理所有的一切。

＊OpenCart 是針對中小型零售商的完整購物車，其中包含訂單管理、多種付費閘道，提供用戶產品評論與評分功能，還有終生免費的社群支援。
＊PrestaShop 是知名的易用平台，提供了產品展示、翻譯、行銷、本地化、稅款支援，還能將產品匯出至 eBay。有付費的支援服務。
＊從 osCommerce 分支出來的老牌電子商務平台 Zen Cart，主打開發者與進階用戶。功能包含折扣券、禮品券和多種付款方式。

◎本文翻譯自 CIO，原作者為 Paul Rubens：
http://www.cio.com/article/743211/How_to_Run_Your_Small_Business_With_Free_Open_Source_Software?page=1
_______________________________________________________________

■ [自由專欄] 第三部門中的開放源碼

謝良奇／編譯

第三部門 (Third-sector) 組織傳統上對更動基礎設施抱持謹慎態度，不過更新至開放源碼軟體不但好處多多，還能降低整體 IT 成本。

第三部門的多樣化程度可比商業界，從只有幾位義工的小的地方慈善機構，到和大企業同樣複雜的跨國組織都有。慈善機構本質上就對改變抱持謹慎，特別是牽涉到把錢花在機構的基礎設施上，而不是其核心目標時。不過，當為了提高效率，必須升級 IT 系統的時刻到來時，第三部門的資訊長或網路管理者為何應該考慮開放源碼軟體呢？

免費

喔，當然，不過只有少數慈善機構或組織，能在日常工作之外，有餘裕派遣閒置人員專責於設置新 IT 系統：他們需要專家咨詢服務提供協助，當然也得支付費用。不過呢，長遠來看這還是比私有伺服器軟體每年的授權費便宜。

適應各種需求

小的慈善機構可以用最簡單的組態，使用標準開放源碼應用軟體，而大型組織則能以開放源碼系統，作為建構確切符合其需求的自有專業應用程式的基礎。

避免依賴廠商

開放源碼軟體與 Linux 不僅是可免費取得，授權條款還能避免被特定廠商綁定 (vendor lock-in)。開放源碼軟體在資料儲存上使用開放標準，因此你可以自由將資料搬移至不同的應用軟體，或在任何時間點，把維護合約交給其他公司。這一點可以讓開發者與顧問公司更加用心。

具延展性

Linux 作業系統運行在智慧型手機上，也推動著 Google 的全球網路。小型慈善機構可能跑一台 Linux 伺服器，大型組織可能需要多一點。不論你的組織規模為何，你的 IT 需求不可避免地會逐漸成長。或許你會受到更多資助者支持，為更多客戶執行更多計劃，並雇用更多人員與義工。就算你在服務提供方面維持現況，你也很可能會向更多來源收集更多資料，並且需要加快處理速度以便維持效率。如果你的軟體免費，增加更多伺服器、工作站、儲存空間會便宜許多。

支援虛擬化

即使你的組織成長迅速，也不太可能追得上 IT 硬體的發展腳步。這通常表示若干舊有伺服器系統可以合併為單一伺服器，用來執行若干虛擬機器。在 Linux 上，虛擬化已經是作業系統核心的一部分。

雲端支援就緒

雲端提供第三部門組織一個無需龐大先期投資，也能現代化其 IT 的途徑。如果你能夠在需要時增添儲存空間、運算能力，甚至是軟體，那麼何必要建造與部署新的伺服器機房或新的資料中心呢。所有主要的雲端供應商在其系統上都使用 Linux，在你的系統上使用雲端支援就緒的 Linux 系統，可以讓整合更為簡單。你的 Linux 與開放源碼軟體伙伴，能夠協助你建立混合雲端系統，讓你的系統在需求高峰時爆發其規模。

待辦事項

＊想一想你的組織成長速度以及你現有的 IT 系統能否跟上腳步
＊研究英國政府為何要求優先使用開放源碼技術
＊如果你想最大化你 IT 基礎設施的投資回報率與總擁有成本，找個 Linux 與開放源碼軟體顧問談談。


◎本文翻譯自 Linux IT，原作者為 Simon Mitchell：
http://www.linuxit.com/blog/bid/320521/Open-Source-in-the-Third-Sector-What-You-Must-Know?utm_source=feedburner&utm_medium=feed&utm_campaign=Feed%3A+LinuxIT+%28LinuxIT+Blog%29
_______________________________________________________________

■ [自由專欄] 開放源碼讓我成為現在的我

謝良奇／編譯

我之前是一名 PHP 自由開發者，我也會某些前端技術，並為小型以下的本地公司工作。那時我最好的工作，是在義大利一家電視遊戲代理商。客戶雖然不錯，但是無可否認工作很無聊，有時甚至令人沮喪。我知道我的能力不止如此，所以有種被困在流沙中的感覺。

我職業生涯中一個最重要的決定，就是開始開發開放源碼軟體，並為此寫部落格。我從一些很無聊的東西開始，像是 PHP 的乾淨網址產生器或 onClick 延遲移除，最後寫到 iScroll 與小工具 Add to Homescreen。

我選擇我找到最自由的授權 (MIT)，來自全世界的許多公司和我接洽，請我做客制化與新功能。曾經我每小時收費約 60 美元，但是因為工作要求讓我應接不暇，我後來不得不每天調高收費。現在我依然是自由開發者，不過我為 Microsoft 與 Google 工作，收費是每小時 150 美元。

開放源碼打開了我的知名度，不過不只是瀏覽量而已。開放源碼會讓你成為更好的開發者，它強迫你和其他開發者作比較，而這對一位寫程式的人來說是最好的鍛鍊。

比起任何我讀過的指南、教學、書籍，在問題追蹤系統發表建議的人，讓我學到更多的 javascript。開放源碼軟體或許也讓我成為了更謙卑的開發者。我了解到即使修補小部份程式碼所要耗費的心力，向其他人的代碼庫提交臭蟲時，我不再那麼嚴苛。

這只是故事的一部分。

你不是為了名利（或金錢）釋出開放源碼軟體。或許一開始這是你的目的，但當你涉入其中，你會瞭解到你做得更多。無數的人們使用你的程式碼，你正在協助新創公司站穩腳步，你可能在創造新的工作機會。在你的 48 小時生命中，你可以協助數十家公司與他們的員工。

例如，有人開發了一個 WordPress 插件，基本上那是我 Add To Homescreen 工具的 PHP 包裝程式。他從中賺得超過 5 萬美元（現在或許更多了）。你或許認為我會生他的氣，但事實上我很為他（和他的用戶）開心。

另外，我越開發開放源碼軟體，就越欣賞其他開放源碼軟體並深深為此著迷。我瞭解編程安全性的意義，特別是，用戶（與我）的隱私的重要性。

我之前是一名忠實的 Apple 用戶，因為其產品美觀且運作順暢，不過有許多事比花俏介面和像素完美漸層更加重要。如今我只在測試時使用 Apple 產品，我的主要平台是 Linux。我可以肯定地說，開放源碼讓我變成更好的人，因此我鼓勵你用開放源碼授權釋出你的程式碼。


◎本文翻譯自 opensource.com，原作者為 Matteo Spinelli：
http://opensource.com/life/13/10/open-source-developer-story
_______________________________________________________________

■ [源碼新聞] OpenStack 大會綜合報導

謝良奇／編譯

對於日前無法造訪香港參加 OpenStack 大會 (OpenStack Summit) 的我們，以下是本次大會的重點摘錄。

＊中國企業對 OpenStack 表露的關注，讓 eWeek 的 Sean Kerner 感到訝異。在美國，圍繞 OpenStack 的顧慮之一，是儘管有一連串廠商做動作、擺姿態、到處結盟，實際的客戶採用仍是 OpenStack 邁入第四年的一大疑慮。

＊在 Ubuntu 找來 Cloud Foundry 合作，共同確保該 PaaS 在 Ubuntu OpenStack 散佈套件上的順利運作後，OpenStack PaaS 藍圖越來越耐人尋味。這項合作也呼應了 Piston 與 Cloud Foundry 更早的協議。

＊此次大會出現許多談論 OpenStack 這套 IaaS 的開放源碼框架，是否將從堆疊上移而成為 PaaS。如此一來，可能與在該框架上建構 PaaS 類似服務的生態系統合作夥伴產生衝突，也引發眾人顧慮。大會前傳出 Rackspace 的 Solum 專案，將為 OpenStack 加入類似 PaaS 功能的消息，更進一步加深上述疑慮。

＊Rackspace 以更多虛擬 CPU、SSD 與頻寬，加強其雲端伺服器，試圖將更多用戶從裸機伺服器 (bare metal servers) 拉攏至雲端。

＊一向對 VMware 不那麼友善的 Mirantis，顯然有所轉變。該公司為其 OpenStack 部署工具 Fuel，加入了對 VMware vCenter 與 NSX 技術的支援。這表示，不論是 vCenter 伺服器驅動程式在 OpenStack Nova 運算服務上、NSX 驅動程式在 OpenStack Neutron 網路上，或是 VMDK 資料儲存層 (datastore layer) 在 OpenStack Cinder Block Storage 服務上的組態設定，都可以透過 Fuel 加以自動化。去年，Mirantis 曾抨擊 VMware 加入 OpenStack 基金會一事，隨後並因為宣稱 PayPal 正以 OpenStack 取代 VMware，而引發軒然大波。


◎本文翻譯自 GIGAOM，原作者為 Barb Darrow：
http://gigaom.com/2013/11/08/catching-up-with-openstack-summit-a-news-roundup/
_______________________________________________________________

■ [源碼新聞] Red Hat 的社群 Linux，Fedora，10 歲了
	
謝良奇／編譯

Fedora 是目前最受眾人愛戴的 Linux 散佈套件之一。包括 Linus Torvalds 自己在內，頂尖的 Linux 核心開發者，都用 Fedora 來開發下一代的 Linux。對於其母公司 Red Hat 而言，Fedora 是該公司 Red Hat Enterprise Linux (RHEL) 的未來藍圖。不過，事情並非一開始就這麼順利，當 Fedora 首次推出時，收到的並非掌聲而是噓聲。

為什麼？因為 2003 年時 Red Hat 剛剛為了全力投入商業散佈套件 RHEL，而決定揚棄低階的 Linux 桌面散佈套件 Red Hat Linux。用戶一片罵聲。當時聽到的評論包括 Red Hat 背離了 Linux、Red Hat 想成為下一個 Microsoft 等等。當時一間中大型 Linux 公司 Progeny，為憤怒的 Red Hat Linux 9 用戶提供了付費支援。

Red Hat 做這個決定，是因為該公司發現自己身陷左右為難的局面。一方面，其最忠實的粉絲希望 Red Hat 持續扮演快節奏的黑客 Linux 公司，不斷地跟其他 Linux 公司一樣推出最新技術。另一方面，Red Hat 的付費客戶想要的，卻是高度穩定的商業散佈套件。

正如開放源碼雲端公司 Eucalyptus Systems 社群副總裁，同時也是 Fedora 早期專案領導人的 Greg DeKoenigsberg 所指出，我們在 Red Hat Linux 這個產品中，試圖在同一時間做到兩件事情：它試圖成為企業軟體，同時也試著成為走在尖端的儘早發表、經常發表 (release early, release often) 軟體。一旦企業發覺有兩個相互衝突的目標，就會作出拆分兩者的舉動。

樂趣與金錢？你會選哪一個？

Red Hat 的決定是往獲利靠攏。他們做了正確的決定。Red Hat 在 2012 年成為第一個破 10 億美元大關的 Linux 公司。除了 SUSE 之外，21 世紀初其它的主要 Linux 公司，包括 Caldera、MandrakeSoft（之後的 Mandriva）、Lindows 等，不是消失就是一蹶不振。

不過，在此同時，Red Hat 並不希望丟失其強大的開發者社群。因此，在社群的協助之下，誕生了 Fedora Core，其中值得特別提到的，是一開始建立 Fedora 為社群 Red Hat 軟體套件庫的 Warren Togami，以及第一位 Fedora 領導人 Bill Nottingham。Fedora 成為了第一個成功的商業支持社群 Linux 散佈套件。商業散佈套件與純開放源碼散佈套件的組合，變成了熱門的開放源碼商業模式。在 2007 年，Red Hat 將 Core 與另一個社群 Linux 專案 Extra 合併，形成了 2013 年你看到的 Fedora。

到了今天，在 Red Hat 決定同時擁有商業 Linux 與社群 Linux 的 10 年之後，Fedora 成為了最受歡迎的技術 Linux，其最尖端的程式碼帶領著許許多多的 Linux 開發者。

Red Hat 在網站上說，多虧全球各地社群貢獻者的奉獻，10 年來 Fedora 專案一直支持著開放源碼世界，大約每 6 個月，就帶來最新的功能與技術。各種先進技術，如虛擬化、雲端運算，和由軟體定義的所有一切，從 Yarrow 到 Heisenbug 的 Fedora 釋出版本持續不停地，將開放源碼推到新的高度，並解決新一代運算帶來的最複雜挑戰。

就如 Red Hat 開放源碼事務資深副總裁 Michael Tiemann 表示，沒有 Fedora，就不會有我們在主要 RHEL 更新上，所作出的那些重大決定。展望未來，現今 Fedora 領導人 Robyn Bergeron 在專訪中談到，對於 Fedora 的我們而言，重要的是要不斷地找出各種方式，讓人們感受他們對此一作業系統的貢獻是富有成效的。

Fedora 生日快樂！接下來是 Fedora 的另一個 10 年，更要持續創新！


◎本文翻譯自 ZDNet，原作者為 Steven J.Vaughan-Nichols：
http://www.zdnet.com/fedora-red-hats-community-linux-turns-10-7000022895/
_______________________________________________________________

■ [源碼新聞] Windows XP 過後：另一種方式

謝良奇／編譯

由於商業、教育、政府部門中許多人，為了 Microsoft 的 Windows XP 作業系統即將落幕而擔憂，媒體於是針對轉移到更新且更棒的 MS 作業系統 Windows 7，提供了有用的建議。有些人甚至大膽地直接換到 Windows 8.1。

可是你們這些 Windows XP 用戶之中，或許有部分人士想著，是不是有辦法在 Microsoft 決策者，同樣決定結束 Windows 7 或 8.1 時，避免面臨和目前同樣的困境。成本高昂、具破壞性且高風險的平台轉換，甚至讓部分 XP 用戶考慮乾脆跳下這台永不停止的升級列車。因為將轉換主導權交在 Microsoft 手上，可能不是你所樂見的。

許多人以「令人難以置信」，來描述自由與開放源碼軟體 (FOSS)。我們之中大多數人很難理解，為何有人會將他們勞動的成果，包括所有配方或者說原始程式碼，奉送給我們。但，他們就是這樣。

IT 媒體的企業寵兒，包括 Google、Facebook、IBM、HP、Yahoo!、Amazon、Apple、Twitter 等等，都將他們的所有業務建立在 FOSS 之上。

其他的成功企業如 RedHat 與 Acquia，甚至像是 Catalyst IT 這樣的地方企業，更是不依賴任何的私有元件。

所以呢，一所現代化的公司、組織、學校、政府機構，能夠從一個由 Windows XP 制霸的 IT 環境，轉為主要以 FOSS 打造，而不是只能接受 Microsoft 的升級路線嗎？簡單地說，能。

雖然沒有大篇幅媒體報導，全球各地都有企業、學校、城市、地區，甚至是國家，正在從 Microsoft 轉向 FOSS。

不過還是有些合理的問題存在，以下是某些常見問題：

問：我可以使用在 Windows XP 上用的相同軟體嗎？

簡單來說，可以。

像是 Gmail、Hotmail、Outlook、WordPress、Salesforce、MS Office 365/Google Docs、Xero 等軟體，以及 Facebook、Twitter 與 Trademe，都可以在 FOSS 桌面順利運作。

任何 Win XP 特定的桌面應用程式，也可以跑在 FOSS 桌面上。

Win XP 僅有的桌面應用程式，有很多你會喜歡的 FOSS 替代方案：Mozilla Firefox 網路瀏覽器、它的電子郵件同伴 Thunderbird（取代 MS Internet Explorer 與 Outlook）。至於繪圖方面，GIMP 與 Inkscape 可以取代 Adobe Photoshop 與 Illustrator。全球數以百萬計的企業都在使用主要的 FOSS 桌面生產力套件 Libre Office。

每個軟體領域，都有絕佳的 FOSS 替代方案。

問：如何從 Win XP 轉移至 FOSS 環境？

對於多數企業來說，運算環境是關鍵的基礎設施，因此我建議深思熟慮一步步進行。FOSS 環境，雖然技術上等同於 Microsoft 環境，但實際上並不一樣。

IT 轉換需要工作人員的支持與絕佳的溝通。從先導試驗開始，請組織內具有冒險精神且在技術上有自信的人加入，最好某些人已經在使用 FOSS，鼓勵這些內部先行者。

雇請有良好 FOSS 支援的供應商，協助你規劃與執行轉換。這些通常是小型且獨立又繁忙的業者。不過，逐漸地像 HP 與 IBM 等大企業也跨入了 FOSS 咨詢。

你可以在員工現在的桌面上，提供部分的 FOSS 應用程式，來進一步緩解此一轉換。上述所有的 FOSS 替代方案，都可以跑在 Windows XP 上。

一旦用戶熟悉了這些在其平常 Win XP 桌面上的應用程式後，當他們面對 FOSS 桌面時，就不會那麼陌生。

問：我朋友用的新軟體看來很棒，我也可以用嗎？

一般來說，可以。現在大多數的新軟體都是以網路應用軟體方式散佈，並使用現代網路瀏覽器中豐富的 FOSS 工具所打造。某些 Windows 與 Mac 專有的桌面軟體則是例外，不過它們也可以在 FOSS 桌面上跑。

問：FOSS 桌面，看起來怎麼樣？

FOSS 桌面不像 Win XP 只有單一設計。它有多樣化的形式與尺寸，可以加以設定迎合各種品味。Ubuntu Linux 桌面 (http://www.ubuntu.com/desktop) 是其中一個例子。

問：對某些人很重要的是：我還能繼續玩遊戲嗎？

有成千上萬種 FOSS 的遊戲與教育應用程式。知名的遊戲經銷商 Valve 已經把 Steam 移植到 FOSS 桌面，更推出了 SteamOS，這是專門的 Linux 遊戲平台。


◎本文翻譯自 Computer World，原作者為 Dave Lane：
http://www.computerworld.co.nz/article/530938/opinion_life_after_windows_xp_another_approach/
_______________________________________________________________

■ [源碼新聞] 新一代的授權方式－創用CC授權 4.0 與大家見面！

戴雅彣／編譯 

◎ 本文原載台灣創用CC 計畫，原文章連結：http://creativecommons.tw/blog/20131127。

(https://www.openfoundry.org/images/131210/cc40-itshere-275-223x199.jpg)
創用CC 授權 4.0 版在經過超過兩年的討論與努力後，終於正式跟大家見面囉！現在全世界的人都可以使用創用CC 授權 4.0，來授權自己的作品，而它也是目前最全球化、法律上最健全的創用CC 授權制度。

創用CC 授權 4.0 版作了數十項改進，讓分享和再利用創用CC 授權材料，變得比以往更簡單也更可靠。在 2011 年華沙舉辦的CC全球高峰會上，與會者就對創用CC 的進展歷程有很大的期待，訂定了很有野心的目標，而現在創用CC 授權 4.0 不只達成所有目標，甚至超越它們。 創用CC 授權 4.0 非常適合政府機關及用來發布公共部門的消息或其他數據資訊，尤其是歐盟國家，因為現在的授權範圍比以前更廣，包含了歐盟和少數其他國家 自成一格的資料庫權利。

除此之外，它還具有許多令人興奮的新特色，像是更容易閱讀、更好的組織架構、更符合一般常識的姓名標示方法，並包括一個新機制，讓非故意違反授權條件的人在及時改正後能夠自動取回他們的權利。重要的新特色如下： 

更全球化的授權

過去六年，Creative Commons 跟全球數百名自願者合作，讓 CC3.0 和更早以前的授權版本能適用在超過 60 個司法管轄領域（這項工作稱為「移植 (porting)」）。在這個過程中，我們逐漸瞭解創用CC 授權如何在全球運作，以及它們適用在各個司法領域系統中的著作權法下所產生的些微差異。我們將這個經驗用在創用CC 授權 4.0 的發展上，跟全球的專家合作，在新的授權條款上使用全球都易了解的術語，讓創用CC 授權 4.0 成為在全球都能利用的授權工具，不須再「移植」。創用CC 授權 4.0 也引進正式的翻譯系統，讓全世界的使用者都能夠以自己的母語讀懂授權條款的內容。

著作權以外的權利

在利用創用CC 授權的著作時，往往也牽涉著作權以外的權利，但是這些權力卻沒有被著作權授權條款所涵蓋，造成利用上的困擾。創用CC 授權 4.0 透過開放但嚴謹的授權條款，將與再利用行為相關卻未被授權的權利納入授權範疇。在授權說明中加入這些列舉或非列舉權利的說明，可以讓利用人更放心按照他們預期方式利用著作，也符合創用CC 授權人的授權目的。

這項特色對於具備「資料庫權利 (database rights)」的國家尤其重要，因為過去在 3.0 時代並未明確承認這些自成一格的資料庫權利，使那些國家的人民在利用創用CC 授權著作時發生困擾。創用CC 4.0 解決了這項困擾，將可適用的資料庫權利納入創用CC 授權範疇，除非授權人有特別排除的意思表示。創用CC 授權 4.0 同時也容許資料庫權利人利用創用CC 單獨授權這些資料庫權利。

除此之外，創用CC 授權 4.0 統一且明確表明，為了符合授權目的，部分著作權人的著作人格權、公開權、隱私權，在必要限度內是被認為放棄的 (waived)。雖然在 3.0 時代許多人都已經清楚自己上述的權利會在授權目的範圍內被限制，但創用CC 授權 4.0 讓這項規定更清楚。

符合一般常識的姓名標示方法

創用CC 授權 4.0 微幅調整姓名標示的要求，讓它更符合實務需求。新授權條款明確允許被授權人可以只標示一個連接到姓名標示資訊頁面的連結，就滿足了姓名標示的需求。這項方法早在網路上被普遍使用，更早以前的授權版本也可能容許此法，不過創用CC 授權 4.0 的出現明文承認這項方法可以使用，排除使用上的疑慮。

可選擇的匿名程度更高

如果創用CC 授權人不想要讓自己的名字跟後續改作作品有所連結，創用CC 3.0 允許授權人要求被授權人在改作作品上移除姓名標示。創用CC 授權 4.0 維持並擴張了該項規定，除了改作作品外，也可適用在重製物上，只要授權人不想要與授權後的產出作品有所連結，即便該作品並未修改原授權作品的內容或是與其他作品一起發行，都可以要求被授權人移除姓名標示。

30 天的及時改正寬限期

在過去，所有 CC 授權在被授權人違反條款時都會終止，但創用CC 授權 4.0 允許被授權人回復授權權利，只要他／她在發現後的 30 天內及時改正，不再違反條款。此寬限期與一些公眾授權規定相似，也較能反映實務上授權人與被授權人解決條款違約的方式。這項規定也讓利用清楚，只要他們立刻改正自己的違反行為，就能夠回復創用CC 授權，而不會永久喪失權利。

更容易閱讀

創用CC 授權 4.0 條款在設計上不僅比從前版本更易讀、易於了解，也更加精簡、更有組織。簡化的授權架構和平易近人的文字讓授權人和再利用人更容易清楚了解自己的權利和義務，進而增加了授權的執行力並降低利用過程的紛爭和困擾。

釐清 CC 授權運用在改作上的疑慮

「姓名標示 (BY)」和「姓名標示－非商業性 (BY-NC)」應用在改作上的困擾也在創用CC 授權 4.0 中被釐清。創用CC 授權 4.0 明確規定改作人可以授權自己利用授權後改作的作品，只要該授權不會妨礙被授權改作作品的人洽詢原著作的授權。這也是 3.0 和之前的版本適用下大家承認的利用方式，只是創用CC 授權 4.0 更明確說明這項規定，讓改作人更了解自己應遵守的授權義務。

創用CC 授權 4.0 版本的發展來自於法律和公眾授權專家以及社會大眾的通力合作，在大家堅定的努力下，創用CC 授權 4.0、公眾授權制度和 CC 組織都變得更加茁壯。在創用CC 授權 4.0 上線之後，我們會與相關的關係網路和更大的社群合作，開發法律文字的正式譯文，也會將尚未完成的新契約翻譯完成，供大眾使用。


參考來源：
http://creativecommons.org/weblog/entry/40768
http://creativecommons.org/Version4
_______________________________________________________________

■ [源碼新聞] 政府資料該採取公眾授權（Public License）或是視為公眾領域 (Public Domain) 來公開？

劉芊影／編譯 

◎ 本文原載台灣創用CC 計畫，原文章連結：http://creativecommons.tw/blog/20131129。

美國 Techdirt (http://www.techdirt.com/) 網站的創辦人 Mike Masnick 提出了一個問題：究竟政府的資訊內容應該採取創用CC 的授權方式，或者完全以公眾領域來公開(http://www.techdirt.com/articles/20110616/10445214719/does-it-make-sense-governments-to-make-their-content-creative-commons-full)？ 

他認為，所有的公部門消息都應納入公眾領域範圍才是最理想的，亦即在該等消息上面沒有任何著作權或其他相關權利的限制。其亦指出美國聯邦政府下述政策為一良好政策：「幾乎所有由美國聯邦政府所為之作品皆自動納入公眾領域內，且不接受任何形式的著作權限制。」

不過事實上，有些聯邦政府的作品仍然具有著作權，該等作品非由聯邦政府雇員或公務人員所作，這包括由承包商或贊助者資助所為的作品；而另一部分由聯邦政府雇員或公務人員所作之作品亦僅明確代表在美國境內無著作權，但並不應被認為成為世界性的公眾領域的一部份。

這並不是說聯邦政府的政策不是一個主要的政策，他和其他層級的美國政府的政策相比確實屬之，也為美國人民和其經濟帶來巨大利益。然而，我們身處於一個全球化以及高度連結的世界，即使是主要的政策也都有改善的空間。

因此，這亦帶來一個新問題：我們應該如何改善關於公部門消息的政策?聯邦政府著作的地位在美國著作權法中皆有所指定。許多其他司法管轄權下的著作權法也都對於各自政府的著作指定其地位和特殊的限制及其例外。所以，顯然的，改變司法管轄權下的著作權法於公部門消息的地位將是最強而有力的，然而，這樣的改變並不會迅速、決定性的去影響每一個人。

在這一段時間中（預估已有好幾年），使政府所資助、持有或製造的內容和資料能夠揭開並具更佳的接近性，這樣的想法趨勢非常的巨大，然而，公部門著作權的默認確被認為是達成這項目標得阻礙。由其是在過去幾年中，政府已經開始實行他們現代化公部門消息的目標，而且有些政府機關和政治機更是尋求更快速的轉變，而行動主義的公民們則是急迫的推動清除開放政府 (open government) 運動裡潛在的阻礙。這是政府使用公眾授權的一個地方，而通常使用的則是創用cc授權。也就是說，一個政府機構、省份、城市或其他主體對於他們所持有或資助創作的享有著作權之作品，可以選擇適合的創用cc 條款內容做開放釋出行為。而若是他們真的希望更具革新進步性，也可以選擇以 CC0 公眾領域標章的方式。

各國政府使用創用cc 授權多是以幾種固定的幾種組合，我們相信這在未來會有更多種類創用cc 是權條款地採用。而若是真得政府政策轉而使更多的政府資訊自動的成為公眾領域的一部份，我們也相當鼓勵。事實上，創用cc 現在有一工具可以標示屬於公眾領域的著作，雖然創用cc 的公眾領域標章 (The CC Public Domain Mark) 目前多用於相當古老的著作，但政府資訊若明白決定使其著作成為公眾領域內容，也可因此適用此標章，如此將是相當令人樂見的。

不過，許多的政府喜歡以著作權的方式控制公部門消息，這有時是基於良好的出發點，例如掌握資料被使用的方式以避免誤導大眾其中隱含有政府許可利用但實際上並沒有的情況等出現。但其實，採用創用cc 授權方式，其有各種機制可以防免上述及類似的顧慮，例如標示原始的 URL、標明改作的部份等。

若在公部門消息上使用創用cc授權通常也將給予大眾相比現在更多的權利。但是在此應注意，若授權條款選擇設有非商業性使用或是不可有衍生著作的限制則對於公部門消息的使用上會較具侷限性，為使公部門消息最大化其價值，企業需要能夠近用該等資料；而為了最大化人民能夠在該等內容上為各種有趣行為的能力，改作的權利應該被允許。也因此，我們傾向建議政府可以選擇使用完全開放的創用cc 工具，包括公眾領域貢獻宣告 (the CC0 Public Domain Dedication)、姓名標示條款 (BY)、姓名標示－相同方式分享 (BY-SA) 的授權條款。
_______________________________________________________________

■ [接案／工作] 迎廣科技股份有限公司－誠徵雲端研發工程師

INWIN／文

【迎廣雲端應用研發中心】

全新成立於板橋遠東園區，以研發 IaaS 雲端作業系 (CloudOS)、Virtual Desktop Infra (VDI) 雲端桌面應用，BYOD 應用以及 Big Data 相關解決方案等技術為目標。

本中心提供雲端技術相關教育訓練，您可以學習到雲端最新技術與應用。例如：虛擬化的技術，雲端虛擬網路，雲端運算 Open Stack 架構，雲端相關分散式平台架構等。


【誠徵雲端軟體研發工程師】

＊工作性質：全職。
＊上班地點：新北市板橋區遠東路 3 號 3 樓 D 室。
＊合適身份：上班族、應屆畢業生、尋找研發替代役工作。
＊學歷要求：專科以上科系要求：資訊工程相關、電機電子工程相關。


基本需求：
＊熟悉 Java / JavaScript / Shell script 等程式語言。
＊熟悉 Linux 系統的操作與架設，並在 Linux 上有開發程式的經驗。
＊了解 Open Source 運用，利用Open Source來開發相關系統應用。
＊了解 Python 程式語言為佳。


PLUS：
＊了解伺服器虛擬化的技術，使用過虛擬化的相關產品（例如：VMware / Xen / KVM。）
＊具有雲端虛擬網路相關知識與經驗。
＊雲端相關儲存裝置技術。
＊雲端運算Open Stack架構。
＊雲端相關分散式平台架構。


【應徵方式】
請檢附履歷、基本資料（學經歷、照片、聯絡方式等），寄至 jamie.ho@in-win.com.tw，何小姐收，標題請註明：應徵雲端研發工程師。將擇優通知面試，不適任者恕不退件及函覆。
_______________________________________________________________


□ 關於本報 □__________________________________________________

◎ 主編︰洪華超
◎ 法律專欄編輯︰葛冬梅
◎ 執行編輯︰王怡凱、陳蕙蓁
◎ 外稿編譯︰林誠夏、黃郁文、謝良奇

本電子報自行採訪、報導、編譯、撰寫文章之智慧財產權屬於中央研究院，採用創用CC「姓名標示－禁止改作－非商業性」授權條款臺灣 3.0 版授權散布，歡迎在不變更內容的前提下，以任何形式重製與散布本報，但必須遵守下列義務︰(1) 不得為商業目的之利用；(2) 必須標明本電子報智慧財產權屬於中央研究院；(3) 完整引用本著作權說明。

若欲以創用CC「姓名標示－禁止改作－非商業性」授權條款臺灣 3.0 版以外的方式利用上述文章，請與自由軟體鑄造場編輯群(ossfepaper at openfoundry.org) 聯絡。

非自由軟體鑄造場自行撰寫的單篇文章，其智慧財產權利屬於原作者所有，其以非專屬的方式授權予自由軟體鑄造場運用，而與本電子報其他文章併以創用 CC「姓名標示－禁止改作－非商業性」授權條款臺灣 3.0 版的方式進行散布。

若欲以創用CC「姓名標示－禁止改作－非商業性」授權條款臺灣 3.0 版以外的方式利用個別作者的文章，請自行與該作者聯繫，或透過自由軟體鑄造場編輯群 (ossfepaper at openfoundry.org) 來轉發聯絡訊息。

授權條款全文請見︰
http://creativecommons.org/licenses/by-sa/3.0/tw/legalcode
授權條款簡介請見︰
http://creativecommons.org/licenses/by-sa/3.0/tw/deed.zh_TW

若欲訂閱本電子報，請至以下網址︰
http://www.openfoundry.org/tw/news

如欲取消訂閱這份電子報，可透過自由軟體鑄造場新聞首頁左上方之自動退訂機制︰
http://www.openfoundry.org/tw/news

或寄發電子郵件至︰ossfepaper@openfoundry.org，以進行人工退訂。