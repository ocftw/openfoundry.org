________________________________________________________________

□■□ 自由軟體鑄造場電子報第 207 期 | 2012/11/13 □■□
________________________________________________________________

◎ 本期主題︰MyPaint-今天來畫圖吧！
◎ 訂閱網址︰http://www.openfoundry.org/tw/news/
◎ 下次發報時間︰2012/11/27

□ 本期標題 □__________________________________________________

■ [源碼秘技] MyPaint-今天來畫圖吧！

■ [源碼秘技] 《雪凡與好朋友們的 Ren'Py 遊戲引擎初學心得提示》第三回：電子小說快速上手！

■ [源碼專案] YA!hook - Yahoo Open Hack Day 2012 參賽經驗分享

■ [源碼新聞] 自由軟體鑄造場釋出「自由開源軟體推動策略建議書」

■ [源碼新聞] 自由開源軟體的推展正於中國大陸產生抵銷盜版行為的正面效應

■ [源碼新聞] Ubuntu 13.04 將捨棄 Alpha 版本

■ [源碼新聞] 英國政府確立開放標準須以零授權金為前提要件！

■ [源碼新聞] 電子書編輯軟體 Sigil 0.6.0 發佈

■ [源碼新聞] 歐洲自由軟體基金會參與律師表示：更動行動裝置權限不會讓歐盟的法定擔保責任自動失效

■ [源碼新聞] SITCON 2013 學生計算機年會 - 議程徵稿啟事 (2012/11/11 更新)

■ [源碼新聞] Ubuntu 12.10 Release Party @ Taiwan 系列活動即將開跑！

■ [源碼新聞] 知識領航 - 高軟產業新聚落 - 11月24日（六）高雄軟體園區知識型企業聯展
_______________________________________________________________


□ 本期內容 □__________________________________________________

■ [源碼秘技] MyPaint-今天來畫圖吧！

林雪凡／文

(http://www.openfoundry.org/images/121009/MyPaint/00.gif)
軟體名稱 ：MyPaint
介紹版本：1.0.0
官網：http://mypaint.intilinux.com/
授權 ：GPL-2.0+


簡介

MyPaint 是一款搭配繪圖板使用的，專門供藝術家進行手繪的軟體。它擅長模擬各種現實世界中的畫筆效果 。

需留意的是，它是一款繪圖軟體，而非修圖軟體。其本身並沒有色調調整、圖層平移旋轉、濾鏡等等的修圖功能。假如使用者沒有繪圖能力或不願意花時間畫圖，那它就毫無用武之地。但反過來說，若願意拿起筆，在 CG 手繪領域中，這是筆者用過最好用的軟體。強烈推荐各位繪圖者嘗試看看。


支援平台

MyPaint 支援 Windows 32 & 64 bit（含 portable 版本）、Mac OS X、FreeBSD 與 Linux 版。

不管您的平台是什麼，請參考此處的資料安裝下載：http://mypaint.intilinux.com/?page_id=6


主要功能介紹
(http://www.openfoundry.org/images/121009/MyPaint/01.jpg)
▲ 圖1：MyPaint 的主介面


MyPaint 是介面極簡主義的實行者，其介面非常簡單，將游標移上去試試看就知道了，筆著認為沒有刻意介紹的必要，還是讓我們直接進入功能部份吧。

以下提及的快速鍵，都是指預設鍵位。

MyPaint 中絕大多數功能，包括一些本文中沒有介紹到的功能，都可以從左上角的「MyPaint」按鈕叫出， 請多多利用參考。

改變螢幕顯示方式

基本上分為四種：

平移
　　按住滑鼠中鍵拖曳游標，可平移當前的顯示範圍－這大概是 MyPaint 使用者最常用的功能了。

縮放
　　縮小（拉遠）的快速鍵為 ","；放大（拉近）的快速鍵為 "."。此外，也可以透過滾動滑鼠滾輪來控制縮放。

旋轉
　　"Ctrl + ←" 與 "Ctrl + →" 可旋轉圖片顯示角度。使用者可旋轉整張圖的呈現方向，而不用把實體繪圖版給轉來轉去的。

鏡射
　　水平鏡射為 "i"，垂直鏡射為 "u"。這在檢查圖畫對稱性時還蠻好用的，不然繪圖技術還不夠成熟的繪者，有時會被自己的畫圖習慣給騙倒。翻轉一下就能一目了然了。

請注意，以上功能僅僅只是改變「顯示」而已，實際的圖片資料並沒有變化。順便一提，若想要恢復預設視野，可用 ＜F12＞ 鍵復位。

您還可以用 ＜F11＞ 按鈕，將 MyPaint 轉為全螢幕模式。

筆刷控制

畫到一半想切換筆刷，怎麼做最快？

標準做法是按下 "b" 鍵，筆刷選擇視窗會立刻在游標位置冒出來，供您選擇，並在選好後自動關閉。

(http://www.openfoundry.org/images/121009/MyPaint/02.jpg)
▲ 圖2：透過 B 鍵叫出的 MyPaint 筆刷選擇視窗。


更快的做法是使用數字鍵。

在預設的熱鍵設定下，您可按 "Ctrl + 數字鍵" 紀錄當前使用的筆刷，並在日後用同一個數字鍵將筆刷叫回來。可用的數字鍵為 0~9，總共可設定 10 個快捷筆刷。

MyPaint 提供了傳統筆刷 35 種，實驗性筆刷 23 種，此外還有預裝一些社群分享的優秀筆刷包，筆刷總數破百項。強烈建議同好們將內部附贈的筆刷都試上兩下，並將最順手的那幾樣拖到 Favorites 分類中，方便查找。

如果想嘗試更多社群筆刷包，請參考這裡：http://wiki.mypaint.info/Brush_Packages

筆刷快速鍵與渲染模式

放大筆刷
　　"f"

縮小筆刷
　　"d"

筆刷更加不透明
　　"s"

筆刷減少不透明（更透明）
　　"a"

除此之外，還有兩項很好用的筆刷模式可以選。

第一項是橡皮擦模式。使用者可透過快速鍵 "e"，讓當前的筆刷在一般模式與橡皮擦模式之間切換。在橡皮擦模式時，筆刷本身的透明度、形狀、硬度等，全都和普通模式相同，然而一旦刷下去，本來該塗上顏色的地方卻會減去顏色。

另一項，則是「透明度鎖定模式」。

使用者可按 "Shift + l" 切換透明度鎖定模式。當本模式啟用時，筆刷在繪製過程中將不會改變任何像素 的透明度；換句話說，只有已經被畫過、被使用者塗過顏色的地方才會改變，至於原本沒塗色的地方，再怎麼塗抹還是空空如也。巧妙使用本功能，將可避免大量「塗出界」的麻煩問題。

色彩控制

除了沒有預設色票有點不方便（偷懶）以外，MyPaint 的檢色方式可謂五花八門，豐富異常。

"t" 與 "g" 可分別開啟方形與三角形的檢色器。

您可以按 "r" 鍵來快速撿取當前游標處的色彩，如同其他軟體中的滴管工具那樣；此外還可用滑鼠右鍵或 "x" 鍵，叫回先前用過的顏色（MyPaint 會自動記錄最近用過的 5 種顏色，重複按鍵可依序叫回）。

撿取相關色

按下 "v" 鍵，可以當前顏色為中心，選取與其相關的顏色。請見下圖：

(http://www.openfoundry.org/images/121009/MyPaint/03.jpg)
▲ 圖3：這是紅色 50% 彩度、50% 明度時的相關色選取器示意圖，以此說明。


因為筆者感覺這東西還蠻實用的，故稍微介紹一下。以下會用到色彩學專有名詞，腦仁發脹的同學大可繞過本章

首先，選取器正中央的顏色，就是您當前所用的顏色。

＊米字型的八條通道中，色相 (Hue) 全都相同。
＊橫軸代表明度 (Lightness)，愈右邊愈亮。
＊縱軸代表彩度（Saturation，又叫飽和度），愈上方彩度愈高。

邊緣處表示可能值的極限，所以米字左上角意味著理論純黑（彩度最高明度最低），右下角意味著理論純白 （彩度最低明度最高）。

米字區域是最好用的，請試試看順不順手。

(http://www.openfoundry.org/images/121009/MyPaint/04.jpg)
▲ 圖4：圓扇形區域含義解說


再看由八片扇型所組成的圓，這八片扇形中的每個點，全都擁有相同的明度。然而隨著距離圓心愈遠，色相也就偏離原始色彩愈多。另一方面，愈接近 270 度（正下方）的地方，彩度也愈接近零（純灰色），反之愈靠近 90 度（正上方）的地方彩度也愈高（純彩色）。

光靠文字很難理解的，請看圖確認。

最外側剩餘的零碎部份，則是一條完整的色相環，右邊 0 度位置就是當前的色相值。這條色相環上，所有位置都共享相同的彩度，但明度方面則是愈接近邊緣愈高，接近當前的明度，而靠內的環狀區域，明度則劇降為零。

外側的零碎部份並不好用，所以也不附圖解了，主要是顏色會愈選愈暗，且色相涵蓋範圍太廣，很難選得準，不如直接用撿色器來撿色還比較容易下手。


圖層操作

無限大小的圖層

電腦繪圖中，最重要也最基本的概念，大概就是圖層 (layer) 了。

和其他繪圖軟體相同，MyPaint 同樣擁有圖層的概念。您可在圖片內新建圖層、切換圖層、設定某些圖層顯 示或不顯示、在不同的圖層上面任意塗鴉。


【圖層動態伸展】

技術上來說，MyPaint 會在筆劃超出現有圖層邊界時，自動伸展當前的圖層大小；但另一方面，即使您事後擦掉筆劃，圖層大小也不會重新縮小回來。

若您畫圖時老是把記憶體揮霍一空，硬碟嘎嘎作響，最好留意一下 MyPaint 的這個特性。


和其他軟體不同的是，MyPaint 的圖層大小是無限的，是能動態伸展的。總而言之，它沒有硬性規定圖層的 「邊界」。

這在作畫中非常方便。不用預估圖片大小，可直接動筆開畫。

背景

在圖層選單中有一個「背景」項目，點它就能叫出「背景對話框」。使用者可在背景對話框中選擇當前這張圖的背景為何。

(http://www.openfoundry.org/images/121009/MyPaint/05.jpg)
▲ 圖5：MyPaint 的背景選擇對話框


預設可供選擇的背景非常多，包括各種顏色的紙（含紙紋）、布紋、製圖用方格紙、電繪中代表透明的黑白相間棋盤格點、石料等等。

此外也可以選擇純色作為背景。

圖層操作

(http://www.openfoundry.org/images/121009/MyPaint/06.jpg)
▲ 圖6：MyPaint 的圖層控制視窗


切換圖層
　　＜pageup＞、＜pagedown＞，可立刻切換到上一個圖層與下一個圖層。

新建圖層
　　Ctrl + PageUp、Ctrl + PageDown，在當前圖層的上方或下方建立新圖層。這快捷鍵我用得很頻繁，非常實用，大力推荐記住。

刪除圖層
　　Shift + Delete。

向下合併圖層
　　Ctrl + Delete。


除了上述快捷功能以外，透過圖層子視窗，各圖層還可以調整透明度與混色模式。混色模式包括了色彩增殖與燃燒等幾種常被畫家用到的模式，但也有不少 GIMP 有的混色模式，MyPaint 這裡並沒有提供。

此處特別提醒一下：MyPaint 中，＜F2＞「並非」用於圖層更名。誤按的話會將您的圖片改存到廢料位置。雖然這不會害您遺失資料，但還是小心點比較好。

Scratchpad

Scratchpad 是一個額外的小繪圖版，想用它來幹什麼 MyPaint 官方並沒有硬性規定，不過網路上多數人似乎都將它當成調色盤或臨時塗鴉板來用。

您可在上面塗上您慣用的顏色作為色票，以便隨時點取使用。

示範見： http://wiki.mypaint.info/Scratchpads

檔案操作

MyPaint 預設的存檔格式是 .ora (OpenRaster)，這種格式可完整保存使用者所有的圖層資料。另外您也可透過 .ora 格式，將在 MyPaint 中畫好的圖扔到 GIMP 2.8 中進行進一步處理。

（若您的 GIMP 是 2.6 版，則需要安裝插件才能支援 .ora 格式。見：http://registry.gimp.org/node/18435）

除此之外，MyPrint 也支援將檔案匯出為 png 或 jpg。特別是 MyPaint 沒有提供列印功能，故想列印圖片時，非得將圖片匯給其他軟體處理才行。

相關快速鍵：

開上次的圖
　　按 ＜F3＞，可快速讀取上次畫到一半的圖，若重複按還可以讀取更以前的圖。

開新圖
　　按 "Ctrl + n"，大量試畫圖片時利用率很高。

存檔
　　"Ctrl + s"，為了避免當機造成不幸，想到時就按一下。話又說回來，MyPaint 似乎還蠻穩定的，筆者暫時還沒當機過。

匯出
　　"Ctrl + Shift + e"，可用這功能匯出 jpg 與 png。此外畫圖畫到階段性完成時，也可以另外匯出一 份 .ora 作為備份擺著。


廢料 (Scrap)

繪畫有時很憑直覺。

許多時候，畫家隨手畫出來的圖既沒有主題，也沒有目的，甚至開畫時根本不知道自己要畫什麼。隨心所欲胡亂塗鴉的結果，畫出的東西根本無法命名、分類、收撿......但當然，也沒打算直接揉了扔掉。如何整理這些圖，實在煩人。

以上情境很常見，而「廢料」就是用來解決這類瑣事的小功能。

您可透過 ＜F2＞ 鍵，將當前的圖片存為廢料。這些廢料會被儲存在 ~/MyPaint 資料夾中，並會被自動命名為 scrap_001_a 這類名字。如果您對路徑不滿意，也可以去設定畫面中自行調節。

在上例中，001 就是廢料的編號。您可透過 ＜F6＞ 與 ＜F7＞ 立刻讀取上一份或下一份廢料；如果同一份廢料被多次儲存，則會用後綴的 abc 文字來標示版本。

您用 ＜F6＞、＜F7＞ 讀取廢料時，永遠只會讀取到最新的版本。

廢料沒什麼學問，但大大簡化了檔案管理問題，相當方便。筆者推荐使用！


其他有的沒的

復原與重做

復原上一步與重做下一步，這是所有繪圖軟體都有的功能，也是畫家最常用到的功能之一。不過快速鍵鍵位和其他軟體不太一樣，預設是 "z" 與 "y"（不用 Ctrl）。

快速選取圖層、筆刷與顏色

想像以下情境：

您新開了某個圖層 A，將某零部件用 B 筆刷搭配 C 顏色畫在這圖層上，然後又新開圖層，繼續去畫別的東西。

過了幾小時後，您突然發覺 A 圖層中畫過的東西有點瑕疵，需要修改。然而事過境遷，您現在已經換了筆刷、換了顏色、換了圖層，這下怎麼辦？一個一個全部重選，然後再畫？

放心，不用搞得那麼麻煩。

請將滑鼠游標瞄準之前畫過的地方，然後按下 "w" 鍵，MyPaint 會自動切換到該筆畫所在的圖層、並自動選定之前用過的筆刷、同時還會自動切換到畫這東西時所用的顏色......

然後？畫就對了！

自定義快速鍵

MyPaint 的所有功能，都可由使用者定義快速鍵鍵位，而定義方法也非常直觀。

方法為：

＊先打開選單，將滑鼠游標指向您想自訂快速鍵的功能選項，然後......
＊按下鍵盤按鈕。

一旦指定成功，選項上面就會出現您新指定的鍵位。

此處順便補充一下，如果新按鍵原本已被其他功能佔用，則該鍵位原本對應的功能，將會被取代為新的功能，過程中不會出現警告。筆者認為這挺合理的，畢竟若畫家不知道自己指定的快捷鍵被其他功能佔據，就表示他根本沒用到這個快捷鍵，那麼將其取代也是無所謂的。

如何復原預設值？

東西亂調無法復原？哎呀呀......雖然尷尬，偶爾也會發生這種事啦。

遇到這種狀況，官方提出的辦法是刪掉 MyPaint 的設定資料夾。

在 Linux 平台下，就是 ~/.mypaint 這個位置。

動態開關子視窗

畫圖時，螢幕上堆滿色彩選擇器、筆刷選擇器、圖層選擇器之類的小視窗，礙手礙腳兼阻礙視線，但偏偏不時又要用一下，不能將他們全部關掉......這下怎麼辦呢？

在這方面，MyPaint 的操作和 GIMP 一樣，您可以用＜tab＞鍵一次隱藏所有小視窗；而再按一次，就會將先前隱藏的小視窗重新顯示出來。



推荐連結

＊官方導覽文件：
    http://mypaint.intilinux.com/?page_id=3
＊英文維基百科關於 OpenRaster 的說明：
    http://en.wikipedia.org/wiki/OpenRaster
＊供 GIMP 2.6 版使用的 *.ora 讀取外掛：
    http://registry.gimp.org/node/18435
＊如果您嫌筆刷不夠用想要自製筆刷，請從這頁開始：
    http://mypaint.intilinux.com/?page_id=173
＊MyPaint 的開發版本倉庫，幾乎每天都有新程式碼被推入，開發者們活力十足。當引頸企盼新版本時大可望梅止渴一下，不　然用 git 抓來自己編譯也成：
    http://gitorious.org/mypaint
_______________________________________________________________

■ [源碼秘技] 《雪凡與好朋友們的 Ren'Py 遊戲引擎初學心得提示》第三回：電子小說快速上手！

林雪凡／文

嗨！各位觀眾大家好，我是雪凡......

(http://www.openfoundry.org/images/121113/RenPy/Head_Arrow_1_8.jpg)「各位好，我是愛洛 (arrow)！」

(http://www.openfoundry.org/images/121113/RenPy/Head_Info_1_5.jpg)「我是音符 (info) 呀。」

(http://www.openfoundry.org/images/121113/RenPy/Head_Secure_1_7.jpg)「嘛，我是絲蔻兒 (secure)。」

(http://www.openfoundry.org/images/121113/RenPy/Head_Info_1_3.jpg、http://www.openfoundry.org/images/121113/RenPy/Head_Arrow_1_5.jpg、http://www.openfoundry.org/images/121113/RenPy/Head_Secure_1_1.jpg)「很高興見到大家，我們是概念少女 (https://sites.google.com/site/conceptgirls/home) 們。」

(http://www.openfoundry.org/images/121113/RenPy/Head_Arrow_1_5.jpg)謝謝各位的自我介紹，那個......

「ㄟ豆～歡迎各位螢幕前的觀眾們，準時收看『好朋友與雪凡們的 Ren'Py 遊戲引擎初學心得提示』第三回：電子小說快速上手！」

啊啊......台詞被搶走了......而且好像有什麼地方怪怪的......！

(http://www.openfoundry.org/images/121113/RenPy/Head_Info_1_4.jpg)「本回將概述如何運用 Ren'Py 遊戲引擎，編寫一本基本的電子小說。」

(http://www.openfoundry.org/images/121113/RenPy/Head_Secure_1_4.jpg)「相關的前置作業與必要觀念，主持人都會像個奴隸一般地進行解說。」

(http://www.openfoundry.org/images/121113/RenPy/Head_Info_1_1.jpg)「除此之外......那個，這次我們還提供了一份特別範例哦。」

(http://www.openfoundry.org/images/121113/RenPy/Head_Arrow_1_4.jpg)「踩在遊戲製作的康莊大道上......戰士們啊！讓我們果斷而又勇壯地前進吧！奏樂！」

......

(http://www.openfoundry.org/images/121113/RenPy/Head_Secure_1_5.jpg)「對嗎？」

喂喂......

好吧，謝謝，非常正確，就是這樣。你們滿意了嗎？

（搶回麥克風！）不過，因為該講可講的東西實在太多太囉唆，本回的實操部份，雪凡沒打算詳細說明細節與背後原因。您只要照著我說的做，就能達成效果。為了後續深入時有能力自行做實驗，這邊我們會衝得稍微快一點！

本章完成之後，您應該就能用 Ren'Py 撰寫出最基本的電子小說了。

那麼，請各位跟上。

(http://www.openfoundry.org/images/121113/RenPy/Head_Arrow_1_5.jpg)「啊啊，上次沒戲份，這次可要好好表現囉！」

Ｌｅｔ’ｓ Ｇｏ！



腳本檔案

請打開您的 script.rpy 檔案。

今天的主角就是它了。

(http://www.openfoundry.org/images/121113/RenPy/renpy_03_01_script_rpy.jpg)
▲ 圖1：script.rpy 檔案的初始狀態，裡面記錄了關於劇情如何發展的指示。

script.rpy 檔案，記錄了玩家在遊戲主選單中，按下「開始遊戲」按鈕後，遊戲具體會做些什麼事情。精確地說，當您按下「開始遊戲」按鈕後，Ren'Py 引擎將會從 "label start:" 的位置開始往下運行。

以上圖的腳本為例，這遊戲總共會執行三行命令：兩行 e 開頭的對話，加上一行 return。

您現在看不懂這些語句沒關係，請繼續往下翻。

我們來講講在遊戲中演出故事的方法。



對話與敘事

要演出故事情節，最重要的是旁白與對話；而要講出旁白與對話，我們得先定義出誰是「敘事者」。


定義敘事者

請注意 script.rpy 檔案最上方那行。它是這樣寫的。

define e = Character('Eileen', color="#c8ffc8")

這就是敘事者的定義方法。

其格式如下：

define 角色代號 = Character('角色名字', color = "角色名字的顏色")

角色代號請用英文，並儘量取簡單一點，如此一來您之後打腳本會方便許多。

具體定義時，大約會寫成如下這般：

define info = Character('音符', color = "#fce94f")
define secure = Character('絲蔻兒', color = "#ffc9c9")
define arrow = Character('愛洛', color = "#fff3c4")


 【RGB 色碼】在 Ren'Py 遊戲中，顏色的定義方式和網頁用色的色碼定義法相同，是前面加上 # 字號的十六進位 RGB 色碼。其中 00 為最小值，FF（十進位中的意思是 255）為最大值。

舉個例子：在 #BF7C51 這個顏色中，紅色 (Red) 強度值為 BF，綠色 (Green) 強度值為 7C、藍色 (Blue) 強度值為 51，RGB 三原色混色後的結果就是最終顏色。

當然啦，就算這麼說，您大概也很難感覺出那到底是什麼顏色。推荐您去網路上搜搜 RGB 色碼表，對照著參考，這樣選色就容易多了。比方說這個：http://www.eion.com.tw/Blogger/?Pid=1008


哦還有一件事必須說明：上述定義角色用的 define 語句，強制必須寫在檔案的最頂端－－也就是第一個 block 之前。

以當前的 script.rpy 來說，您必須將 define 放在 label start: 這行前面。


【初始區段 (init block)】在 Ren'Py 的術語中，每個檔案最前面的地方被稱為初始區塊 (init block)。
初始區塊收藏著在遊戲啟動瞬間（不是按下「遊戲開始」按鈕時，而是在連遊戲主選單都還沒出現前），就必須第一時間立刻執行的腳本，所以才叫作「初始」。有些特殊類型的腳本語句只能放在初始區段裡，就好比我們剛剛介紹的 define 語句。

其實還有好幾個地方可以作為初始區段，我們日後會見到更多，這邊不表。


讓角色說話

完成角色定義後，就讓角色說話吧。

非常簡單，格式如下：

    角色代號 "對話內容"


姑且做個示範。絲蔻兒小姐請......

    secure "哈？這不用我示範吧？你是笨蛋嗎？"


(http://www.openfoundry.org/images/121113/RenPy/renpy_03_02_Welcome_demo_dialogue.jpg)
▲ 圖2：讓角色說話看看。 


絲蔻兒：「以上，示範終了！有什麼不滿嗎？」

......總之非常感謝絲蔻兒小姐的示範。


事實上，若在敘事中，我們不需要「明確指定敘事者」是誰，我們也可以不使用角色代號，而直接打字。如下：
    "不指定敘事者的狀況，用這種方式來表示旁白效果。"

(http://www.openfoundry.org/images/121113/RenPy/renpy_03_03_Welcome_demo_narration.jpg)
▲ 圖3：不指定敘事者時，畫面效果就像這樣。可使用的情境相當地多。



操作圖片的方法

角色能對話是不錯，但畫面空空如也沒有圖片，這遊戲看起來依然很不像話。

遊戲必須要有能顯示圖片，操作圖片的方法......


定義圖片

就如同敘事者一樣，圖片在使用前需 要先行定義，而且也同樣得定義在「初始區段中（檔案的最上邊）。

定義圖片的格式如下：

image 圖名 = "圖檔路徑（相對於 game）"

其中，圖名必須要用英文字；且圖名可以（但不一定要）用空白分成好幾節。

看起來就像是這樣......

image arrow confident = "char/arrow_confident.png"
image arrow smile = "char/arrow_smile.png"
image info pity = "char/info_pity.png"

以上圖片分別被命名為："arrow confident"、"arrow smile" 和 "info pity" 。

您日後可以用這些名稱，來操作他們對應到的圖片。


【圖片分類】圖片分類在 Ren'Py 中是一個很方便的小概念。

圖片的「分類」，是在定義的過程中，由圖片名稱中的「第一節」所決定的。只要圖片名稱第一節相同，就會被視為相同分類。

在上例中，三張圖總共會被分成兩類，也就是 "arrow" 與 "info"。

同分類圖片會被 Ren'Py 的顯示機制視為「相同圖片的不同變體」。在實作上，這表示同分類圖片在畫面中一次最多只會出現一張。換句話說，當您嘗試叫出第二張同類圖片時，先前的圖片將會被自動隱去，而新圖片則會繼承舊圖片的各種屬性，比方說位置與先後順序等等。其效果就等同於更換圖片一樣。

在一般的遊戲製作情境下，利用「角色名 狀態」的方式來替圖片命名，就能輕鬆替角色變更表情與動作，而不用擔心切換圖片時失誤，讓同個角色在螢幕上表現分身術之類的......您可在本文後面看到更多使用範例。

(http://www.openfoundry.org/images/121113/RenPy/Head_Info_1_1.jpg)音符：「其實除了命名以外，Ren'Py 也允許用手動的方式替圖片分類。但這種技巧使用場合很少，各位平常不理會也無所謂的。知道有這件事，要用時再找就好囉。」 



顯示、變更與移除圖片

前面把圖片定義好了之後，有三個指 令可用來操作圖片。

分別為 scene、show、hide：

＊scene
    單獨使用時，可將畫面正在顯示的圖片「一次性地全部擦掉」。如果後面有指定新圖，也會在擦除後　用新圖作為新的底圖。
    如同 scene 字面上的意思，這指令通常會在轉場的時候，被我們用來重建場景。
＊show
    顯示圖片、切換圖片、更新圖片位置等，全部都用這個。
＊hide
    將螢幕上某個圖片隱藏起來。

(http://www.openfoundry.org/images/121113/RenPy/renpy_03_04_Demo3_init.jpg)
▲ 圖4：任何遊戲都是從一片空白開始。遊戲作者必須從往其中填圖。有時候，您也會希望透過 scene 指令將螢幕清回這種狀態。

(http://www.openfoundry.org/images/121113/RenPy/renpy_03_05_Demo3_scene.jpg)
▲ 圖5：用 scene 貼出背景。順便一提，這是網路上 Uncle Mugen 用 3D 技術繪製釋出的背景，我做了一點後加工......

(http://www.openfoundry.org/images/121113/RenPy/renpy_03_06_Demo3_show.jpg)
▲ 圖6：show 圖效果，將角色放出來。


scene、show、hide 三個指令，用法上可說大同小異。以下以用途最廣的 show 為主，實際示範一下看看 ：

image library = "bg/library.png"

image info happy = "char/info_happy.png"
image arrow talk = "char/arrow_talk.png"
image arrow smile = "char/arrow_smile.png"

define info = Character('音符', color = "#fce94f")
define arrow = Character('愛洛', color = "#fff3c4")

label start:
    scene library       # 清除之前一切圖片，秀出背景作為底圖
    show arrow happy    # 秀出角色

    arrow "背景與角色登場後，就讓我們這些角色說話。"

    show arrow smile    # 更換表情

    arrow "我們可以隨著劇情變更表情與動作......總而言之就是換圖啦。"

    show info happy at right # 秀出其他角色（用 at 關鍵字可以變更圖片位置）

    info "其他角色也可能登場。"

    hide arrow          # 隱藏某些圖片。注意：這裡可以只寫圖片名字的第一節。

    arrow "讓一些角色退場，就這樣。"



【上面的範例無法執行？】本回正文中有部份範例，直接抓下貼上依然無法執行。
這是因為光有程式碼而缺少圖片檔案，所以跑不起來的關係......還請各位注意。

(http://www.openfoundry.org/images/121113/RenPy/Head_Arrow_1_9.jpg) 愛洛：「（插嘴）真要說。其實本回正文中提供的，大半都是簡化後不能騙字數的範例啦。」

啊啊，快給我住口！這也太過誠實了......

(http://www.openfoundry.org/images/121113/RenPy/Head_Arrow_1_4.jpg) 愛洛：「不過這次的附件中，還有更加完整的好範例哦，抓來看看或許不錯－－請見識我的華麗演出吧！」

............
稍等，妳不覺得誠實是種重要的美德嗎？



對 show 指令微調

show 指令後面還可以上一些額外的關鍵字。包括決定圖片位置的 "at"、決定先後順序的 "behind"、決定轉場手法的 "with" 等。

使用方式如下：

    show 圖片名 at 圖片位置 behide 其他圖片的分類名 with 轉場特效

實際使用時，會像是以下這般......

    show text normal at right behind secure with dissolve

您可省略其中任何一個項目，但順序請千萬別弄錯，比方說 with 如果您要寫，那就一定要放在最後。順序弄錯的話，遊戲會掛掉的。


定位 (at)

透過在 show 後面接上 at 指令，您可以決定圖片的顯示位置。

(http://www.openfoundry.org/images/121113/RenPy/renpy_03_07_Demo3_at.jpg)
▲ 圖7：利用 at 重新配置角色位置。

常用的位置包括：

＊right：讓圖片出現在右側。嚴格說來，圖片右下角會和遊戲畫面的右下角相接。
＊left：讓圖片出現在左側。嚴格說來，圖片左下角會和遊戲畫面的左下角相接。
＊center：圖片左右置中，且下緣會和遊戲畫面的下緣相接。如果沒有指定 at，預設 show 圖時就會 show 　在這個位置上。
＊truecenter：不但左右置中，而且還上下置中。

right、left、center 主要被用來決定角色立繪位置，而 truecenter 則可用來顯示一些其他圖片......比方說道具或Ｑ版小事件之類的。

您可以從官網手冊中 (http://www.renpy.org/doc/html/transforms.html#default-transforms) 找到所有可用的預設位置。


轉場 (with)

透過 with 關鍵字，您可以在畫面有變化時，套用轉場特效。


【轉場特效】所謂的轉場特效，就是將舊有的螢幕畫面，漸進地過渡到新畫面的一種手段。其特徵是漸進的，而不是突兀地去做切換，如果巧妙使用可以達成一些動畫效果。

(http://www.openfoundry.org/images/121113/RenPy/Head_Info_1_9.jpg) 音符：「妥善使用轉場特效，可讓遊戲質感大幅提升，感覺會很豪華說！但因為轉場本身是動畫，需要花去額外時間，所以也會相應地拖慢遊戲節奏......使用時要注意這點。」


順便一提，with 語句可以放在 show 語句後面，但也可以單獨使用，一次處理多個圖片漸變效果。

比方說，可以像下面這樣......

    show A at left
    show B at right
    with fade # 單獨使用 with 語句，而不是接在 show 語句後方。

......用上面的寫法，就可在同一次轉場中，同時變更兩張以上圖片的位置。

with 後面可接的預設轉場特效相當多，其中包括：

＊fade：畫面一黑然後轉場。
    這是會讓人感到印象深刻的強烈轉場，通常用在更換場景或時間流逝時。
＊dissolve：用半透明效果，將新圖片顯示出來。
    是最常見的轉場效果，幾乎在任何需要轉場的場合都能派上用場，效果也很好看。
＊move：圖片將從舊位置，等速度移動到新位置。
    在變更圖片位置時可以用，能將圖片滑來滑去。但最好不要同時變更圖片的實際顯示內容（如同時變    　更表情），效果會稍微有些勉強。
＊ease：等於 move，不過這是加速度運動，移動感覺更平滑。
    和 move 相同，不適合用在僅變更圖片內容的狀況下。
＊pixellate：將畫面逐步馬賽克化，並在馬賽克達到最大時變更圖片，再逐步解除馬賽克恢復成新的圖片   。
    同樣是印象強烈的轉場，效果不錯，就是使用時機稍微不好拿捏......
＊vpunch、hpunch：讓畫面左右晃動或上下晃動，就像被人打了一拳或遭遇地震那樣。
    與其說是轉場，不如說是特效。不過相當實用，遊戲中能用上的地方很多。

除此之外，還有一些其他的特效可用，您可以自行試試。不過我覺得預設轉場中，好用的似乎只有這些，其他的效果都太那個，呃，特別了一點。您可以從這邊 (http://www.renpy.org/doc/html/transitions.html#pre-defined-transitions) 查到所有可用項目。


遮蓋 (behind)

最後補充一下 "behind" 指令。

就 Ren'Py 的預設行為而言，比較晚才被顯示的圖片，會蓋住先前顯示過的圖片。舉例來說：

    show A
    show B
    # 如果兩張圖有重疊，則重疊的部份，先出現的 A 會被後出現的 B 蓋住。

不過，如果您在 show 圖時用了 "behind" 的指令，則新顯示的圖將會強制躲在其他圖片後面......

    show A
    show B behind A
    # 如果兩張圖有重疊，B 圖會被藏在 A 圖的下面

......behind 指令用到機會較少，但偶爾需微調顯示效果時，這還真不可或缺。多少留個印象吧。



音樂與音效

腳本寫作者可以透過 play 與 stop 兩個指令，來操作遊戲中的音樂與音效。

play music "檔案名" #播放音樂

stop music #停止音樂

play sound "檔案名" #播放音效

您可以用 play music 來播放音樂，用 play sound 來播放音效。音樂與音效間的最主要差別，在於音樂會不停重播，而音效只會播出一次。因為音效不會自動重播，所以通常情形下，也就只有 music 需要使用 stop 指令。

您甚至可以用以下語句來建立一連串的播放效果。

play music ["檔案名1", "檔案名2", "檔案名3"]


 【聲道 (channel)】......技術上來說，前述腳本中的 sound 與 music，其實是「聲道 (channel)」的名稱。而 play 與 stop，則是操控指定聲道的方法。

music 與 sound 的本質是 channel 這點，會在遊戲的某些方面起影響。比方說，玩家可以在遊戲的功能選單中分別切換 music channel 與 sound channel 的音樂大小，而不會同時影響兩者。
而更進一步地，music 與 sound 不是關鍵字，這表示您還可以建立有著特殊用途的自定義 channel！甚至同時播放兩首音樂，達成動態混音效果。

自定義 channel 的特技不是人人都用得到呢，您若有需要請自行參考著資料讀讀吧。見此：http://www.renpy.org/wiki/r enpy/doc/reference/functions/renpy.music.register_channel 


透過 play 與 stop 切替音樂時，您還可以透過額外的 fadeout 與 fadein 關鍵字設定音樂淡出淡入秒數（當然 stop 是不支援淡入的）。

示範見下......

stop music fadeout 1.0 # 關閉之前的音樂，淡出時間為 1 秒。 
play music "music/coffee_shop.ogg" fadein 2.0 # 播放 coffee_shop.ogg 作為背景音樂，淡入時間為2秒。


【聲音格式】 (http://www.openfoundry.org/images/121113/RenPy/Head_Secure_1_1.jpg) 絲蔻兒：「Ren'Py 能接受的聲音檔案只有 .ogg、.mp3、.wav（wav 僅限於採用未壓縮的 PCM 編碼檔案）三種而已，餵它其他檔案是播不出來的。餵食時稍微注意一下啊。」



角色配音

Ren'Py 還有替對話播放配音的功能。關鍵在於使用 voice 指令，如下......

voice "WA00004.ogg" # 播放語音檔。
info "等、等等呀！就算突然要我說話，我也不知道要說什麼......"   # 會在這一句話的顯示期間播放語音

arrow "如果按按鈕跳到下一句話，語音沒播完也會立刻停止喵。"

voice 指令與 play sound 的主要差異在於：voice 播到一半時，若使用者按按鈕跳到下一句話，則原本播放中的語音會立刻被打斷、終止。其效果就如同在一般同類遊戲中會碰到的那樣。

雖說 voice 有提供自動打斷的特性，但當有必要的時候，您也可以用 voice sustain 命令，來避免下一句顯示內容打斷語音播放。就像下面這樣：

voice "WA00004.ogg"
info "等、等等呀！就算突然要我說話，我也不知道要說什麼......"   # 會在這一句話的顯示期間播放語音

voice sustain
"這句話顯示時，不會打斷原本的語音。"



遊戲終了

請看您 script.rpy 檔案的最下面。

    return

當您的遊戲演完結局、秀出了 Fin 圖片，又或是讓角色拉拉雜雜地說完後日談之後。您就可以用 return 命令讓遊戲跳回主選單。

其實 return 的實際表達意義比較抽象，不過對於遊戲製作來說，暫時這樣理解就可以了。



選項與劇情分歧

有了前面那些東西，您已經可以做出美觀的「單線式」電子小說了。但話又說回來，既然是遊戲，玩家當然會期待能與劇情互動，主動影響情節發展。

毫無互動算什麼遊戲呢？......是的！光看是不夠的。Good Ending 並不重要，重在參與啊！

好像有什麼奇怪的東西混進去了......不，請別在乎那些枝微末節的小事。

那麼，問題來了，要怎麼讓玩家與遊戲進行互動呢？


label：定義情節段

請先翻翻 script.rpy 檔案。在您的 script.rpy 檔案中，應該有著這樣的一行字......

label start:

若您剛剛有稍微測試過您的腳本，您應該感覺不出來它到底有什麼功能。

事實上這行指令，確實沒有具體地去做什麼事，去執行什麼行動......而僅僅就像字面那樣，只是一個「標籤」。這標籤的作用，是用來標示「下方縮進區塊 (block) 的名字為 "start"」

這邊說的「標示」，並不是標示給玩家看的，而是在遊戲引擎內部，將其標示為一個撰寫腳本時可供單獨運用的場景段。一旦用 label 標示後，Ren'Py 遊戲引擎就能透過這個名字，來使用被標示的情節段落。

用戲劇概念來說，每個 label 區塊，往往代表了戲劇中「一場戲」－－ 用許多 label 將故事分成多個場，然後讓故事不斷從上一場跳往下一場－－就是遊戲正常的進行方式。


【特別的 label："start"】 (http://www.openfoundry.org/images/121113/RenPy/Head_Arrow_1_9.jpg) 愛洛：「那個啊，"start" 這個 label，在眾多 label 中，其實還是有著特殊地位的。比較技術性的說法是，它是『開始遊戲』的按鈕所連接到的腳本對象。」

(http://www.openfoundry.org/images/121113/RenPy/Head_Arrow_1_4.jpg) 愛洛：「啊～這樣說吧，當您在遊戲主畫面選擇了「開始遊戲」時，其實程式內部所做的事，就是讓故事從名為 "start" 的區塊開始，讓腳本從這裡發展下去。嗯......至少 Ren'Py 的預設是這樣設定的啦。」



jump：跳往指定的情節段

label 能將故事切成片段。而要讓故事在各片段間切換跳躍，要依靠 jump 指令：

jump 標籤名稱

比方說......

jump start

這樣就可將故事跳往任何一個單獨的 label 位置。


選單 (menu)：讓玩家選擇路線

jump 指令單獨使用的話，也就只能讓每一場戲連接到固定的下一場戲。

為了讓遊戲能真正產生分歧，遊戲設計者通常會提供選單機制，讓玩家能透過選單做出決定，並對遊戲進程產生影響。

要提供玩家選單，最基本方法是使用 menu。

以下提供一個完整的範例，您可以把它貼到您自己的腳本裡試試：

define secure = Character('絲蔻兒', color = "#ffc9c9")

label start:

    secure "那就由我來示範一下選單 (menu) 功能。請聽好......"
    
    menu:
        secure "「咳嗯......玩家啊玩家，請問生命、宇宙以及任何事情的終極答案是什麼？」"
        
        "「？......那個......請把問題再說一遍好嗎？」":
            secure "真拿你沒辦法，那我就再說一遍。咳嗯......玩家啊玩家，請問你是狗呢，還是狗呢又或是狗呢？"

        "「等等！這我聽過，好像是4什麼......」":
            secure "哇啊，看來是有讀書的傢伙呢......不過給我注意一下著作權問題啊！"

        "「......藍綠藻？」":
            secure "（微笑）喂喂，不對吧？我問的又不是你的存在意義......"

secure "總之謝謝您誠實地回答。選單示範結束囉。"

    return

(http://www.openfoundry.org/images/121113/RenPy/renpy_03_08_Welcome_menu.jpg)
▲ 圖8：menu 產生的選單，可以讓使用者進行選擇。

一個 menu 的結構大約如下：

menu:
    "問題文字" # 本行可以省略
    "選項文字1":
        "選擇「選項文字1」後會執行的腳本內容......"
    "選項文字2":
        "選擇「選項文字2」會執行的腳本內容......"

使用 menu 請注意以下事項：

＊請看仔細啊！每個「選項文字」的後方都要加冒號 (:)，否則腳本無法運行。
＊如果您希望玩家在面對選單時，可以看見問題為何，得把「問題文字」寫在 menu 內側－－注意是 menu 　內側而不是外側。寫在外側的文字與對話，會在選單出現的同時消失掉。
＊當玩家選擇任一「選項文字」後，就會進入「選項文字」下面的腳本內容，至於其他項目下方的腳本，遊戲引擎會當作沒看到似地跳過。
＊「選項文字」區塊內的腳本，可以是任何腳本語句。這包括對話、音樂播放、圖片切換、使用 jump 語　句等......任何語句都沒問題！



判斷 (if)：讓程式選擇路線

在遊戲進行過程中，總不能每次故事分歧都讓玩家進行選擇。有很多時候，我們會先把故事早期時做出的選擇記錄到變數中，然後在故事後期，才依據變數儲存的內容對情節分支。

如果您忘了變數是什麼東西，請去複習第二回的內容。


變數指定

在使用變數之前，我們先瞭解一下此處變數的指定法：

$ 變數名 = 變數值

舉例如下：

$ relation = 3
$ name = "克拉克肯特"

變數名您可以自己取，指定方式基本上跟上一篇講的完全相同，唯一的差別在於，這前面要加上一個 "$" 符號。


【為什麼要加錢符號】因為 Ren'Py 的作者很窮......當然不是這樣！

Ren'Py (.rpy) 腳本，與 Python (.py) 語言腳本很像，但說到底，他們並不相同。
Ren'Py 遊戲引擎，提供使用者較為簡單的 .rpy 腳本來設計情節，以便略去一些瑣碎的語法與細節操作。但在遊戲引擎底層，為了更強而更大的彈性，它是使用強大而且複雜的 Python 語言來進行驅動。這表示，當您需要更進一步地控制遊戲時，您就需要直接以 Python 程式碼的形式操控遊戲引擎。

在 rpy 檔案中，透過一個 "$" 符號，我們可以快速地「進入 Python 模式」，來執行單行的 Python 語句。總之，用 "$" 開頭的行，會被視為單行的 Python 腳本解析，而不是 Ren'Py 腳本。
在 $ 後設定的變數，是 Python 中的變數，而不是 Ren'Py 中的變數－－這兩者雖然互有關係但並不相同。而 if 語句能夠處理的是 Python 變數，所以我們必須透過 $ 來指定。

(http://www.openfoundry.org/images/121113/RenPy/Head_Info_1_1.jpg) 音符：「如果您還是有點困惑，先別想太多呀。反正設定變數前，加個錢符號就對了。」


用 if 分歧

當您有了變數後，您就能透過 if 對變數進行判讀，格式如下......

    if   判斷式:
        # 當上述判斷式滿足時就會執行這邊的語句
    elif 判斷式:
        # 當前面其他的判斷式都不滿足，且本判斷滿足時，就會執行這邊的語句
    else:
        # 所有判斷式都不滿足時，執行這邊的語句。


舉例來說：

    if relation == 10: # relation 變數剛好等於 10，注意必須要用兩個 "=" 符號才能代表「等於」的意思。
        koitsu "太好了！我正在找你呢。快來幫我的忙。"
    elif relation > 5: # relation 變數大於 5 且不等於 10
        koitsu "原來是你啊。"
    else:              # 其他任何狀況。
        koitsu "你是誰啊？"


使用 if 語句時，需要注意順序：具體說來 if 一定要放在最前面，而 else 一律只能放在最後一項。除此之外，if 語句中只有 「if 項」 是必要的，如果不需要用到「elif 項」或「else 項」，則這兩者都可以直接省略不寫。

elif 可以有很多個，但 if 與 else 都只能有一個。

－－這些都算是程式設計的常識，記下來不會吃虧的啦。

if 後接的判斷式中，"==" 代表「等於」、"＞=" 代表「大於等於」、"＞" 代表 「大於」、"＜=" 代表「小於等於」、"!=" 代表「不等於」......

諸如此類，以此類推！

巧妙運用 if 指令，可在玩家察覺不到的地方，偷偷做出各種分歧情節。請務必參考著附件範例來感覺看看！



特別附加範例

(http://www.openfoundry.org/images/121113/RenPy/renpy_03_09_Demo3_title.jpg)
▲ 圖9：華麗麗的特別附加範例 ，歡迎各位享用！

本回提供了一個可供各位下載的特別附加範例。這次的心得大都有示範出來啦。長度不算太長，但應該講解得相當清楚。這就交給各位了。

(http://www.openfoundry.org/images/121113/RenPy/Head_Secure_1_7.jpg) 「有需要的話，就請各位拿走吧，拍這個範例還真挺費事的。」

請往這邊下載：http://www.openfoundry.org/tw/papers-and-teaching-materials/doc_download/1628-welcomedemo3

使用方法為：將壓縮檔解壓縮。然後將解出來的資料夾放入您的專案目錄中（就是您在啟動器中設定的 "Projects Directory" 目錄，忘記那是什麼的人快回去翻第一回！）。接著重開啟動器、打開 script.rpy 檔案，邊看檔案邊開始遊戲，試著跑一輪看看，應該十分鐘就能結束哦。



結束語

那麼今天的心得就到此結束了。

(http://www.openfoundry.org/images/121113/RenPy/Head_Arrow_1_1.jpg)「說不解釋，結果還是解釋了不少東西呀......」

是啊......真奇怪，和計劃中不一樣？大概是因為終於能實戰，心情很好的關係吧？

(http://www.openfoundry.org/images/121113/RenPy/Head_Secure_1_5.jpg)「實戰的是觀眾又不是你......」

別吐嘈啦。嗯哼，不管怎麼說，有了本回的心得，各位觀眾想要挽起袖子，做出基本的電子小說已經不成問題了－－不不不，不只是電子小說而已，就算是比較簡單的遊戲，也能過關斬將地一路解決了吧 ？

希望大家能對今日的節目感到滿意，要是能賞賜在下幾文錢那就更高興了。

(http://www.openfoundry.org/images/121113/RenPy/Head_Info_1_2.jpg)「這、這個就有點......」

嘖，乞討募款是禁止事項嗎？

好吧，這先不管。那麼之後還有什麼要講的呢？

４：３的顯示比例也該看膩了吧？不把比例與解析度律定，沒有辦法開始製作素材啊！還有那個啊，每用一張圖，就要在腳本中定義一次，是不是很煩人？角色對話的文字能否不要瞬間顯示，而能啪啦啪啦地，像說話一樣慢慢流出......？

......諸如此類，需要設定的東西還有大把可說！

欲知後事如何，請看下回分解！......

(http://www.openfoundry.org/images/121113/RenPy/Head_Info_1_1.jpg、http://www.openfoundry.org/images/121113/RenPy/Head_Arrow_1_5.jpg、http://www.openfoundry.org/images/121113/RenPy/Head_Secure_1_1.jpg) 齊聲：「敬請期待！」

 
......怎麼老搶我台詞啊你們這些傢伙！

 

（本回完！）
_______________________________________________________________

■ [源碼專案] YA!hook - Yahoo Open Hack Day 2012 參賽經驗分享

鄭鈞元／文

睽違近 3 年的 Yahoo Open Hack Day，今年又再度開戰，今年一看訊息公布後，二話不說就立刻點了報名。這次直接揪同實驗室的同學、學弟參賽，除了比較熟習彼此開發模式，溝通成本也比較少。

在比賽前一天晚上，其實根本就沒有睡，在狀態很糟的情況下完成了報到手續，面對接下來 24 小時馬拉松式的作戰。

▲ 圖1 會場內的自由發揮塗鴉牆 (http://www.openfoundry.org/images/121113/OpenHackDay/01.jpg)
(http://www.flickr.com/photos/myhsu/8113050151/in/photostream)，採用台灣創用 CC BY-ND 2.0 授權。


在第一天早上，如同往年， Yahoo! 內部有精采的技術議程分享，今年主打的是 Mojito，這是 NodeJS MVC Framework，開發者可以用 Javascript 流暢的打造網站服務，除了前後端程式語言一致，也有減少溝通成本等好處。也有遠道從美國來的工程師分享歷年 Open Hack Day 獲獎作品的特色，與評分的重點，讓我們能專注在這些點上開發程式。

我們開發專案叫 Ya!hook，是一個 Google Chrome extension，可以讓原本 Facebook 空乏的打卡頁面搖身一變，變得豐富實用。

一開始的想法是，在 Facebook 的打卡頁面上，對使用者有用的資訊寥寥無幾，我們就想結合 Yahoo! 生活+ 的資訊，自動在畫面上，補足哪些該出現的資料。像是鼎泰豐，就會秀出 Yahoo! 生活+ 上的店家資訊、食評、圖片、附近店家、同類型店家。另外我們也使用了台北市政府的停車資訊，直接把最近的停車場拉出來。 比較特別的是，如果打卡頁面是電影院的話，就直接拉了 Yahoo! 電影的時刻表，我自己覺得超級實用。

另外，我們也想在 Facebook 的活動頁面上，幫使用者加上活動當天天氣資訊，這塊的功能其實撰寫很快，把打卡頁面處理的架構，稍做修改就行了。

而專案中有使用到的 Yahoo! 的 API 或服務，分別是 Yahoo! Maps API, Yahoo! Weather API, Yahoo! 生活 + API (但其實有很多是我們想要但是 API 沒有提供到，我們就直接爬網站) 與 Yahoo! 電影的資料。

在程式的前端直接使用了 jQuery 解決，但後端程式我們不想碰觸流量、安全上面的議題，就直接選了 Google App Engine 為開發平台，用我們隊友都共同熟悉的 Python 來撰寫。

這次的比賽也嘗試了新的挑戰，是 Git 版本控制系統直接實戰 ，我自己對 Git 其實不太純熟，只簡單知道 push 與 pull 這類的基本指令，但這個比賽十分看重分工、協調、版本控管的細節，最後甚至都希望是直接在 repo 上看到 commit 的原始碼。幸好！我們這組的神手學弟，對 Git 指令簡直如數家珍，一首包辦 commit 與 merge branch 的教學工作，實戰磨練讓我是進步神速阿。

▲ 圖2 Ya!hook 擴充套件開場特效 (http://www.openfoundry.org/images/121113/OpenHackDay/02.jpg)
(http://www.flickr.com/photos/bryanyuan2/8105870191/in/photostream)，採用台灣創用 CC BY-NC-SA 2.0 授權。


在我們約完成八成程式，發現這樣是沒辦法在短短 2 分鐘內，吸引到評審的目光，於是我們就想開始來些炫技了，過程中我們是了幾種開場特效，最後選定用類似拼圖的效果，把 Ya! 跟 hook 分別組合起來。

▲ 圖3 滿滿的零食，寫程式的一半不怕會餓到 (http://www.openfoundry.org/images/121113/OpenHackDay/03.jpg)
(http://www.flickr.com/photos/myhsu/8113058083/in/photostream)，採用台灣創用 CC BY-ND 2.0 授權。


比賽過程中，無限供應的零食、飲料，是我對 Yahoo! 這家公司的第一印象，在工程師的福利真的沒話說。另外一點，留宿過夜的經驗真的很讚，明明是凌晨三、四點，當完正想倒頭就睡的時候，看到根本沒有參賽者有任何睡意，天啊，大家根本就拼了！在毫無意識的狀態下，撐到了早上，工作人員立刻緊接早操活動，也讓頭腦清醒了一點。


▲ 圖4 緊張的最後 DEMO 評選，參賽隊伍發表依序排成一列 (http://www.openfoundry.org/images/121113/OpenHackDay/04.jpg)
(http://www.flickr.com/photos/myhsu/8113076706/in/photostream)，採用台灣創用 CC BY-ND 2.0 授權。


▲ 圖5 台下坐滿評審與發表隊伍 (http://www.openfoundry.org/images/121113/OpenHackDay/05.jpg)
(http://www.flickr.com/photos/myhsu/8113046499/in/photostream)，採用台灣創用 CC BY-ND 2.0 授權。


最後的 DEMO 評審過程，大概是最難忘的參賽經驗了，評審找了創投界、學界、產業界的大咖人物，作為評審。工作人員嚴格執行了 2 分鐘的切畫面規範，後面倒數的計時讓人十分不安，提醒效果十足。參賽隊伍的報告者一次 6 位準備，依序切換畫面、計時。

觀摩別人的發表過程，也吸收經驗彌補自己的不足。讓我印象尤其深刻的「台灣中央政府預算－全民稽核系統」與「Search Bingo」根本就是神作，這些前端效果做得出神入化。


▲ 圖6 DEMO 發表時間，大家全神貫注在發表者的簡報上 (http://www.openfoundry.org/images/121113/OpenHackDay/06.jpg)
(http://www.flickr.com/photos/myhsu/8113052915/in/photostream)，採用台灣創用 CC BY-ND 2.0 授權。


在最後，我們期待頂多勾上佳作就萬幸了，連得獎要說什麼都沒有準備好，在主持人宣布我們這組拿到台灣創意工場，「最佳投資價值獎」與「第二名」時，當下根本嚇傻了，我還打了暗號給認識的工作人員說「該怎麼辦」，整個連氣勢都沒了。

參與這類型的比賽，真的是難得經驗，一方面認識各地聚集的高手外，把自己的想法實作出來，跟同一領域的朋友一起分享，絕對是對工程師是很大的吸引力，這次參賽的作品可以參考 Yahoo hacktrackr (http://hacks.developer.yahoo.com/hack/yahoo-open-hack-taiwan-2012/yahook-039/event_5/hack_383)。

如果您對我們的專案 (http://tinyurl.com/8p7hmsa) 有興趣，歡迎大家 fork (http://github.com/bryanyuan2/YahooOpenHack2012) 來玩玩看！


＊作者簡介：http://tw.linkedin.com/in/bryanyuan2
＊Yahoo hacktrackr: http://hacks.developer.yahoo.com/hack/yahoo-open-hack-taiwan-2012/yahook-039/event_5/hack_383
＊Ya!hook Chrome Extension: http://tinyurl.com/8p7hmsa
＊Github: http://github.com/bryanyuan2/YahooOpenHack2012
_______________________________________________________________

■ [源碼新聞] 自由軟體鑄造場釋出「自由開源軟體推動策略建議書」

林誠夏／文

自由開源軟體 (Free and Open Source Software, FOSS) 的開發與應用，與傳統商業軟體有著極大的差異。但不論評論者從哪個角度觀察，都必然會承認：自由開源軟體專案近十年來確實運作得非常成功，對全球的資訊產業帶來史無前例的劇烈變革。因應這樣的趨勢與發展，自由軟體鑄造場 (Open Source Software Foundry, OSSF) 透過書面報告，以 2003 年至 2012 年間，國內自由開源軟體的發展狀況為主要觀察對象，為讀者依產業、政府，及學研單位的不同立場，提綱挈領的分述各個領域裡的演變情勢，並對這些推動方式提出反思與建議，期待透過相關推動策略的調整與自由開源軟體專案的善用，能讓我國資通訊領域發展的模式，踏上增強資訊國力，以及弭平數位落差的方向。

建議書文末並提供一份「自由開源軟體前瞻專案建議列表」，以六大新興產業、四大智慧型產業，以及嵌入式應用領域為範圍，從中評選出具有一定規模、成熟度，且具前瞻性的國際自由開源軟體專案供讀者參考。此份資料與建議書本文一併以創用CC 的授權方式進行公眾釋出。 


相關文件：

＊「自由開源軟體推動策略建議書」EPUB 通用格式下載連結
http://www.openfoundry.org/tw/papers-and-teaching-materials/doc_download/1626-

＊「自由開源軟體推動策略建議書」PDF 擬真格式下載連結
http://www.openfoundry.org/tw/papers-and-teaching-materials/doc_download/1627-
_______________________________________________________________

■ [源碼新聞] 自由開源軟體的推展正於中國大陸產生抵銷盜版行為的正面效應

黃郁文／編譯

經年在大陸的盜版風潮有可能會慢慢消退，因為在當地政府的明確支持下，數家歐美公司與組織，已著手在大陸發展自由開放源碼 (Free and Open Source Software, FOSS) 的相關推展計畫。如此演變也顯示在大陸，資訊基礎建設已漸趨成熟，而必須因應未來全球愈趨整合的智財權變動。

許多大陸在地的資訊服務業，不乏以盜版活動起家的例子，但現在中國大陸政府想轉化這個現象，轉而藉著 FOSS 的推展，來競逐全球的軟體市場。不過，目前的狀況是，大陸在 FOSS 方面的技術人才仍相對缺乏，而遵守 FOSS 授權規則與源碼分享文化的部分，例如以 GPL 為代表的授權承繼分享義務，則尚待加強。舉幾個大陸推展 FOSS 的實例，像是 9 月中 OpenStack 核心成員，Intel、Sina、IBM，與 Gamewave 等，才盛大召開了 OpenStack China (http://www.openstack.org/blog/tag/china/) 會議，10 月中舉辦的 China Open Source Week 2012 (http://www.ow2.org/view/China-Open-Source-Week-2012/About)，則希望能將 FOSS 推廣至大陸的產業界，並建立合法散布 FOSS 的觀念。

大陸在 2011 年時人口已達 13 億，而隨著資訊化的需求貫入到社會的每一個角落，這意味著一個充滿潛力的軟體開發及散布市場。不過，過往大陸一地在資訊啟蒙時期，非法取用軟體程式的盜版風氣非常盛行，目前雖然由政府帶頭，定調要轉換到 FOSS 合法自由共享的應用方式，但顯然還有一段路要走。開源軟體國際聯盟 (OW2, http://www.ow2.org/) 的 CEO，Cedric Thomas 表示：「在中國大陸，首要目標是建立對 FOSS 的認識與認同，許多當地的民眾認為取得軟體的快速途徑就是直接取用盜版版本，我們希望透過 China Open Source Week 這些相關活動的舉辦，讓他們知道可以免費並合法利用 FOSS的方法。」

不過，並非每一個人都相信大陸的資訊業者，會高度遵照 GPL 這類 FOSS 授權條款的規定，對此，Open Source Matters (http://opensourcematters.org/) 的 Paul Orwig 表示：「愈多人加入 FOSS 的開發與應用行列愈好，其實只要大陸的使用者能夠遵守授權條款的規則，他們想對軟體進行什麼程度的利用都可以。只是擔憂的是，許多大陸業者可能只是想利用 FOSS 來營利，並不會積極回饋社群。」

目前的事實狀況就是，在中國大陸 Linux 的利用已然非常普遍，COPU (http://www.copu.org.cn/) 與 COSOFT (http://www.cosoft.org.cn/site/) 是大陸兩大支援 FOSS 的組織，他們與 Linux Foundation 及  Apache Software Foundation 也一直保持良好的溝通與資訊分享的合作關係，此外，還有 ICSAS (Institute of Software of the Chinese Academy of Science, http://www.is.cas.cn/)，也是另一頗具影響力的團體，相關的衍生專案還有紅旗 Linux (Red Flag Linux, http://www.redflag-linux.com/)。可以說，Linux 在大陸被推展應用已超過 10 年，可想見 FOSS 為基礎的應用方案，在大陸其實有基本的用戶數，依據分析數據，一般學生與學院職員約佔這些用戶數的 15-20％，所以相較於此，看得出來大陸的產業界，主要仍然倚賴 Microsoft 等商用軟體為其資訊應用方案。

而從分析面來看，近年驅動大陸向 FOSS 應用靠攏的動力，主要是來自嵌入式電子產業，該產業在全球競爭者的加入下，讓大家注意到 FOSS 低取得成本與快速建置的優點。再者，因嵌入式產業的公司，大都是位居產品供應鍊 (supply chain) 中間的廠商，在商品銷售上必須與位於日本與美國的品牌公司做生意，迫使這些公司積極為客戶尋求提高創新效率的方法。只是，大陸的資訊軟體產業，向來予人盜版起家且不受拘束的印象，未來為推展全球市場，其中一步棋就是好好遵守智財權相關的授權規則，大陸各地的資訊軟體公司，當然也體認到不需破解或支付授權費用，就可合法使用 FOSS 專案的好處，只是未來大陸的產業公司，是否真會以高度遵循授權規則的方式來應用 FOSS 專案，還有待後續觀察，並且，FOSS 取予和諧的生態系發展 (give and take ecosystem)，也並非單單僅靠遵守授權規則最低義務即可成功建立的，這一切都有賴將來持續的堅持與努力。

相關網址：

＊FOSS 開始抵銷中國大陸的盜版現象
http://www.linuxinsider.com/story/FOSS-Fight-Against-Chin2、s-Free-as-in-Pirated-Syndrome-76451.html

＊開源軟體國際聯盟專案網址：
http://www.ow2.org/view/About/OW2_Consortium
_______________________________________________________________

■ [源碼新聞] Ubuntu 13.04 將捨棄 Alpha 版本

黃湘婷／編譯

Ubuntu 開發者高峰會於 10 月 29 日至 11 月 1 日在丹麥的首都哥本哈根舉行，該會宣布了對於發行計畫的重大改變：代號 Raring Ringtail 的 Ubuntu 13.04 將只有一個 Beta 測試版與最終的穩定版，不會有任何的 Alpha 版或候選版，是與以往擁有眾多測試版本不同的部分。

Ubuntu QA 的社群專員 Nicholas Skaggs 表示，有別於先前固定的發行時間表，Ubuntu 13.04 在整個開發過程中，都會進行雙周整合測試，持續的更新與修正，另外每天也會發佈 ISO 映像檔 (http://cdimages.ubuntu.com/daily-live/current/)，將有自動測試的工具確保發佈的檔案沒有任何的損毀。

而這個唯一的 Beta 測試版預計於明年的 3 月 28 日發佈，雖然距今還有四個多月，但使用者不用太擔心，此次發行計畫的改變，只會發生在 Ubuntu Unity，其他發行版本如 Kubuntu, Lubuntu, Edubuntu 或是 Xubuntu 並不會有所影響，他們將有各自不同的發行時間表。

至於令人期待的最終穩定版，則同樣在原訂的 2013 年 4 月 25 號與大家見面。


相關網址

＊Ubuntu 13.04 將捨棄 Alpha 版本?
http://www.omgubuntu.co.uk/2012/10/ubuntu-13-04-to-drop-alpha-releases

＊Ubuntu 13.04：將捨棄 Alpha 版發行，僅有一次的 Beta 測試版
http://www.webupd8.org/2012/10/ubuntu-1304-alpha-releases-dropped-only.html

＊根據官方消息：Ubuntu 13.04 將捨棄 Alpha 版本
http://news.softpedia.com/news/It-s-Official-Ubuntu-13-04-Will-Drop-Alpha-Releases-303458.shtml
_______________________________________________________________

■ [源碼新聞] 英國政府確立開放標準須以零授權金為前提要件！

黃郁文／編譯

英國政府最近確立了開放標準 (open standards) 須以零授權金 (royalty free) 為前提要件！ 

英國內閣辦公室 (Cabinet Office) 於近日公告開放標準準則 (Open Standards Principles)，該準則揚棄了過往模糊不清但行之有年的「公平、合理，與非歧視性評估標準 (Fair, Reasonable, and Non-Discriminatory; FRAND)」，此一傳統評估標準認為專利格式仍可列入國家標準之列，只要其專利權人以公平、合理，與非歧視的授權政策來運用該項專利。FRAND 這樣的判斷標準雖然看似合理，但實際執行上徒增許多的解釋空間與灰色地帶。故英國內閣辦公室重新定義了開放標準的準則，明訂未來的開放標準，需合乎：透明、協力程序、無或低成本即可公平近用 (fair access)、成熟可用，並廣為市場所認同與接受等各項要件。

相關的重要原則分列如下：

＊使用者需求是訂定開放標準的核心考量因素；
＊訂立出來的開放標準，必須要讓不同的供應商能在公平的基礎上進行競爭；
＊開放標準亦須同時具備變動與應變彈性；
＊導入開放標準的相關花費必須在合理範圍之內；
＊開放標準的評選，必須廣納相關資訊，以進行審慎考量； 
＊開放標準的選擇程序必須是公平與透明的；
＊開放標準的相關格式與導入流程，也必須在公平與透明的基礎上運作。

對於自由開源軟體專案的參與者與推動者來說，重要的是此一準則同時要求開放標準，必須在零授權金的基礎上授權給使用者運用，讓使用者能夠同時將標準導入與佈署在自由開源軟體方案與私有軟體 (proprietary software) 方案內，並讓基於此標準運作的程式，彼此間可以藉由標準進行溝通與互動。

開放源碼促進會 (Open Source Initiative, OSI) 會長 Simon Phipps 表示：「相當樂於見到 OSI 在 90 年代中期所作的努力，能在英國政府此一更定標準中被實現。」Simon Phipps 並進一步補充：「當所謂的『開放標準』能夠被人們，自由地導入與佈署到開源軟體專案裡的時候，該標準才是真真正正的『開放』標準。」

其實，早在去年二月時，英國政府內閣辦公室便已公佈了新的採購指引。文中表示，所有政府部門單位採購軟體、技術架構、網路安全產品，或其他產品與服務時，應該儘可能使用零授權金基礎的開放標準。但當時某些團體主張此一作為將有違國際標準的發展情勢，甚至有某些公司表示零授權金將阻礙傳統 FRAND 評估標準的運作，並有害 H.264 此種跨國專利平價近用模式的現狀。於是到去年十二月時，英國政府決定將相關決策付諸公眾討論決定，包括開放標準的定義、標準如何規定，如何與國際標準接軌等問題，這樣的程序持續到今年六月才告一段落，並隨著內閣辦公室近日公告的此份開放標準準則，被宣告塵埃落定。除此之外，英國政府更進一步建置了 Standards Hub (http://standards.data.gov.uk/) 這個追蹤來源、創造及推廣開放標準的網站，以吸納日後預定逐步增加的各式開放標準，讓有意願導入這些標準的使用者，都有一個據以參考與遵循的資訊平台。


相關網址：

＊英國政府建立零授權金開放標準
http://www.h-online.com/open/news/item/UK-Government-establishes-royalty-free-open-standards-1741807.html

＊英國政府採用零授權金開放標準而非傳統 FRAND 評估標準
http://blogs.computerworlduk.com/open-enterprise/2012/11/finally-uk-open-standards-are-rf-not-frand/index.htm

＊英國政府新採購指引要求部署開放標準
http://www.openfoundry.org/tw/foss-news/8278-open-standards
_______________________________________________________________

■ [源碼新聞] 電子書編輯軟體 Sigil 0.6.0 發佈

黃湘婷／編譯

Sigil (http://code.google.com/p/sigil/) 為開源的電子書編輯軟體，在最後一次重大更新的九個月後，最新的 0.6.0 版終於發佈了，該版本帶來許多增強的功能與新功能，例如呈現報告與儲存搜尋記錄。Sigil 提供了 WYSIWYG (http://en.wikipedia.org/wiki/WYSIWYG) 與程式碼兩種編輯 EPUB 文件的方式，甚至能夠匯入 HTML 或是一般純文字文件。

新功能當中的儲存搜尋功能令使用者能建立、編輯與分類自定義的搜尋，透過滑鼠右鍵的 "Find & Replace" 便能快速的點選，對於經常需要修改類似文字的使用者帶來許多便利。另外，使用者也能儲存常用的文字或樣式，以及在文字中加入開始與結束標記，在直接瀏覽與程式碼瀏覽間的對照便能更準確。

同時該版本也提供讓使用者將檔案轉換為 HTML 的格式，透過這樣的功能，便能編輯圖片與樣式，甚至包括合併文件、大量的重新命名、與取代文字等一些更進階的動作都能夠做到。此外還有自動刪除沒有超連結的圖片與未被引用的 CSS 格式與編輯外部文件等功能。

除了提供新功能外，新版本修復了大量的 bug，包括目前所有已知的損壞問題，Sigil 的開發者表示對於這次的更新很有信心，可說是完全穩定的版本。


相關網址

＊EPUB 電子書編輯軟體 Sigil 0.6.0 發佈
http://www.h-online.com/open/news/item/Sigil-EPUB-ebook-editor-0-6-0-released-1740603.html

＊利用 Sigil 0.6.0 建立電子書
http://news.softpedia.com/news/Create-Ebooks-With-Sigil-0-6-0-303447.shtml

＊免費的 EPUB 編輯軟體 Sigil
http://libregraphicsworld.org/blog/entry/hands-on-review-of-sigil-0.6.0-free-epub-editor
_______________________________________________________________

■ [源碼新聞] 歐洲自由軟體基金會參與律師表示：更動行動裝置權限不會讓歐盟的法定擔保責任自動失效

黃郁文／編譯

繼美國國會主張 iPhone 可以被產品的購買者合法破解後，歐洲自由軟體基金會 (Free Software Foundation Europe, FSFE) 的法律團隊，Matija Šuklje 及 Carlo Piana 兩位律師，主張更動行動裝置權限 (rooting) 的相關行為，並不會讓產品製造商在歐盟法規下的法定擔保責任自動失效。他們認為極少狀態下，硬體裝置的瑕疵是由軟體造成，所以如果產品製造商想要卸除法定的擔保責任，則必須進一步舉證該產品的瑕疵狀態，與使用者的 rooting 行為有正相關，否則不能單單因為產品購買者的自行 rooting 與刷機行為，就主張不去擔負該產品本來依歐盟法規應該有的擔保責任。此一研究見解，來自 Šuklje 進行 FSFE Freedom Task Force (https://fsfe.org/activities/ftf/ftf.en.html) 工作上的成果。

許多產品製造商及賣方經常強調 rooting 與刷機將會使產品的保固條款自動無效，這樣的主張套用在賣方主動額外提供的保固服務時還算合理，但並不會因此，便使歐盟規定的相關擔保責任也失效。根據 European Union Directive 1999/44/CE (http://eur-lex.europa.eu/Notice.do?val=330258%3Acs&lang=en&list=340508%3Acs%2C330258%3Acs%2C&pos=2&page=1&nbl=2&pgs=10&hwords=&checktexte=checkbox&visu=#texte)，只要消費者在歐盟領域內購入裝置，產品製造商及其協力販售商就有必須肩負的法定擔保責任。根據這個擔保責任的規定，若產品瑕疵是在購物後六個月內發現，則推定該瑕疵於賣出當時即存在，買方原則上便應就此瑕疵對消費者負責；而若是在購物六個月後到二年內發現瑕疵，賣方也得進一步證明瑕疵是由消費者不當使用所引起的，才能拒絕履行擔保義務。

所以說，若產品製造商與賣方，僅因消費者 rooting 與刷機，就拒絕履行擔保義務，這是不應見容於歐盟法規的，消費可提民事訴訟，並向有關單位檢舉，許多歐洲國家都有消費者保護團體能代表消費者進行訴訟，且通常不用動用到律師出馬。除此之外，Piana 與 Šuklje 也建議使用者，當瑕疵責任歸屬有疑義時，亦可將原本的韌體或作業系統刷回去 (flash the original firmware back onto the device)，以確定瑕疵並非因 rooting 而產生，因為如果刷復之後瑕疵繼續存在，就可以確定瑕疵是硬體本身的缺點所致。


相關網址：

＊FSFE 律師表示 rooting 不會讓歐盟法定擔保責任無效
http://www.h-online.com/open/news/item/FSFE-Lawyers-Rooting-does-not-void-warranties-in-the-EU-1743756.html

＊rooting / flashing不會讓歐盟法定擔保責任無效
http://matija.suklje.name/rooting-and-flashing-your-device-does-not-void-the-warranty-in-eu
_______________________________________________________________

■ [源碼新聞] SITCON 2013 學生計算機年會 - 議程徵稿啟事 (2012/11/11 更新)

SITCON／文

SITCON 2013 學生計算機年會，給予學生們一個用自己力量實踐夢想的舞台。本屆年會之主軸聚焦於「創新與傳承」。其一，佈建一個學生發表創新作品的獨特平台，向全世界展示。其二，幫助學生瞭解各種新興的技術及演進，把夢想集合起來共同往前進。今年 SITCON 提供三種稿件投稿方式，分別為作品投稿（Call for Project）、概念投稿（Call for Short Talk）、教學坊投稿（Call for Tutorial）。


壹、稿件說明：

一、作品投稿（Call for Project）

　　學生，擁有著熱血、執著與無比幹勁。我們期望以學生的主動力量為開展點，向外打破知識與技術跨不過的鴻溝，嘗試著與自身所學結合，解決日常生活中各種問題。Project 的投稿焦點以創新應用之實務導向為主，並以學生為主要募稿對象。簡報方式為 20 分鐘（含 5 分鐘 Q&A 時間），其方式由審稿委員會挑選評定。此投稿項目不同於專題競賽及學術、技術研討會模式，議程審核係著重於「問題與想法」、「技術」及「創新解決方法」的交流。

二、概念投稿（Call for Short Talk）

　　想法，是一點一滴累積而成。我們深刻體會正在進行中的想法，仍然努力茁壯中，雖然作品規模不大，但是我們相信任何偉大的作品背後，都是一筆一劃努力勾勒而成，因此年會額外開拓 Short Talk，讓你有機會向全世界說你正在做件了不起的事。Short Talk 的投稿焦點與作品投稿相同，都是以學生為主要募稿對象。簡報方式為 5 分鐘，其方式由審稿委員會挑選評定。同樣地，此投稿也著重於「問題與想法」、「技術」及「創新解決方法」的交流。

三、教學坊投稿（Call for Tutorial）

　　夢想，必須靠著能力與熱情一步步實踐。Tutorial 的設立，即是期望擁有豐富實戰經驗的投稿者，能以傳承及引導的方式向學生們講解技術內容，讓學生們可以從教學坊中，習得基本的實作能力及技術認知，其簡報時間為 40 分鐘。教學坊投稿不限任何身份，其審核著重於「技術解析」、「實作說明」兩大方向。


貳、徵稿主題範疇：

以下提供投稿參考之主題，但不僅限於此：
	1. 多媒體娛樂與互動設計 Multimedia, Game & Interactive Design（各種娛樂應用，如特效、遊戲或是探討人機互動的範圍。）
	2. 網路、通訊與安全 Network, World Wide Web, Communication & Security（個人通訊、網頁技術、網路技術、資訊安全等。）
	3. 生命記憶、健康與生活應用 Life, Memory & Healthy（生命記憶管理、地理資訊、生活事務、健康管理等。）
	4. 工業、商業服務應用 Industry & Commerce（應用資訊技術於工商業、服務業等領域。）
	5. 機器學習、資料探勘應用 Machine Learning & Data Mining（任何著重資料探勘、機器學習相關理論的應用層面。）
	6. 嵌入式系統、軟硬體整合設計 Embedded System & Software/Hardware Design 
	7. 程式語言理論與實務探討 Theory and Application of Programming Languages
	8. 其他屬電腦科學與資訊工程之範疇 Other Topics or Special Works on CSIE（任何屬於「現在或未來能以電腦解決的問題或服務」，均納入年會議程的範疇。）


參、投稿方式說明：

一、投稿方式：請以電子信箱 session@sitcon.org 投稿 。

二、投稿期限：

	＊2013 年 1 月 20 日 23:59 後投稿截止（以 Email 報名時間為準）
	＊2013 年 2 月中旬，審稿結束
	＊2013 年 2 月下旬，公告完整議程
 

三、格式概要：

    依稿件種類採取不同審稿方式，說明如下：稿件均經議程組形式審查。為作品投稿、概念投稿者，按其主題分類，交予該領域之審稿委員匿名審稿。審稿委員會由業界人士、學界人士及具研究所學籍或以上學歷之學生組成，選定符合本屆年會主旨者錄取。為教學坊投稿者，將由議程組選定合適之稿件。稿件一律以速審為原則。各項投稿之格式摘要如下：

＊作品投稿（Call for Project）：欲投稿者，必須準備下列資料：

	* 摘要（必繳）：以三百字為限。安排於介紹頁。
	* 內文（選繳）：不限字數。作者可詳細說明作品，以利審稿委員更瞭解你的作品。
	* 個人介紹（必繳）：以三百字為限，安排於講者介紹頁。
	* 個人聯絡資訊（必繳）：作者姓名或暱稱、所屬學校或單位、職稱、手機號碼及電子信箱。
	  審稿委員會將挑選優秀作品於 Project 議程中進行二十分鐘簡報（含五分鐘問答時間）。此外，為了避免遺珠之憾，Project 的投稿稿件可經投稿人同意，將稿件轉至 Short 	          Talk 進行 5 分鐘簡報。

＊概念投稿（Call for Short Talk）：欲投稿者，必須準備下列資料。：

	* 摘要（必繳）：以三百字為限。安排於介紹頁。
	* 內文（選繳）：不限字數。作者可詳細說明作品，以利審稿委員更瞭解你的作品。
	* 個人介紹（必繳）：以三百字為限，安排於講者介紹頁。
	* 個人聯絡資訊（必繳）：作者姓名或暱稱、所屬學校或單位、職稱、手機及電子信箱。
	  審稿委員會將挑選優秀作品於 Talk 議程中進行五分鐘簡報，此投稿方式之錄取名額依審稿情形而定，審稿委員會得將 Project 稿件優先轉入 Talk 議程。
	
＊教學坊投稿（Call for Tutorial）：欲投稿者，必須準備下列資料。

	* 摘要（必繳）：以三百字為限。安排於介紹頁。
	* 工作坊細節（選繳）：不限字數格式。供主辦單位更瞭解你教學主題及內容。
	* 個人介紹（必繳）：以三百字為限，安排於講者介紹頁。
	* 個人聯絡資訊（必繳）：作者姓名或暱稱、所屬學校或單位、職稱、手機及電子信箱。
	* 凡被接受者，議程組將邀請該投稿者與會發表。投稿者需補充更為詳盡之文章、簡報內容。簡報以四十分鐘為限。
	  小建議：投稿人您所發表之技術內容，可考慮採開放原始碼之授權方式公開；若能於技術文章中附上您所採用之公開版本控制 Repository URL（e.g. Github、 OpenFoundry 專	  	  案、Google Code、Bitbucket...等），除增加能見度外，並可讓審稿委員更加瞭解您的作品。

為鼓勵投稿，大會將提供投稿人 VIP Code，可優先報名參與本年會。

凡稿件經接受者，年會將頒予證書以表彰投稿人之熱情付出與貢獻，並於大會手冊及網站上安排講者與講題之介紹頁。

※有任何投稿疑問，歡迎寄信至議程組 session@sitcon.org 詢問，我們很樂意為你解答！
_______________________________________________________________

■ [源碼新聞] Ubuntu 12.10 Release Party @ Taiwan 系列活動即將開跑！

蕭惟杰／文

又過了半年，照慣例於每年 4 月及 10 月釋出新版本的 Ubuntu ，於今年的 10 月 18 日釋出了最新的第 17 版： 12.10 "Quantal Quetzal"（量子的長尾鳥）了。一如往常，世界各地的在地社群都會為了慶祝新版本的釋出，舉辦 Release Party ，而我們 Ubuntu 台灣在地社群，簡稱 Ubuntu-TW，自然也會舉辦 Release Party，一同慶祝了。也就是說...Ubuntu Release Party 又來啦～

既然稱為 Party，自然並不是非常嚴肅的活動。在這個 Party，你可以一邊吃點點心、喝點飲料，一邊進行經驗分享、學習 Ubuntu 使用技巧，或是帶著你的電腦來安裝 Ubuntu、抓人幫你解決 Ubuntu 上的問題，甚至是索取 Ubuntu 相關紀念品、替你的活動宣傳打廣告等等。最重要的是，我們希望與會者們都能在這輕鬆的活動中結交新朋友，彼此之間能夠有所交流，促進自由／開源軟體社群之間的活絡，因此不管你是不是 Ubuntu 的使用者，只要你對 Ubuntu 或是自由／開源軟體有興趣，希望能多多認識這個圈子的朋友，或是使用其他 Linux Disrtibution 的朋友想要過來串門子，我們都歡迎你過來參加 Ubuntu Release Party，一起同樂！

我們這次將會在台北、台中、台南、高雄四地舉辦，各地的舉辦日期時間、地點與報名網址如下：


＊台中場

	* 地點：水舞饌中港店 (http://www.swmall.com.tw/store.php?store=15) 台中市西區中港路一段121號 ("Google Maps") (http://goo.gl/maps/vv8W) (位於公益路與民權路口旁)
	* 時間：2012/11/10 13:30~17:00
	* 人數上限：30人
	* 費用：該場地有每人最低消費 NT$200
	* 乘車資訊：詳見報名頁面
	* 報名網址：http://j.mp/urptw1210tc "Registrano"
	* 報名期限：2012/10/30 20:00 ~ 2012/11/09 20:00


＊台北場

	* 地點：暢。Changee Coke (https://www.facebook.com/changeecoke) 台北市大安區金華街187號 ("Google Maps") (http://goo.gl/maps/U6a76) (位政大公企中心西樓1F，請由此入口進入即可 ("Google Maps") (http://goo.gl/maps/94LF3)
	* 地點：2012/11/24 19:30~21:30
	* 人數上限：50人
	* 費用：場地提供者將對入場者每人酌收場地費 NT$100 ，於入場時收
	* 乘車資訊：詳見報名頁面
	* 報名網址：http://j.mp/urptw1210tp "Registrano"
	* 報名期限：2012/10/30 20:00 ~ 2012/11/23 20:00 


＊高雄場

	* 地點：國立中山大學南區促進產業發展研究中心 (http://www.stipc.nsysu.edu.tw/) 708會議室 ("Google Maps") (http://goo.gl/maps/boV76) (高雄軟體科技園區 B 棟 7B5)
	* 時間：2012/12/08 13:30~17:00
	* 人數上限：30人
	* 費用：(暫定)每人分擔飲食費用 NT$150，於現場繳納
	* 乘車資訊：詳見報名頁面
	* 報名網址：http://j.mp/urptw1210kh "Registrano"
	* 報名期限：2012/11/03 12:00 ~ 2012/12/07 20:00


＊台南場

尋找場地中...預計會舉辦在 12 月下旬的週六下午

活動的所有詳細資訊都會公佈在 Ubuntu 正體中文站 (http://www.ubuntu-tw.org/) 的 Ubuntu 12.10 Release Party @ Taiwan 討論主題上，網址是：[釋出派對] Ubuntu 12.10 Release Party @ Taiwan [論壇 - Ubuntu 與自由軟體相關活動版] (http://j.mp/urptw1210)，歡迎大家前來共襄盛舉，也請大家幫忙宣傳唷！
_______________________________________________________________

■ [源碼新聞] 知識領航 - 高軟產業新聚落 - 11月24日（六）高雄軟體園區知識型企業聯展

國立中山大學南區促進產業發展研究中心／文

「高雄軟體園區」是南部新興發展的重要指標性園區，也是南臺灣唯一由經濟部管轄支持的純研發設計園區，亦是帶領高雄從傳統重工業轉型向研發設計產業的重要發展契機。

國立中山大學特別成立「南區促進產業發展研究中心」，於 2008 年初，即進駐高雄軟體園區，投入園區發展。
 
在各界共同努力下，促成目前許多重要知識密集型廠商於南部發展成果，包含：

＊經濟部工業局南部 IC 設計中心：進駐高軟園區，引進 10 餘間公司進駐。
＊指標性 IC 設計廠商：義隆電、信億科技、鈺創科技、凱鈺科技、聯傑國際五間上市櫃公司進駐高雄軟      體園區。
＊指標性數位內容廠商：R&H、兔將創意、奇銳科技、KKBOX、智崴資訊…等。
＊在地優質企業：中冠資訊、智冠資訊、摩鉅科技、奧爾資訊、凌誠科技、博相科技、鈞達資訊…等。

在 11/24（六）下午，這些廠商會在這次的活動中，將他們在南部設立據點的發展理念，堅持在南部發展的想法與成功的模式，一次呈現給您！
不可錯過這次的機會，誠摯邀請您，回南部來看看-高雄軟體園區！

詳情請上活動網址：http://www.stipc.nsysu.edu.tw/khsp-nsysu 或上網搜尋『高軟產業新聚落』。
 
(http://www.openfoundry.org/images/121113/Knowledge/Knowledge.jpg)
_______________________________________________________________


□ 關於本報 □__________________________________________________

◎ 主編︰洪華超
◎ 法律專欄編輯︰葛冬梅
◎ 技術編輯︰曾義峰
◎ 執行編輯︰王怡凱、林誠夏、林珈宏、陳蕙蓁、彭冠雯
◎ 外稿編譯︰黃湘婷、黃郁文、蕭惟杰、謝良奇

本電子報自行採訪、報導、編譯、撰寫文章之智慧財產權屬於中央研究院，採用創用 CC「姓名標示－禁止改作－非商業性」授權條款臺灣 3.0 版授權散布，歡迎在不變更內容的前提下，以任何形式重製與散布本報，但必須遵守下列義務︰（1）不得為商業目的之利用；（2）必須標明本電子報智慧財產權屬於中央研究院；（3）完整引用本著作權說明。

若欲以創用 CC「姓名標示－禁止改作－非商業性」授權條款臺灣 3.0 版以外的方式利用上述文章，請與自由軟體鑄造場編輯群（ossfepaper at openfoundry.org）聯絡。

非自由軟體鑄造場自行撰寫的單篇文章，其智慧財產權利屬於原作者所有，其以非專屬的方式授權予自由軟體鑄造場運用，而與本電子報其他文章併以創用 CC「姓名標示－禁止改作－非商業性」授權條款臺灣 3.0 版的方式進行散布。

若欲以創用 CC「姓名標示－禁止改作－非商業性」授權條款臺灣 3.0 版以外的方式利用個別作者的文章，請自行與該作者聯繫，或透過自由軟體鑄造場編輯群（ossfepaper at openfoundry.org）來轉發聯絡訊息。

授權條款全文請見︰
http://creativecommons.org/licenses/by-sa/3.0/tw/legalcode
授權條款簡介請見︰
http://creativecommons.org/licenses/by-sa/3.0/tw/deed.zh_TW

若欲訂閱本電子報，請至以下網址︰
http://www.openfoundry.org/tw/news

如欲取消訂閱這份電子報，可透過自由軟體鑄造場新聞首頁左上方之自動退訂機制︰
http://www.openfoundry.org/tw/news

或寄發電子郵件至︰ossfepaper@openfoundry.org，以進行人工退訂。
