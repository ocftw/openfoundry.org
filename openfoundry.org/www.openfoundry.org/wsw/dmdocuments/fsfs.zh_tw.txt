註: 此文件為 http://web.mit.edu/ghudson/info/fsfs 的中譯版

------------------------------------------------------------------------
"FSFS" 為 Subversion 底層檔案系統的實做之一，其功用等同於舊有以柏克萊資
料庫為基礎所實作的 BDB 檔案系統。關於 Subversion，請詳見
http://subversion.tigris.org/。此份 propaganda 主要是讓有興趣的人了解，
是否適合改用 FSFS ，取代 BDB 檔系統。

FSFS 好在哪裡
-------------

* 讀資料不再需要寫入的權限

在 FSFS 倉儲上進行 checkout, update 等動作時，完全不需要倉儲任何部份的
寫入權限。

* 幾乎不用修復

即使 svn 程序不正常終止，也很少會造成倉儲結構破損。（關於結構破損的詳細
說明詳見「註：結構修復」）

* 小倉儲

FSFS 倉儲所用的磁碟空間，較 BDB 倉儲來得小，一般說來大約可以省去
十到二十個百分點。不過若在 branch 作的修改很多時，可以省更多，
奧義在於 FSFS 儲存檔案差異的方式不同。此外，如果你有許多
小小的倉儲，使用 FSFS 所造成的負擔也比 BDB 來得少。

* 跨平台

FSFS 倉儲的格式完全跨越平台。而 BDB 倉儲在不同作業系統、硬體、或是
不同 BDB 版本的情形之下，通常需要修復結構（或是 dump / load），
才能夠成功的存取。

* 可以直接儲存在網路檔案系統上

FSFS 倉儲可以直接儲存在網路檔案系統上，與 CVS 倉儲方法相同。
（關於寫入鎖定方面的事項，詳見「註：鎖定」一節）

* 解決 umask 問題

FSFS 會仔細處理新的版本檔案，使其與上個最新版有同樣的權限，因此不用擔心
comitter 的 umask 影響倉儲內的檔案，造成他人無法存取的問題。（但在非
BSD 系的系統上，你還是得要把 db 這個目錄的 g+s 權限打開）

* 一般方法備份

FSFS 倉儲僅需用普通的備份軟體進行備份，因為舊的版本檔案再也不會更動，所
以可以很有效率的進行漸進式備份。

（BDB 倉儲可利用 "svnadmin hotcopy" 進行普通備份，也可利用 "svnadmin
dump"進行漸進式備份。FSFS 只是讓備份便得更簡單。）

* 倉儲可以被拆開

假使日漸增益的 FSFS 倉儲超出了檔案系統大小，你可以利用 symbolic link
的方式把版本檔案搬到其他尚有空間的檔案系統上。

* 倉儲格局好理解

如果發生莫名其妙的問題，而你得仔細檢驗倉儲內容，FSFS 的格式比 BDB 好了
解許多。（好吧，為了公平起見，這兩種其實都很難手動直接取得檔案的內容，
因為他們存的只是版本間的差異而已，再說，用 "db_dump" 起碼讓手動分析
BDB 倉儲變成有可能的任務。）

* 處理很多檔案的目錄時，較為快速

如過你要一口氣匯入整個目錄與其子目錄，裡面又有很多檔案，在 BDB 倉儲的設
計上，每加入一個新檔案就要對更動整個目錄，變成需要 O(n^2) 的時間。而
FSFS 僅是把每個檔案依序加入之後，最後一次收到同個目錄裡，所以算起來只是
O(n) 時間。

在實做方面，FSFS還提供了較好的快取機制，因此在依序讀寫大目錄的內容時，
會比較有效率。這方面的實做甚至也可以移植到 BDB 上，不會更動到 BDB 本來
的格式。

* （優勝） 對巨大更動做 "svn log -v" 也非常快

在 BDB 檔案系統上，如果你一次匯入很多東西，那麼 "svn log -v" 時，為了取
得 copyfrom 這項資訊，伺服器就要挖遍整個資料庫，把所有更動過的路徑全找
出來，在伺服器負載高時，說不定得花上個兩分鐘。由於 FSFS 另外儲存
copyfrom 與 changed-path 這兩項資訊，所以只要幾秒鐘就行了。

* （Marginal）可以對子目錄做到「insert-only」的權限管理

某些檔案系統具有給定「insert-only」的目錄權限，像是 AFS。只要你能夠這麼
做，在不開啟伺服器的狀態下，你也能可以讓大家既能 commit ，又不讓他們手
動亂碰到舊的版本檔案。

（UNIX的 sticky bit 也差不多能做到，不過這樣大家還是可以回頭去改自己送
過的舊版本的檔案，而由於內容儲存的是版本差異，也會造成其他人的檔案內容
變動）

FSFS 壞在那裡
-------------

* 取出最新內容時，伺服器較忙碌

因為 FSFS 儲存檔案差異的奧義，要取得最新的檔案內容就要比 BDB 檔案系統來
得久。有數據顯示出，在普通的工作量下，取得最新內容在伺服器所進行的工作
約是兩倍之多（要存取許多檔案，然後做合併）。而在客戶端，考慮網路以及
working copy 的額外負擔，額外需要的 checkout 時間則為最少，不過如果伺服
器資源有限，FSFS 恐怕不算是上選，特別是在很多人要取出檔案的時候。

* 最後總要延遲一下...

雖然說 FSFS 處理 commit 的速度大抵上都比 BDB 快，有許多該做的事項其實都
是延後到 commit 結束之後一起進行。對於超大的 commit（一次改一萬個檔案），
最後一步恐怕花上一分多鐘。由於在這段時間內，使用者不會看到訊息，沒耐性
的人可能就會生氣，甚至演變成 HTTP 客戶端 timeout 這種糟糕的狀況。

* 同時間進行中的 commit 數目較低

由於在 commit 的最後階段要做許多事情，如果有很多 commit 同時進到 FSFS
倉儲的話，他們就必須要一個個排好，按照順序來，因為前面一個 commit 會有
write-lock。但在 BDB 倉儲，這些 commit 是可以平行處理、同時進行的。

* 尚未成熟的程式碼

FSFS 最近才剛寫好，是在 Subversion 1.1 版（也還在進行測試）的新元件，
並且其本身的測試也不夠完整。

* 超大的目錄，滿是版本檔案

在 FSFS 倉儲上，每一個版本都會對應到 db/revs 目錄底下的一個檔案，以及
db/rev-props 目錄下的另一個檔案。如果送交的版本繁多，就表示這兩個目錄底
下的檔案會非常的多。某些近代的檔案系統設計都允許目錄底下有很多檔案，但
是有些卻不行（就算搜尋目錄底下的檔案需要線性時間，在有重複存取的時候也
可利用存於記憶體中的雜湊來加速）。

Subversion 1.2 版或許會解決此議題，將版本檔案散佈在更深層的子目錄下。

* （開發人員）難以索引

人們動不動就提議，要替 Subversion 加上新功能，但是為了新功能，要增加索
引欄位，好讓這功能寫起來更方便有效。這裡有張圖解，簡單表示了 FSFS 在增
加索引的困難度

               增加索引欄位的困難度
     較難 <----------------------------------> 較簡單
           FSFS            BDB            SQL

假設有個 SQL 的版本檔案系統好了，要幫它加上索引欄位其實相當簡單。在
BDB 裡面，雖然要加索引就要額外增加一些程式碼，可是transaction 跟 table
資料結構讓那些程式碼也不那麼難寫。在類似 FSFS 的格式中，基於其「舊版本
就不再改變」的基本假設，增加新的索引時更是要格外小心翼翼。


怎麼用
------

僅有新的 Subversion 1.1 版支援 FSFS ，當此文正在撰寫時，其尚在四個星期
的穩定階段當中。如果你覺得自己編 Subversion 不太愉快的話，可以等到
Subversion 1.1.0 正式釋出的那天。

不管如何，用 FSFS 很簡單：在建立新的倉儲時使用
"svnadmin create --fs=type=fsfs PATH" 這樣的命令。
或著乾脆，在編 Subversion 的時候完全拿掉柏克萊資料庫的選項，
這樣所有新建立的倉儲，就統統會是 FSFS 了。

註：結構修復
------------

如果在讀取的過程之中，程序突然不正常終止了，在倉儲那端也不會有任何傷痕，
因為讀取資料根本不會改到倉儲的內容。

如果在 commit 的過程之中，程序突然不正常終止了，最後的那個
transcaction 狀態會爛掉，但不會出現在往後其他的運作之中，
並且可以簡單的用遞迴刪除，把它全部移除。

而如果在 commit 的最後階段，程序突然不正常的終止了，它可能還持有
write-lock。在目前實做檔案鎖定的方法裡面，死掉的程序是不應該還持有鎖定，
但是如果透過網路檔案系統儲存的話，這一點就無法保證了。同時在未來，FSFS
將要選擇性的支援 NFSv2 相容的鎖定，因此可以允許異常狀態的鎖定持續存在。
但在所有情況下，write-lock還是可以簡單的手動移除，讓後面等著的 commit
可以接著進行，讀取方面則完全不會受影響。

註：鎖定
--------

目前鎖定的機制是用 apr_file_lock() 函式來做，在 Unix 上實際會呼叫
fcntl()，而在 Windows上實際會呼叫 LockFile()。近代的遠端檔案系統都應該
要支援這些操作函式，雖然可能不完美，NFSv2 伺服器則可能完全不支援。

不過，在基本的 NFSv2 上，還是有可能做到獨占式鎖定的機制，但得利用
link() 函式，弄出一大串複雜的舞步。說不定 FSFS 會演變，利用倉儲的設定選
項，使其支援 NFSv2 的鎖定，或是只用基本的O_EXCL去鎖定。

註：備份
--------

如果直接進行備份時正好有人 commit 尚未完成，無可避免的會使得備份的那個
倉儲出現結構性不一致的現象，但是也很容易就可以修好。在備份的倉儲裡面
「正在」commit的檔案可能會沒有被複製過來，或者只有部份的內容而已。

利用 "svnadmin hotcopy" 這個命令，實際上會先去備份「正在」commit的檔案，
再去複製其他的版本檔案。不過，用 hotcopy 來備份，遠不如直接進行漸進式備
份來得有效率，FSFS往後可能會演變成，"svnadmin recover" (目前是完全不做
動作)，可以知道怎麼去修復在直接漸進式備份當中，所造成的結構性不一致。

直接複製 FSFS 倉儲也有可能會一併複製到目前正在進行中的 transaction，但
在以後會變得無用，而且額外又佔了些空間，你得手動移除。"svnadmin
hotcopy" 就不會複製到那些正在進行中的 transaction，不過在往後，如果
Subversion 開始使用很長久的 transaction 的時候，這一點就必須要改寫。
