________________________________________________________________

□■□ 自由軟體鑄造場電子報第 217 期 | 2013/04/30 □■□
________________________________________________________________

◎ 本期主題︰淺談貢獻者契約在自由開源軟體之應用
◎ 訂閱網址︰http://www.openfoundry.org/tw/news/
◎ 下次發報時間︰2013/05/14

□ 本期標題 □__________________________________________________

﻿■ [法律專欄] 淺談貢獻者契約在自由開源軟體之應用

■ [源碼秘技] 用 LibreOffice 匯出 PDF

■ [自由專欄] 如何寫出易懂的程式碼：跟你想的不一樣

■ [源碼新聞] CloudStack 因 Apache 的頂層狀態提高了企業信賴度

■ [源碼新聞] 國際自由開源軟體法學評論第五期已於近期公眾釋出

■ [源碼新聞] Netflix 可望採用 HTML5 影片取代 Microsoft Silverlight

■ [源碼新聞] Ubuntu 將成中國標準作業系統

■ [源碼新聞] Linux Foundation 的新報告：企業 Linux 成長超乎 Windows

■ [源碼新聞] OpenFeint 浴火重生成為 OpenKit

■ [源碼新聞] 2013 年五月份社群活動列表
______________________________________________________________


□ 本期內容 □__________________________________________________

■ [法律專欄] 淺談貢獻者契約在自由開源軟體之應用

林懿萱／文



【為何需要簽署貢獻者契約】




自由開源軟體專案和私有軟體 (proprietary software) 的開發有不少的差異，其中最大的不同處在於，自由開源軟體專案是先選定一個適用的自由開源軟體授權條款，例如 GPL (GNU General Public License)，當貢獻者 (contributor) 同意其撰寫的程式後續將依循該授權條款的規定後，將其撰寫程式提供給該軟體開發專案使用。但僅僅如此還不夠，為確保自由開源軟體專案後續能合法利用、甚至再散布專案中的軟體程式，該專案管理者必須取得所有程式開發者對其程式的著作權讓與，或是不可撤回的著作權授權，及相關的專利權授權。




而前述這些權利的讓與或授權及其他相關的細部規定，可以透過多種不同形式展現，不少自由開源軟體專案會選擇的，通常是以一份貢獻者契約 (contributor agreement) 來呈現，作為一種自我保護的手段。此外，藉著貢獻者契約的事先約定，若專案在未來欲轉換授權方式，專案管理者自身即有足夠的權限為之，而毋須再耗費龐大的時間及人力成本回頭一一聯繫程式貢獻者並取得其全數同意。




【貢獻者契約的種類】




依貢獻者「身份」的不同，貢獻者契約可分為「個人貢獻者契約」(individual contributor agreement) 及「企業貢獻者契約」(corporate contributor agreement)。




程式碼貢獻者的身份可以是非受雇於人，自己就是老闆的所謂個體戶，也可能是受雇於他人的員工。前者個體戶的情況較單純，自己就可決定撰寫的程式欲貢獻給那個軟體專案，接不接受該專案所採的貢獻者契約無須他人同意，這時所適用者為「個人貢獻者契約」；而後者的情況，相對就比較複雜，以我國來說，著作權法明訂受雇人於「職務上」完成的著作，原則上以該受雇人為著作人，但若契約約定以雇用人為著作人時，則從其約定。一般在聘雇之初，員工和雇主間都會簽署所謂的聘雇契約，通常關於著作權、專利權等智慧財產的歸屬都會在此有所明訂，而因為在僱傭關係中，擁有較大議定能力者為雇主，所以大多會約定職務上完成的著作以雇用人為著作人。這種情況下，自己在職務上撰寫的程式能否貢獻給某專案，就需經過雇主的同意，這時所適用者就為「企業貢獻者契約」。




除前述分類方式外，若從貢獻者授權專案管理者得利用其程式，抑或是終局地將其程式著作權轉讓予專案管理者的角度來區分，則貢獻者契約又可分為「貢獻者授權契約」(contributor license agreement) 及「貢獻者讓與契約」(contributor assignment agreement)




1、貢獻者授權契約：指的是貢獻者保留其對貢獻部分 (contribution) 的著作權（註一），僅非專屬的授權專案管理者得依契約所訂方式實施其被授予的權能，例如，得重製、改作、散布貢獻部分。 

2、貢獻者讓與契約：指的是貢獻者將其貢獻部分的著作權終局、專屬地轉讓給專案管理者。將來若貢獻者欲利用其貢獻部分，則需和其他人一樣取得該專案管理者的授權始得為之。




【貢獻者契約的主要內容】




貢獻者契約大抵由以下幾個主要部分構成（註二）：




1、名詞定義：即給予貢獻者契約中所使用到的專有名詞特定定義，例如：不同的貢獻者契約對「貢獻部分」(“Contribution”) 的定義及涵蓋範圍各有不同，端依各個貢獻者契約所給予的定義而定。




2、著作權的授權（或轉讓）：例如約定貢獻者不收取授權金，全球、永久、非專屬、不可撤回地授權專案管理者得重製、改作、散布、轉授權 (sublicense) 貢獻部分（註三）。




3、專利權的授權：例如約定不收取授權金，全球、永久、非專屬、不可撤回地授權專案管理者得製造、使用、販賣、為販賣要約、進口或以其他方式轉讓貢獻部分。




4、保證：貢獻者需保證其有權對貢獻部分為所謂的授權或讓與，且貢獻部分未侵害第三人的權利。




【貢獻者契約應用於自由開源軟體可能引起的疑慮及因應之道】




1、社群面對授權議題的態度不同，不一定採用貢獻者契約的管理方式。




以 Debian 社群為例，他們有自己的一套可供依循的規範，即 The Debian Free Software Guidelines (DFSG)，此外，針對專利議題， Debian 社群也曾積極尋求 Software Freedom Law Center (SFLC) 的意見與協助，同時也在官網上發布有明確的專利政策（註四），因此像Debian這樣針對貢獻內容的智慧財產權管理已經有相當完整內容共識的社群，改採貢獻者契約來管理貢獻內容的可能性及意願並不高。




而對於那些規模沒有這麼大，或者還沒有這麼知名的自由開源軟體專案來說，可能大部分成員對專案貢獻部份的智慧財產權管理沒有什麼特定想法，又或者根本沒有概念，甚至這些專案連要適用何種授權條款都還未知，更遑論要它們採用貢獻者契約來管理專案的智慧財產了。




2、瞭解貢獻者契約造成程式開發者的額外負擔。




由於貢獻者契約如同授權條款一樣，是專業的法律文件，並不容易被一般人所理解，因此除非一個軟體開發專案背後有基金會、公司或專業法律團隊支援處理法律議題，例如自由軟體基金會 (Free Software Foundation, FSF) 支援 GNU 計畫、Apache 基金會 (Apache Software Foundation, ASF) 支援旗下基金會的開發專案，又或者像 Google 支援自己的 Android 開發專案，否則對於大部分的程式開發者來說，要理解軟體專案本身所適用的授權條款已不是件輕鬆的事，若還要再花時間多瞭解一份貢獻者契約，心理上可能會產生排拒，因而難以接受這一份額外的貢獻者契約。




Project Harmony 就是一個針對這樣現象所誕生的計畫，在 2010 年成立至今短短 3 年，該計畫致力於推廣貢獻者契約制度，已經制定出了第一版的貢獻者契約範本，任何一個想要利用該契約範本的專案，可以在修改範本中的關鍵資訊之後應用在自己專案裡。目前Project Harmony正在著手進行改版工作，未來其如何向自由開源社群來推廣利用其所制定的貢獻者契約範本，相信會是一大挑戰（註五）。




3、貢獻者對專案管理者的信任度不夠影響簽署的意願。




以貢獻者「讓與」契約來說，當貢獻者簽署完這份貢獻者契約，其貢獻部分後續如何被利用，已不在其控制之內，而是由貢獻者契約的另一方當事人，通常是專案管理者來決定。而若是貢獻者「授權」契約的話，多數這類型的貢獻者契約會透過約定貢獻者「不得撤回」其授權，且專案管理者得將貢獻部分「轉授權」給他人，而使專案管理者取得日後得轉以授權人的地位，將其自貢獻者契約所得到的權利，再轉授權給其後手被授權人。




這種情況下，若貢獻者對專案管理者不具備充足的信心，將可能影響貢獻者提供其貢獻部分的意願。也因此，儘管貢獻者契約內容大同小異，但一些貢獻者契約開始將貢獻部分後續可能的利用方式預先在契約中寫明，以提高貢獻者對專案管理者的信任度。例如 Oracle Contributor Agreement 的第 4 條規定（註六），貢獻部分可依專案管理者（在此例為 Oracle International Corporation）所選定的授權條款，或「任一 FSF 或 OSI 認可的授權條款」來提供大眾利用。又如 Project Harmony 推出的貢獻者契約（註五），透過當中 “Outbound License” 的設計，讓貢獻者在簽署 Harmony 貢獻者契約時，可以了解到自己的貢獻部分除了依該 Harmony 貢獻者契約內容，或貢獻部分提出當日專案管理者所選定的授權契約來提供利用外，還可依其他如 FSF 或 OSI 認可的授權條款，甚至可以依貢獻者自己所列出的任一授權條款規定來提供利用。




其實，類似的貢獻部份管理方式不僅限於軟體開發專案，我們若將視野拉大到包含開放資料 (open data) 在內的其他協同開發專案，也可以看到貢獻者契約在約定內容的轉變。以近年來快速竄紅的 OpenStreetMap 專案（簡稱 OSM 專案）為例（註七），其貢獻者契約第3條寫到（註八），該專案管理者 OpenStreetMap 基金會 (OpenStreetMap Foundation, OSMF) 同意依下列幾種授權條款來利用或轉授權貢獻部分：(1) 若貢獻部分是資料庫適用 ODC Open Database License v1.0 (ODbL-1.0)，而當貢獻部分是資料庫中個別受到著作權保護的客體，則適用 ODC Database Contents License v1.0 (DbCL-1.0)（註九）；或 (2) 創用 CC 授權「姓名標示-相同方式分享」2.0授權條款；或者 (3) 其他由 OSMF 成員投票選定的自由開放的授權條款。




另外，筆者觀察目前幾款著名的貢獻者契約發現，會推出貢獻者契約來管理貢獻內容的，大多是已經具備相當知名度的著名基金會或是公司，例如 FSF、ASF、Oracle 或 Google 等，由於程式開發者比較瞭解或容易預測這些基金會或公司未來對於貢獻內容可能的處理態度，所以會強化其簽署貢獻者契約的意願，願意將自己開發的程式貢獻給這些法人所管理或育成的專案。因此，除非一專案與著名的自由開源基金會或公司合作，透過這些基金會或公司所制訂的貢獻者契約來管理該專案所有貢獻內容的智慧財產，否則若是仍在草創階段或是尚未累積相當知名度的專案，程式開發者可能會因為還無法充分信任專案管理者，而沒有那麼高的意願來簽署該專案的貢獻者契約，那麼，這時候專案就必須像 Debian 社群那樣，透過另外建立內部共識的方式，來處理貢獻部份的智慧財產權議題了。




【結語】




自由開源軟體專案的開發具有眾人共工、協同開發的特質，因此為使專案管理者能合法利用專案中眾人提供的貢獻部分，也為保護專案本身日後免於涉入侵權糾紛，請貢獻者簽訂貢獻者契約是一項相當不錯的管理制度。不過有一些專案，已經自有一套管理貢獻部份智慧財產權的制度，對於這樣的專案來說，在沒有重大實益的情況，原則上自然是以維持與改善既有的管理制度為前提，而不需要改用貢獻者契約，但是，若一個專案還沒有任何貢獻部份智財權的管理制度，則可以考慮導入貢獻者契約。雖然貢獻者契約的法律內容不易閱讀與了解，不過有 Project Harmony 這樣的計畫在進行推廣應用，也許未來該計畫或其他類似機構將制訂出更為簡單易懂的貢獻者契約；而關於開發者無法完全信任專案管理者的疑慮，則可以透過在契約中加上限制專案管理者轉授權貢獻部份的規定，來加以平衡，讓專案管理者僅可以在開發者能預見的範圍內，來運用貢獻部份。而隨著貢獻者契約被討論的頻率愈來愈高，期望透過本文，幫助大家對貢獻者契約理解有更多的瞭解，也希望能對於貢獻者契約應用於自由開源軟體所產生的疑慮及可能的解決之道，在討論上能達到拋磚引玉之效。




----




註一：不同的貢獻者契約對「貢獻部分」(“Contribution”) 的定義及涵蓋範圍各有不同，以  Android 企業貢獻者授權契約 (Android Corporate Contribution License Agreement) 為例，其第 1 條第 2 項將「貢獻部分」定義為，程式、說明文件或任何明確在附件清單中列出的原創著作，這裡的原創著作包含任何對現有著作的修改或添附，且該修改或添附部分是某特定貢獻者欲提交給 Android 專案管理者，供作為專案管理者所管理或維護的產品的一部份或說明文件。「Android 企業貢獻者授權契約」全文，詳參：http://source.android.com/source/cla-corporate.html。




註二：欲瞭解更多貢獻者契約的主要內容，可參閱鑄造場同仁葛冬梅小姐所著之「他人貢獻部份的智慧財產權管理」一文：http://www.openfoundry.org/tw/legal-column-list/2117，本文僅簡要帶過主要概念，不多做重複介紹。




註三：關於轉授權 (sublicense) 的概念及詳細說明，可參閱鑄造場同仁林誠夏先生所著之「簡論『轉授權／再授權』於公眾授權領域的效力與應用方式」一文：http://www.openfoundry.org/tw/legal-column-list/8929-knowing-sublicense-in-the-general-public-license-way。




註四：The Debian Free Software Guidelines 的詳細內容，請參考：www.debian.org/social_contract.html#guidelines；另外關於 Debian Position on Software Patents 的詳細內容，請參考：http://www.debian.org/legal/patent。




註五：Project Harmony網站：http://harmonyagreements.org/。Harmony Contributor Agreement 列表，請參考右方連結：http://harmonyagreements.org/agreements.html。將要進行改版的相關新聞，請參見：Seeking Harmony Leadership，http://www.shuttleworthfoundation.org/seeking-harmony-leadership/；Shuttleworth Foundation Trustee meeting minutes – Year End 2011，http://www.shuttleworthfoundation.org/shuttleworth-foundation-trustee-meeting-minutes-year-end-2011/。




註六：Oracle Contributor Agreement 的全文，詳參：http://www.oracle.com/technetwork/oca-405177.pdf。




註七：OpenStreetMap 是一個協同繪製街道地圖的專案，所繪製出來的街道地圖與相關資訊，採用 ODC Open Database License (ODbL) 授權，ODbL 是一份具有公眾授權特性的授權條款，他人可以在 ODbL 的授權範圍之內自由使用 OpenStreetMap專案的各類資訊。關於該專案的詳細資訊，請參考：http://www.osmfoundation.org/wiki/Main_Page；而關於 ODbL-1.0 的說明，可以參考林誠夏先生所著之「從開源軟體到開放資料－論 Open Database License v1.0」一文：www.openfoundry.org/tw/legal-column-list/8832。




註八：OpenStreetMap ContributorTerms 的全文，詳參：http://www.osmfoundation.org/wiki/License/Contributor_Terms#OpenStreetMap_Contributor_Terms_1.2.4。




註九：ODC Database Contents License v1.0 (DbCL-1.0) 是配合 ODbL-1.0 所一起被制定出來的授權條款，如同本文所描述，兩份授權條款所處理的授權客體並不相同。詳細說明內容可以參考林誠夏林誠夏先生所著之「從開源軟體到開放資料－論 Open Database License v1.0」一文：http://www.openfoundry.org/tw/legal-column-list/8832。






_______________________________________________________________

■ [源碼秘技] 用 LibreOffice 匯出 PDF

林雪凡／文

LibreOffice 是開源世界中相當有名的辦公套件，最近版本號推進速度很快，功能也不斷推陳出新。

不過今天想要和大家分享的，並不是 LibreOffice 本身，而是 LibreOffice 內建的 PDF 匯出功能。

對於有一定經驗的電腦用戶來說，製作 PDF 檔案並不困難，包括 LibreOffice 在內，許多軟體可以只透過一個按鈕就將檔案匯出成 PDF 格式。然而從另一個角度考慮，PDF 本身卻也相當有彈性，匯出時有大把可由使用者自行設定調節的細部選項可用。想來使用 PDF 格式的人很多，但仔細研究過那些選項涵義的人恐怕就沒多少了；即使有心認真起來將它搞懂，也因為缺乏足夠的背景知識，就算看了說明書也滿頭問號，看也看不懂。

LibreOffice 是款普遍又容易使用的軟體，PDF 匯出選項的數量和其他軟體相比也十分適中。本文就以 LibreOffice 的 PDF 匯出功能為基礎，和大家一起檢視這方面的設定。


LibreOffice 最簡單的 PDF 匯出方法，就是按下面板上的 PDF 匯出按鈕。不過如果需要進一步設定 PDF 的匯出細節，則需要從主選單的「檔案」→「匯出成 PDF ...」進入。

我們的旅程就從這裡開始。


第一頁：資料格式基本設定

如前所述地按下按鈕，下方的對話框就會出現。

[pdf_001.png]
▲ 圖1：PDF 匯出選項頁－－第一頁。


圖片壓縮

「影像」標籤下的選項，處理的是您文件中的「插圖類」檔案附件，而非您的「整體文件」。簡單說來，不論設定成怎樣的值，都不會讓匯出後的文字變得模糊，僅僅只會影響插圖的清晰度。這方面還請放心。

JPEG 壓縮強度被預設為 90%。這種壓縮的實際效果，和「無損壓縮」選項幾無差異－－至少我不管把圖放多大都無法用目視分出不同來－－但是，匯出後 PDF 檔案體積卻差別巨大，在測試樣本中差了整整六倍。因此推薦使用預設值 (90%) 來進行圖檔壓縮。

此值如果設太低，圖片顏色會嚴重走調。就經驗上來說，建議設值不要走極端，檔案大小與顯示效果就都還可接受，90% ~ 60% 是個人的推薦範圍，請參考。


「降低影像解析度」選項，同樣是透過降低圖片的精美度來壓縮圖片大小，但其壓縮方式卻與前述的 JPEG 壓縮不同。這種壓縮不會損失顏色，但會在將圖片放大時產生小方磚。

如果有印刷需求，此處的數值無論如何不要低於 300dpi；如果匯出的 PDF 只是打算供人放在電腦上觀看，則建議無論如何不要低於 150dpi。


水印設定

「以水印簽署」選項，會在文件的每一頁中，覆蓋上一層半透明，且橫跨全頁的巨大文字。

注意這不是漂漂亮亮的可以用做裝飾的水印字，而是「內部文件，禁止傳閱」、「機密」或「僅供預覽」式的強烈印章式聲明。如果有類似場合可以使用看看。


內嵌編輯能力

「內嵌 OpenDocument 檔案」是一項很有特色的選項，這能讓這份檔案在日後被視為一般的 LibreOffice 檔案供使用者打開編輯。但是相對地檔案大小也會大幅上升。因為這等於是將一份純的 PDF，和一份純的原始檔，兩者合併打包在一起。

如果您沒有對 PDF 進行任何壓縮，勾選這個選項會讓檔案大小憑空增加兩倍左右；如果您有對影像進行壓縮，則檔案大小的增加倍數還會更高。因為內嵌原始檔佔用的空間大小是固定的，不會被壓縮到。


PDF/A-1a

「PDF/A-1a」選項打勾的話，可以將文件儲存成 PDF/A-1a 格式。這是一種特別的 PDF 格式。

PDF/A 系列格式是被設計用來「保存」用的，其設計初衷，是為了讓 PDF 檔案能於遙遠的未來被完整地讀取並顯示出來，而不會因為缺少字型、忘記密碼、用了不同的閱讀設備或軟體而讀到不一樣的東西、格式跑掉，甚至完全讀不出來。您可以將大寫的 A 理解 Archive（封存），另外 PDF 還有 PDF/X （X = eXchange，交換）等適合用來印刷出版的亞種，此處不提。

PDF/A 大類底下又分為 PDF/A-1a 與 PDF/A-1b。PDF/A-1b 是 PDF/A 系列的基本型，能完美地完成 PDF/A 系列的目標：完整重現文件最初的顯示畫面。至於 PDF/A-1a 型，則是在 b 型的基礎上多紀錄了一些額外資料，使某種程度上的排版微調成為可能。這部份請參考下方對於「標記的 PDF」之說明。

如果您希望您的檔案，到哪裡都能保持一樣的外觀而不會出現格式問題，「PDF/A-1a」選項就是一種快速的解決方案。請選取她。


標記的 PDF

「已標記的 PDF」選項，可以幫助 PDF 文件保留既有的結構。

各位或許不知道，PDF 文件和 Word 或 txt 文件不同，它的重點在於版面的呈現方式，而不在於保存「文字流」。說得更具體一點，PDF 檔案中固然會安插有很多文字區塊，但卻沒有紀錄文字區塊之間的語義順序。

舉例來說，假設 PDF 中有兩行文字：

    ……我的爸爸討厭吃蘋
    果。

因為行尾在「蘋果」中間分開，所以使用者在檔案中搜尋「蘋果」這個關鍵字時，會驚訝地發現自己居然找不到。這就是因為 PDF 檔案（預設）並沒有紀錄上述那兩行在文意上是連在一起的，而也因為相同的原因，如果您切換到螢幕寬度更大或更小的平台，希望每行的字數能增加或減少，PDF 也無能為力，因為他不知道文意如何串聯，自然也無法將已經斷開的兩行重新串接起來，重新加以排版。

但是如果您勾選「已標記的 PDF」選項，那上述的問題就都能解決。不過相對的，所需的儲存空間也會因此而增加－－實測結果大致上是文字所佔空間的兩倍左右。


建立 PDF 表單
往下說明「建立 PDF 表單」這個選項前，有必要稍微解釋什麼是 PDF 表單。

簡單地說，PDF 表單是種「可在 PDF 閱讀器中讓讀者直接填表打字」的特別欄位。請注意它跟一般文書編輯時常用的「表格」並不是同一回事。

比方說您的 PDF 可能是一份讀者回函，上面要求讀者填入地址以供抽獎……那問題來了，讀者該怎麼填呢？是印出來之後用手填？還是截圖後再用美工技術拼字拼上去？算了吧，這麼麻煩誰會老實回信呢？這時您就可以在文件中設定一些「表單」，讓讀者可以直接在電腦螢幕上進行輸入，這一來問題就解決大半了。


如果希望在文件中創建 PDF 表單，請從 LibreOffice 的「檢視」→「工具列」→「表單控制項」面板來建立。具體如何建立的細節超出本文範圍，請自行嘗試研究看看。


關於「建立 PDF 表單」這個選項，如果您的文件中沒有任何表單，那本選項就和您沒有任何關係；反之如果您的文件中存在表單，則您在匯出前就得勾選這個選項，才會將表單匯出為真正能用來輸入的欄位，否則就只是外觀上看起來像，但實際上依然無法填入東西。

匯出的表單可以選擇許多格式，而這涉及了很多關於 PDF 版本、功能相容性與應用程式支援度間的微妙差異，我一時也看不出哪種格式比較佔優勢，總之採用預設格式 (FDF) 基本上就可以用了。更多細節與特徵還請各位讀者自行研究了。


匯出書籤

「匯出書籤」選項打勾後，會在 PDF 中加入您所設定的章節索引。

您多半有見過：用 PDF 閱讀軟體打開某份製作精良的 PDF 檔案後，側欄會出現一排目錄，上面寫著第一章、第二章等等；而點擊目錄中的項目，還可以快速跳轉到指定的章節位置……沒錯，本選項要匯出的就是那個了！

想要匯出書籤，除了本選項得勾上以外，您還得具體設定「要將哪些位置設為索引目標」。比方說「要將一級標題列入索引，三級標題太細了不要列入」……之類的。您可以在主選單的「工具」→「章節編號…」處進行這方面的設定調整。


匯出備註、匯出空白頁面、內嵌標準字型

當「匯出備註」打勾時，您先前在本檔案中透過主選單功能表「插入」→「備註」選項插入的備註，就會以 PDF 專有的註解型式被匯出到 PDF 檔案之中。反之如果不勾，則這些備註就會被略過。

本選項預設是不勾（會被略過）的。


「匯出自動插入的空白頁面」選項，特別適用於某些需要雙面列印的文件。在這種情況下，有時有些頁面會依設定自動留白。如：在奇數頁結束一個章節，但又自訂規則要求所有章節必須從奇數頁開頭，那麼到下一個章節中間自然會由程式自行插入一頁空白的偶數頁。

本選項一旦打勾，在 PDF 匯出時就不會略過這一張空白頁，如此一來在雙面列印時才不會出現正反面對不上的問題。


「內嵌標準字型」選項中的「標準字型」，指的是 PDF 規範中預設的 14 種基本字型，就是 Times、Courier、Helvetica、Symbol、Zapf Dingbats 這五種加上他們的粗體斜體等變體。這些字體理論上所有 PDF 閱讀器都會內建，所以沒有必要刻意嵌入。但如果在此打勾，也能強制嵌入這些字體（不過僅限於這份文件中有用到的部份）。


第二頁：第一次打開的瀏覽狀態

[pdf_002.png]
▲ 圖2：PDF 匯出選項頁－－第二頁。


第二頁「初始檢視」所設定的，是這份 PDF 第一次被打開時，會以什麼模式被開啟、會翻到哪一頁、版面的配置外觀為何。

這些設定具體如何運作，和個別閱讀器的設定與特性有關，有些閱讀軟體不會理會這些資料，或是會使用預設設定覆蓋。

當然您還是可以設定一下。各選項意義都如字面那般，不細講。


第三頁：使用者介面

[pdf_003.png]
▲ 圖3：PDF 匯出選項頁－－第三頁。


本頁設定每次打開時使用者介面的狀況。

和第二頁相同，各家閱讀器對此支援狀況落差很大。比方說 Evince 就不支援除了以全螢幕模式開啟以外的大多數選項。而且如果設定不當，可能會讓讀者感到困擾，好比說如果勾選了「隱藏視窗控制項」或「以全螢幕模式開啟」，就很有可能嚇到讀者。

個人建議除非真有必要，建議不要動這一頁的選項內容。


此外還有些需要額外說明的是「使用切換效果」選項。這選項專門用在將 LibreOffice 的 Impress 投影片匯出為成 PDF 投影片時。它會將 Impress 中設定的換頁效果，也一併存入 PDF 中。只要您的 PDF 閱讀器支援簡報模式，就會在進入簡報模式後發揮效果。


另外一個要提的是本頁的「書籤」選項。

本頁的書籤和第一頁的書籤一樣，都是指索引的意思，不過此處設定的不再是書籤本身，而是「書籤的展開層級」。具體說來，如果設為「全部書籤等級」，表示樹狀索引會在開啟檔案時自動全部展開。反過來說，如果將「顯示書籤等級」設為 1，則預設只會曝露出第一級索引，其他的索引都會被隱藏起來（但可以像開啟樹狀圖一樣被讀者手動打開）。

如果書籤數量太多，擔心讀者打開檔案後眼花頭暈的話，可以嘗試調整這裡的數字。


第四頁：連結設定

本頁設定轉換為 PDF 時，文章中現有連結的處理方法。

[pdf_004.png]
▲ 圖4：PDF 匯出選項頁－－第四頁。


「轉換 PDF 目標的文件參照」選項，可以將所有連向標準 LibreOffice 文件的連結－－如 *.odt、*.ods－－其副檔名改成 pdf。適用於將一堆交互連結的 odf 文件同時大量匯出成 PDF 檔案時。

「跨文件連結」選項，可用來指定閱讀這份 PDF 的 PDF 瀏覽器，其打開外部連結的方式。您在製作 PDF 時，就可以指定讀者是用網頁瀏覽器或直接用當前的 PDF 閱讀器打開外部聯結。當然這也和閱讀器的相容性有關，只能參考而不能依賴。


另外其他兩個選項我暫時試不出效果，說明文件也無論如何看不懂，因此先跳過。歡迎對此有瞭解的讀者留言補充。


第五頁：保密設定

[pdf_005.png]
▲ 圖5：PDF 匯出選項頁－－第五頁。


按下設定密碼後會出現一個密碼設定視窗。如下：

[pdf_006.png]
▲ 圖6：密碼設定視窗


密碼設定視窗中可以設定兩組密碼。上面的密碼是用來限制讀者「能不能開啟閱讀這個 PDF 檔案」用的，PDF 規範稱此密碼為 User Password，沒有得到此一密碼的人將無法開啟這個 PDF 檔案。至於下方的密碼，則是用來限制 圖 5 中右側那些設定之用（PDF 規範稱此為 Owner Password），沒有密碼將無法解除那些限制性設定。

如果密碼欄位是空的，那就是不加密的意思。您可以用這種方式來解除密碼設定。


此外，也請注意以上兩個密碼的實作差別。

讀取用密碼 (User Password) 有「真正去用密碼加密 PDF 檔案」的特性，換言之，沒有密碼就一定打不開，不管讀者用哪一款 PDF 閱讀器都一樣（當然您的密碼要夠難猜）。但反過來說，Owner Password 就沒有真正用加密方式來防護檔案資料，只是簡單地對閱讀器進行一個「我打算限制讀者不准做這個那個……」的「宣告」，而並非真的有實力去阻止閱讀器進行列印、編輯、複製貼上等動作。事實上許多非 Adobe 官方的 PDF 閱讀器都不甩這個設定。因此請不要真正去依賴這個功能。


LibreOffice 的匯出說明到此說明完畢。雖然還是有些不夠完整的地方，但讀過上文，大家對於 PDF 的理解，多少還是有增加一些吧？

請在日後更準確地使用 PDF 匯出功能哦！
_______________________________________________________________

■ [自由專欄] 如何寫出易懂的程式碼：跟你想的不一樣

謝良奇╱編譯

或許你常聽到寫出易懂程式碼的重要性。開發者對於如何撰寫淺顯易懂的程式碼都很有想法，尤其越資深的開發者，意見越多。不過，你真的曾經停下敲鍵盤的手，想過如何真的撰寫易懂的程式碼嗎？


標準答案是


你或許會同意，不論使用的程式語言為何，下列項目有助於程式碼的易讀性：

* 好的變數、方法、類別名稱
* 變數、類別與方法都擁有單一目的
* 一致性的縮排和格式樣式
* 減少程式碼的巢狀層級

除此之外還有很多關於程式碼易讀性的標準答案與普遍公認的做法，我對這些沒什麼反對意見。

不過我倒是希望你對可讀性有更深入的瞭解。


詞彙和讀者經驗


我可以在看到一份程式碼的兩秒鐘裡，告訴你它寫得好不好以及容易理解與否。同時，我可以拿我寫得最好、有高度易讀性的程式碼範例，給一位新手程式設計者看，讓他們看不出，與他們看過的其他程式碼之間有何不同。

而對他們而言，與他們看過的其他程式碼相較，他們看不出兩者有何不同。

儘管我的程式碼中變數名稱具備高度描述性，僅有少量參數且名稱簡短的方法，一次只做一件事，程式碼清楚地依照功能加以組織分段。但是這些新手們一點也不覺得這樣做，比起他們未經任何結構思考的程式，有任何易於閱讀的地方。

事實上，我經常聽到有關的抱怨，抱怨我的程式碼方法太多，難以閱讀，變數名稱太長，容易讓人混淆。

這一切基本上都源自於老手與新手閱讀程式碼方式的不同

有經驗的開發者閱讀程式碼時，不會留意程式語言本身的詞彙，而是專注在程式碼表達的概念上，是程式碼的目的，而非如何步驟過程。

新手與經驗較少的開發者完全不一樣。當經驗較少的開發者閱讀程式碼時，會試著去了解程式碼的結構。新手則是把大部份重心放在語言的詞彙，而非語言試著要傳達的東西。

對他們而言，像 NumberOfCoins 這樣的長變數名稱毫無描述性，該變數的人格化表示加上過長的名稱，只會誤導他們，以為該變數除了表示一個整數之外，還包含了別的東西。他們寧願看到像 X 或 Number 這樣的變數名，因為光記住整數代表什麼就夠他們受的了。

有經驗的開發者完全不管整數或字串什麼的。他們希望瞭解的是，變數在方法或系統的邏輯語境下，所代表的意義，而非變數形態或變數如何運作。


例子：學習閱讀


想想看閱讀是如何學會的。

當孩童學習閱讀時，一開始會學習字母的發音。當小孩子第一次閱讀書本時，他們會唸出每個字。他們不會關心文法或文字要傳達的意思，他們只是將焦點放在文字本身的結構。

想像如果這篇部落格是寫給閱讀初學者看，然後受限於像童書一樣的詞彙與句子結構，那時你還會覺得這文章好讀嗎？可能不會。

同樣的情況也發生在有經驗的音樂家身上。他們能輕易閱讀樂譜，相較之下，新手則更偏好符號譜。比起那種描述該按哪個鋼琴鍵或彈哪條吉他弦的音樂說明，有經驗的音樂家覺得樂譜更容易閱讀與理解。


可讀性的限制


就像你只能用初學閱讀書籍的詞彙與結構，來表達思想時受到的限制一樣，你也會以同樣方式，受到程式語言的限制。

這最好用一個例子說明，讓我們看底下的組合語言：

.model small
.stack 100h
 
.data
msg     db      'Hello world!$'
 
.code
start:
        mov     ah, 09h   ; Display the message
        lea     dx, msg
        int     21h
        mov     ax, 4C00h  ; Terminate the executable
        int     21h
 
end start

以上的組合語言程式碼會在 DOS 下在螢幕上印出 "Hello World"。x86 組合語言的詞彙與文法受到相當多限制，很難輕易表示複雜又可讀的程式碼。不論你是多麼棒的程式設計者，x86 組語的可讀性仍有其上限。

我們看 C# 的例子。

public class Hello1
{
   public static void Main()
   {
      System.Console.WriteLine(&quot;Hello, World!&quot;);
   }
}

關鍵在於 C# 擁有更為豐富的詞彙和更複雜的語法，足以提供用更為簡潔和易讀的方式，表達更複雜的想法。

想知道 Ruby 為何一下子這麼流行？以下是 Ruby 版的 Hello World：

puts "Hello, world"


就這麼簡單。


我並不是 Ruby 的超級愛用者，不過如果你知道 Ruby 語言的豐富詞彙和語法結構，你會發現，你可以用該語言清晰地表達你的想法。

不過我發現這樣的比較並不公平。而且 Hello World 也不是程式語言詞彙或語法的好示範。

我想說的是，你可用的詞彙越豐富，想法就可以表現得越簡潔，於是更有易讀性。不過前提是你已經掌握了這些詞彙與語法。


那麼，結論是什麼？


好了，你或許在想，這聽起挺有趣，雖然我不確定是不是完全同意，但我有點瞭解你的意思，但這又怎麼樣呢？

好問題。

從了解詞彙與經驗如何影響可讀性，我們可以得到不少好處。

首先，我們可以針對觀眾撰寫程式。

我們必須思考誰會讀我們的程式，他們的詞彙與經驗層級為何。在 C# 中，經常受到爭論的是條件運算符的使用。

我們應該把程式寫成：

var nextAction = dogIsHungry ? Actions.Feed : Actions.Walk;

或是：

var nextAction = Actions.None
if(dogIsHungry)
{
   nextAction = Actions.Feed
}
else
{
   nextAction = Actions.Walk;
}

一直以來我都站在支持第二種寫法的陣營這邊，不過現在我發現，我常常寫的是第一種。如果你問我哪種比較好，我的答案是看情況。理由是，假如你的觀眾不知道條件運算符，這種寫法可能會讓他們感到迷惑。不過如果你的觀眾熟悉條件運算符，那麼使用 if 語句的冗長版本就顯得浪費空間。

從這項觀察中還可以發現到，擁有豐富詞彙的程式語言，並且良好掌握該詞彙與語法的價值。英語正是一個有著相當龐大詞彙與誇張語法數量的豐富語言。不少人說如果能簡化詞彙跟語法，會讓英語更加簡單易用。

然而，如果真的將英語縮減，將複雜的語法簡化為更為簡單的結構，的確會讓英語更易學習，但英語傳達資訊的功能也將大大減弱。換言之，為了節省掌握該語言的時間，代價是喪失語言的表達力。


語言大統一？


對於程式語言，我們很難採取和上述同樣方式的思維。因為我們通常不希望在單一程式語言和框架上，比照口語和書寫語言，投入那麼多的心力。然而，程式語言的詞彙越豐富，語法越複雜，也就越具有表達性，對那麼掌握其詞彙與語法的人來說，可讀性也就更高。

不過別擔心，我並非在提倡發展出一個大家都應該學的超複雜程式語言。至少還不是現在。

這種事有賴於人類整體知識水準的提升。

目前我們要重視的，是擁有簡單詞彙、易於理解與學習的程式語言，即使這些語言的表達力比不上較複雜的語言。

最後當大部份的人都知道如何寫程式時，我相信屆時會需要一個語言，對電腦和人類而言，同具有英語和世上其他語言的表達性。

你的想法呢？我們應該有更複雜、更難以掌握的程式語言，以便享有更高的表達能力，還是應該用比較簡單的程式語言，寫出比較複雜又冗長的程式碼？



相關網址：

1. 如何寫出易懂的程式碼：跟你想的不一樣
http://simpleprogrammer.com/2013/04/14/what-makes-code-readable-not-what-you-think/
_______________________________________________________________

■ [源碼新聞] CloudStack 因 Apache 的頂層狀態提高了企業信賴度

謝良奇／編譯

Citrix 將 CloudStack 提交到 Apache 軟體基金會 (Apache Software Foundation，ASF) 作為育成專案還不滿一年，這項開放源碼基礎架構即服務 (Infrastructure-as-a-Service，IaaS) 平台就已經成為了 Apache 頂層專案。

該基金會日前宣布，Apache CloudStack 已經從 Apache 育成計劃 (Apache Incubator) 畢業，成為頂層專案 (Top-Level Project，TLP)。這代表該專案的社群與產品，在 ASF 以績效為主的流程與原則下，已經達到妥善管理的目標。

Apache CloudStack 是在私有、公開與混合環境下，建構 IaaS 雲端運算的完整軟體套件。由在 2011 年被 Citrix 購併的 Cloud.com 開發，CloudStack 在 2012 年 4 月被提交至 Apache 育成計劃。

Apache CloudStack 副總裁 Chip Childers 指出，CloudStack 剛成為 Apache 育成專案時，就已經是擁有成熟程式碼的完善雲端管理平台。他們在育成計劃的任務，著重於在此程式碼外成立強大的社群，並建立 ASF 頂層專案預期的治理實踐。

以 Apache License v2.0 授權釋出，Apache CloudStack 受到活躍貢獻者團隊的監督。服務供應商與企業是 CloudStack 的主要環境，可用來設定依需且彈性的雲端運算服務，或是企業的私有雲。

Childers 表示成為頂層專案可說是該專案演進與成長的重要里程碑。RedMonk 共同創辦人兼首席分析師 Stephen O'Grady 指出，對開放源碼專案來說，成為頂層專案一直是重要的成果。

451 Research 的企業軟體資深分析師 Jay Lyman 認為，其競爭者 OpenStack 雖然仍舊享有較大的氣勢與知名度，但 CloudStack 提供了同等級的開放性，這對於彈性、避免廠商依賴性，以及對現有架構整合的客制化，都是關鍵。提升為 Apache 頂層專案將在企業與服務供應商端，為 CloudStack 帶來更高可信度，且應有助於持續與推廣關鍵的開放源碼軟體社群。

此外，他補充說，正如在 Linux 散佈套件、Xen 與 KVM、Chef 與 Puppet 等過去例子中所看到的一樣，開放源碼軟體替代選擇有助彼此激勵，CloudStack 與 OpenStack 也會從市場上開放源碼雲端堆疊的整體可信度，以及彼此的成長中獲益。


相關網址：

1. CloudStack 因 Apache 的頂層狀態提高了企業信賴度
http://www.linux.com/news/enterprise/cloud-computing/711234-cloudstack-ups-enterprise-credibility-with-apache-top-level-status/
_______________________________________________________________

■ [源碼新聞] 國際自由開源軟體法學評論第五期已於近期公眾釋出

黃郁文／編譯

「國際自由開源軟體法學評論 (International Free and Open Source Software Law Review, IFOSS L. Rev.)」第五期已於近期透過其網站平台進行公眾釋出！

IFOSS L. Rev. 是一個由各篇作者自行投稿，並經歐洲自由軟體基金會法律網絡 (European Legal Network, ELN) 以及 NLNet Foundation，共同在審閱上與資金上協助建立的線上與紙本期刊，其設立目標是為了讓世界各國的律師與法學專家，能夠就自由開源軟體授權方面的模式與爭議，透過公開發表的途徑進行討論，並分享彼此就各國著作權法、公眾授權應用、授權條款解讀、軟體專利、開放標準、條款沿革，以及實際司法案例上的各種相關經驗。而與一般期刊而較，IFOSS L. Rev. 最難能可貴的特點在於，其初始建置的願景，便是要以公眾授權的方式提高這些文章的閱讀率，並在此基礎上讓全球各地的自由開源授權評論文章，都可以被平行的交換與交流，所以其在稿件的吸納政策上，所能接受最低限度的授權條件為「Creative Commons — 姓名標示-禁止改作」，較此更為嚴格的稿件授權是不被允許的，目前 IFOSS L. Rev. 其上登載的各篇文章，都可以在不需另行取得書面授權的基礎下，公開地讓使用者透過網路進行瀏覽與下載，若使用者有意願，更可以進一步將這些文章重製與傳散出去。

IFOSS L. Rev. 目前最新第五期的出刊文章牽涉到許多自由開源軟體授權領域的重大議題，例如由 Walter van Holst 撰寫的 "Copyleft, -right and the case law on APIs on both sides of the Atlantic" 一文，便以大西洋兩側歐洲 SAS/WPL 與美國 Oracle/Google 兩地不同的司法判決，來引述論證「應用程式介面 (Application Programming Interface, API)」與某些 Copyleft 授權性質程式之間的交融議題，質言之，引據他人具 Copyleft 授權特性軟體專案的 API，會否開啟該元件的授權拘束特性 (License Inheritance)，這是一個目前自由開源軟體領域裡被高度重視、反覆討論的重要議題；接著，Paula Hunter 以及 Stephen Walli 共同編撰的 "The Rise and Evolution of the Open Source Software Foundation"，則透過資料彙整與經驗分享，披露當自由開源軟體專案在規模擴張之後，能夠如何透過中立性質非營利基金會的建立，來總籌並協助專案未來在法律授權、技術支援，與商業模式方面的種種挑戰，以讓專案持續成長並發揮更深的影響力；最後，由義大利著名的開源授權律師 Carlo Piana 以及 Simone Aliprandi 合著的 "FOSS in the Italian public administration: fundamental law principles"，更是以言簡意賅的內容讓讀者了解到，在義大利是如何透過數位化相關基礎法律的修改，來提升該國軟體研究方案以及開源專案的使用率，藉此提升國內資訊應用與服務系統之間的相容性，並進一步讓國家資訊系統能與 Open Data 的推展趨勢無縫接軌！


相關網址：

1. 國際自由開源軟體法學評論當期期刊，線上瀏覽與下載網址：http://www.ifosslr.org/ifosslr/issue/current。

2. 國際自由開源軟體法學評論的投稿政策說明：http://www.ifosslr.org/ifosslr/about/submissions#copyrightNotice。
_______________________________________________________________

■ [源碼新聞] Netflix 可望採用 HTML5 影片取代 Microsoft Silverlight

謝良奇╱編譯



如果你是很想在 Linux 電腦上看 Netflix（https://signup.netflix.com/global, 提供電視及電影串流播放的網路服務。）或其他需要用到 Silverlight 技術的網路服務的人，對你來說，這應該和 Moonlight (http://www.mono-project.com/Moonlight) 的出現一樣是個好消息。根據 Netflix 的 Anthony Park 和 Mark Watson 的部落格發文，他們正計劃測試 HTML5 影片，並在影像串流上取代私有的 Microsoft Silverlight。當前的行動瀏覽器在執行 Microsoft Silverlight 上，碰到許多問題。他們希望用更為可靠的解決方案，毫無障礙地將 Netflix 串流至所有平台。再者，Microsoft 從 2001 年開始就沒有持續發展 Silverlight，因此他們希望有更具前瞻性的方案。

Netflix 表示，瀏覽器外掛程式 Silverlight 讓其用戶只要在 Netflix 網站上按下播放，即可觀賞喜愛的電影或電視節目。然而，瀏覽器外掛程式有許多缺點。首先，在開始影像串流前，用戶必須在電腦上安裝該外掛程式，對許多用戶來說，Netflix 可能是他們使用的服務中，唯一需要 Silverlight 外掛程式的服務。其次，許多人認為瀏覽器外掛有安全與隱私風險，因此選擇不安裝或採用工具程式加以關閉。最後，並非所有瀏覽器都支援外掛程式，因此橫跨各種裝置與瀏覽器的使用，越來越受到限制。Netflix 希望他們新一代的視頻播放功能可以解決這些問題。

根據 Netfilx 這篇部落格，該公司去年開始和其他業界領導者，在三項 W3C 計劃中進行合作。這三項 W3C 計劃是為了解決在瀏覽器中無需 Silverlight 等外掛程式，直接播放付費影片內容，因此被 Netfilx 稱為 HTML5 Premium Video Extensions。其中包含允許該公司透過 JavaScript 處理串流傳送的 Media Source Extensions (MSE)，負責 DRM 加密的 Encrypted Media Extensions (EME)，以及確保 JavaScript 程式碼與伺服器安全通訊之用的加密元件 Web Cryptography API (WebCrypto)。

多虧了 HTML5，以 Linux 為基礎的 Chromebooks 已經能夠串流 Netfilx 影片。不過，這些影片還是會有 DRM 保護。開發者正在試圖改進 HTML5 Premium Video Extensions，以及允許該公司透過快速安全方式，傳送影片給用戶的 JavaScript 程式。

Netfilx 表示他們正和 Google 一起在 Chrome 瀏覽器中，實作對 HTML5 Premium Video Extensions 的支援。前不久 Google 宣布以 ARM 為基礎的 Samsung Chromebooks 已經可以透過 HTML5 使用 Netflix 服務。根據 Netfilx，這個 Chrome OS 的版本採用了上述的 MSE 與 EME 技術，至於 WebCrypto 則尚未實作在 Chrome 中，因此採用該公司自行開發的 PPAPI 外掛程式取代。


相關網址：


1. Netflix 可望採用 HTML5 影片 取代 Microsoft Silverlight

http://www.muktware.com/5489/netflix-possibly-use-html5-video-instead-microsoft-silverlight?

2. HTML5 影片在 Netflix

http://techblog.netflix.com/2013/04/html5-video-at-netflix.html


3. Netflix 計劃從 Microsoft Silverlight 轉向 HTML5 影片

http://www.theverge.com/2013/4/15/4228248/netflix-plans-its-move-from-microsoft-silverlight-to-html5-video


4. Moonlight

http://www.mono-project.com/Moonlight


_______________________________________________________________

■ [源碼新聞] Ubuntu 將成中國標準作業系統

對 Ubuntu 與 Linux 來說這可能是則相當重要的消息。Canonical 先前與中國政府合作開發適合中國市場的 Ubuntu 作業系統，此一版本將成為中國標準作業系統的參考架構。名為 Ubuntu Kylin (http://www.ubuntukylin.com/) 的該作業系統已經於三月底釋出。首度釋出的版本將納入針對中國市場的調整，像是中文輸入法、中國日曆，Ubuntu 的全球搜尋工具 Dash 也將內建對中國最流行音樂服務的搜尋支援。未來版本將擴展對百度地圖、淘寶購物服務、中國支付服務業者、當地公共交通資訊。

Mark Shuttleworth 表示，Ubuntu Kylin 的釋出讓中國開放源碼社群融入全球 Ubuntu 社群。透過 Ubuntu Kylin，中國如今擁有和全球 Ubuntu 社群同步發展，安全、穩定的自有桌面作業系統。Ubuntu 結合了久經考驗的技術、成熟生態系統與強大的 OEM 和 ISV 伙伴。此一計劃可望讓中國軟件與集成電路促進中心 (China Software and Integrated Chip Promotions Centre，CSIP)、Canonical、中國國防科學技術大學共同成立的 CCN 開放源碼創新聯合實驗室 (CCN Open Source Innovation Joint Lab)，橫跨桌面、伺服器、雲端、平板、手機全方位平台，為中國帶來上述優勢。

CSIP 日前決定與 Canonical 合作開發中國作業系統的參考架構。中國政府一向偏愛本土產品，此一合作宣告呼應了此一偏好。此一為中國量身定做的 Ubuntu 版本是中國政府推展開放源碼軟體的五年計劃的一部分。

但立即產生的顧慮是與中國政府合作背後的政治與可能的道德影響，特別是對開放源碼專案而言。因為中國仍是極權主義政權，且中國國內的網際網路使用也受到廣泛的監管與審查。由於幾乎所有大型企業都早已在中國佈局營運，因此這並不是什麼大問題，然而如此緊密合作仍然會引發質疑。

不過外界應該不用擔心 Ubuntu Kylin 會內建後門程式或監控軟體。首先其開放源碼的特性使得這些軟體必須採用二進位形式，這麼一來跟該開放源碼作業系統其餘部分相較下，就顯得格外突出。再者，與其沒效率地監控個別裝置，還不如監控整個網路。所以說，對 Ubuntu 與 Linux 來說，這仍舊是個大好消息。


相關網址：

1. Ubuntu 將成中國標準作業系統
http://www.osnews.com/story/26885/Ubuntu_to_become_standard_operating_system_for_China
_______________________________________________________________

■ [源碼新聞] Linux Foundation 的新報告：企業 Linux 成長超乎 Windows

謝良奇／編譯

Linux 基金會日前公布年度企業終端用戶報告 (Enterprise End User Report)。由於這是我們第三年針對全球最大型企業，與 Linux 基金會終端用戶委員會，進行 Linux 普及程度的調查，我們已能從中看出並分享一些有趣的趨勢。

能夠了解 Linux 為何能在企業伺服器營收上，超乎 Windows 的原因，或許是其中最有趣的部分了。IDC 最新季度追蹤顯示 Linux 比去年同期成長為 12.7%，Windows 則停滯在 3.2%。事實上，在其一季度 (Q312) 中，Windows 更呈現衰退。

此一趨勢也反映在我們的報告之中：超過 80% 的受訪者計劃未來五年內，在其組織中增加 Linux 伺服器的數量。反觀，Windows 的只有 20%。

不過這些數字無法告訴我們的是，為何此時會出現此一翻轉。我們的企業終端用戶報告為這個問題提供了部分解答，其中關鍵重點包括：

* 雲端大量依賴 Linux。採用雲端運算的組織有 76% 在雲端系統使用 Linux 伺服器，74% 的組織計劃在未來雲端專案上，維持或增加對 Linux 的使用。可見對於運用雲端運算的企業來說，Linux 是目前的主導平台。
* 幾乎沒有企業在 UNIX 或 Windows 上開發新專案。超過 75% 的企業最近兩年內，在新應用程式、服務與新網路建設上，部署的都是 Linux，這個數字從首次進行調查以來，成長了 10 個百分點。
* Linux 在關鍵任務負載應用上的顯著增長。計劃在關鍵任務負載上運用 Linux 的組織數量，比去年同期穩定成長至 2013 年的 73% (從首次調查以來增加了 12.8 個百分點)。

基於此一報告中的資料以及 IDC 等研究機構得出的數字，我們預料 Linux 的使用率將持續增長，特別是隨著雲端運算共同成長。這對 Linux 來說是大好時機。


相關網址：

1.Linux Foundation 的新報告：企業 Linux 成長超乎 Windows
http://www.linuxfoundation.org/news-media/blogs/browse/2013/03/report-enterprise-linux-growth-outpaces-windows
_______________________________________________________________

■ [源碼新聞] OpenFeint 浴火重生成為 OpenKit

Kenneth Mak／文

◎本文原載 Linux Pilot，原文章連結 (http://www.linuxpilot.com/industry/news/201303110101OpenFeint-OpenKit)。

遊戲社交平台 OpenFeint 可謂頭頭碰著黑，先被 Apple 的 Game Center 搶去地盤，被 GREE 收購後最後被解散。但好消息是它以另一種方式重生了，成為了開源的 OpenKit (http://openkit.io/)。

(http://www.openfoundry.org/images/130326/OpenFeint.jpg)

不論在 AppStore 者 Google Play 上，競爭最大的都是「遊戲」，開發者在上架後，就要煩惱如何增加曝光率。 OpenFeint 的目的就是將遊戲上的成就與互動做連結，或者分享到 Facebook 、 Twitter 、 Plurk 等網路社平台。 Apple 眼見有利可圖，於是在 iOS 4.1 推出具同等功能的 Game Center 趕絕 OpenFeint 。此時 OpenFeint 終於知道了支援單一平台的壞處了，於是下一版本起開始加入 Android 的支援，但已經為時已晚。被 GREE 收購後， OpenFeint 這個「養子」又因為與 GREE Platform 「正室」子嗣角色衝突，最後被「養父」所殺，於 2012 年 12 月 14 日終止服務。

OpenFeint 關門大吉後， OpenFeint 創始人推出了開源項目 OpenKit 。 OpenKit 將支援 Unity 3D 遊戲引擎，並為 iOS 和 Android 遊戲開發者提供開源 API ，以及儲存、同步遊戲數據等服務， OpenKit 目前提供對 Facebook 、 Game Center 、 Google+ 、 Twitter 、 GREE 等帳號的支援。用戶只需使用 Facebook / Twitter 等第三方社交網路帳號登入，無需另外註冊。其程式碼完全開源，並在 Github 中提供下載。
_______________________________________________________________

■ [源碼新聞] 2013 年五月份社群活動列表

自由軟體鑄造場電子報／整理

五月份的活動列表出爐囉！有興趣的朋友們請多多邀請您的朋友一同前往參與！另外，由於活動列表出來的時間比較早，若後續有活動希望也能一起做宣傳的朋友們，記得來信告訴我們喔！信箱： 信箱： ossfepaper@openfoundry.org 。


Hacking Thursday（每週四，5/2、5/9、5/16、5/23、5/30）
地點：台北市重慶南路一段 1 號 2 樓（MarketPlace）
時間：19:30~22:30
活動資訊：http://www.hackingthursday.org/

KSDG 高雄開發者社群 (Kaohsiung Software Developer Group) meetup（5/2）
地點：高雄軟體園區 B 棟 708 室（高雄市前鎮區復興四路 2 號 7 樓之 5）
時間：19:30~21:00
社群網址: https://www.facebook.com/groups/KSDGroup

MozTW Lab @ TP（每週五，5/3、5/10、5/17、5/24、5/31）
地點：台北市中山區民生東路二段 114 號（咖啡．銅號）
時間：19:00~23:00
活動資訊：https://groups.google.com/group/moztw-general

台中自由軟體愛好者固定聚會（5/6、5/20）
地點：台中市中港路二段 60-3 號（默契咖啡）
時間：19:00~22:00
活動資訊：https://groups.google.com/forum/#!forum/taichung-foss-fans-meeting

Taipei Wikipedia Moonthly Meetup: Writing Day 維基台北定期聚—假日寫作月聚（5/11）
地點：台北市大安區泰順街 60 巷 11 號（小哲食堂）
時間：14:00~16:00
活動資訊：https://zh.wikipedia.org/wiki/Wikipedia:WPTP-W

Taipei Wikipedian Weekly Meetup: Community Operation 維基台北定期聚 — 社群經營工作雙週聚（5/13、5/27）
地點：台北市松山區民生東路三段 140 巷 11 號
時間：18:00~20:00
活動資訊：http://zhwp.org/zh-tw/WP:WPTP-S

KSDG 高雄開發者社群 (Kaohsiung Software Developer Group) web course（5/18）
地點：高雄軟體園區 B 棟 708 室（高雄市前鎮區復興四路 2 號 7 樓之 5）
時間：19:30~21:00
社群網址：https://www.facebook.com/groups/KSDGroup

Taipei.py Django Workshop（5/17）
地點：台北市建國南路一段 166 號（伯朗咖啡）
時間：19:00~22:00
活動資訊：http://www.meetup.com/Taipei-py/events/102668252/

JSDC.tw 2013（5/18~5/19）
地點：中央研究院人文社會科學館
活動資訊：http://jsdc.tw/

PyCon Taiwan 2013（5/25~26）
地點：中央研究院人文社會科學館
活動資訊：http://tw.pycon.org/2013/zh/

Taipei.py 五月聚會（5/30）
地點：未定
時間：19:00~22:00
活動資訊：http://www.meetup.com/Taipei-py/events/102668422/
_______________________________________________________________


□ 關於本報 □__________________________________________________

◎ 主編︰洪華超
◎ 法律專欄編輯︰葛冬梅
◎ 技術編輯︰曾義峰
◎ 執行編輯︰王怡凱、林誠夏、林珈宏、陳蕙蓁、彭冠雯
◎ 外稿編譯︰黃湘婷、黃郁文、蕭惟杰、謝良奇

本電子報自行採訪、報導、編譯、撰寫文章之智慧財產權屬於中央研究院，採用創用 CC「姓名標示－禁止改作－非商業性」授權條款臺灣 3.0 版授權散布，歡迎在不變更內容的前提下，以任何形式重製與散布本報，但必須遵守下列義務︰（1）不得為商業目的之利用；（2）必須標明本電子報智慧財產權屬於中央研究院；（3）完整引用本著作權說明。

若欲以創用 CC「姓名標示－禁止改作－非商業性」授權條款臺灣 3.0 版以外的方式利用上述文章，請與自由軟體鑄造場編輯群（ossfepaper at openfoundry.org）聯絡。

非自由軟體鑄造場自行撰寫的單篇文章，其智慧財產權利屬於原作者所有，其以非專屬的方式授權予自由軟體鑄造場運用，而與本電子報其他文章併以創用 CC「姓名標示－禁止改作－非商業性」授權條款臺灣 3.0 版的方式進行散布。

若欲以創用 CC「姓名標示－禁止改作－非商業性」授權條款臺灣 3.0 版以外的方式利用個別作者的文章，請自行與該作者聯繫，或透過自由軟體鑄造場編輯群（ossfepaper at openfoundry.org）來轉發聯絡訊息。

授權條款全文請見︰
http://creativecommons.org/licenses/by-sa/3.0/tw/legalcode
授權條款簡介請見︰
http://creativecommons.org/licenses/by-sa/3.0/tw/deed.zh_TW

若欲訂閱本電子報，請至以下網址︰
http://www.openfoundry.org/tw/news

如欲取消訂閱這份電子報，可透過自由軟體鑄造場新聞首頁左上方之自動退訂機制︰
http://www.openfoundry.org/tw/news

或寄發電子郵件至︰ossfepaper@openfoundry.org，以進行人工退訂。