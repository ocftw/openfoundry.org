<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0 plus SVG 1.1//EN" "http://www.w3.org/2002/04/xhtml-math-svg/xhtml-math-svg.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" version="-//W3C//DTD XHTML 1.1//EN"><head xmlns="http://www.w3.org/1999/xhtml" profile=""><title xmlns="http://www.w3.org/1999/xhtml">如何像電腦科學家一樣思考：前言</title><link href="stylesheet.css" type="text/css" rel="stylesheet" xmlns="http://www.w3.org/1999/xhtml"/></head><body xmlns="http://www.w3.org/1999/xhtml"><h1 class="title" xmlns="http://www.w3.org/1999/xhtml">前言</h1><div class="toc" xmlns="http://www.w3.org/1999/xhtml"><ol xmlns="http://www.w3.org/1999/xhtml"/></div><div class="content" xmlns="http://www.w3.org/1999/xhtml"><span xmlns="http://www.w3.org/1999/xhtml"/>David Beazley 著<p xmlns="http://www.w3.org/1999/xhtml">作為教育家、研究者及書籍作者，我很高興看到這本書的完成。Python 是個有趣並且非常易用的程式語言，在過去幾年裡，Python 逐漸地受到歡迎。Guido van Rossum 在十多年前開發了 Python，其簡單的語法與整體感覺則是得自於 ABC，這個 1980 年代發展的教學語言。然而，Python 也被設計成可以解決真實的問題，並且也從其他程式語言如C++、Java、Modula-3 和 Scheme 等，借用了各式各樣的特徵。正因如此，Python 最顯而易見的特色之一就是它廣泛吸引了專業軟體開發者、科學工作者、研究者、藝術家及教育家。</p><p xmlns="http://www.w3.org/1999/xhtml">雖然 Python 吸引了不同社群的人士，你可能還是會懷疑 <q xmlns="http://www.w3.org/1999/xhtml">為何選用Python？</q>，或者 <q xmlns="http://www.w3.org/1999/xhtml">為甚麼教導用 Python 撰寫程式？</q> 回答這些問題可不簡單---特別是當大眾的意見都站在，如 C++ 和 Java 這些自討苦吃的選擇這一邊的時候。然而，我想最直接的答案就是用 Python 寫程式可以單純地得到許多樂趣，並且更有生產力。</p><p xmlns="http://www.w3.org/1999/xhtml">當我教授電腦科學課程時，我希望教學題材涵蓋重要概念，又能對學生來說有趣且迷人。可惜的是，程式設計入門課程目前傾向投注過多焦點在數學抽象概念上，且讓學生因惱人問題而沮喪，如語法、編譯以及看起來晦澀難解的規則等低階細節。儘管這些抽象及形式對專業軟體工程師和計畫繼續學習電腦科學的學生來說，非常重要，在一個入門性的課程採取這種方式大部分只會使電腦科學更無趣。教課的時候，我可不想面對一整間無精打采的學生。我寧願看到他們透過探索不同的想法、採取有創意的方式、打破成規並從錯誤中學習，以嘗試解決有趣的問題。這麼做的原因是，我不想浪費半個學期試著釐清含糊的語法問題、難以理解的編譯器錯誤訊息，或是一個程式可能造成一般性保護錯誤的數百種方式。</p><p xmlns="http://www.w3.org/1999/xhtml">我喜歡 Python 的原因之一，就是它在實做與概念上取得了很好的平衡。既然 Python 是直譯的，初學者幾乎可以立刻學會這個語言，並做些美妙的事，而不會迷失在編譯與連結的問題中。更有甚者，Python 隨附大型的模組庫，能夠應用在各種工作上，包括網路程式設計到圖形處理等。具有如此實用的重點是吸引學生注意力的絕佳方式，並且能讓他們完成重要的專案。然而，Python 也可以作為介紹重要電腦科學概念的優良基礎。由於 Python 完整支援程序和類別，便可逐步引導學生認識程序抽象化、資料結構，以及物件導向程式設計等課題，這些全都可以應用在往後 Java 或 C++ 的課程上。Python 還向函數型程式語言借了許多功能，可以用來介紹這些以往是在 Scheme 及 Lisp 的課堂上詳細介紹的概念。</p><p xmlns="http://www.w3.org/1999/xhtml">讀了 Jeffrey 的序文，我被他的評論所感動，Python 使他看見<q xmlns="http://www.w3.org/1999/xhtml">更高層次的成就以及較低層次的挫折</q>，而他可以<q xmlns="http://www.w3.org/1999/xhtml">工作得更快且獲得較佳結果</q>。儘管這些評論是指他的入門課程，我有時會以同樣的理由，將 Python 應用在芝加哥大學的進階研究所電腦科學課程。在這些課程裡，我不斷地面對將大量困難的課程資料，包含在極短的九星期學季中這種讓人氣餒的工作。雖然我必定可以承受使用像 C++ 這種語言所帶來的大量痛苦及折磨，我常常發現這種方式有著不良的後果，特別是這些課程的主題不只是關於<q xmlns="http://www.w3.org/1999/xhtml">程式設計</q>時。我發現使用 Python 讓我能夠較為集中在實際的主題上，同時也使學生能夠完成重要的課程作業。</p><p xmlns="http://www.w3.org/1999/xhtml">雖然 Python 仍是年輕、發展中的語言，我相信它在教育上會有耀眼的未來。這本書在這方向上是重要的一步。</p>David Beazley，芝加哥大學，<em xmlns="http://www.w3.org/1999/xhtml">Python Essential Reference</em> 作者</div><p style="text-align: center;" xmlns="http://www.w3.org/1999/xhtml"><a href="index.xhtml" xmlns="http://www.w3.org/1999/xhtml" shape="rect">目錄</a> | <a href="dex.xhtml" xmlns="http://www.w3.org/1999/xhtml" shape="rect">Index</a></p></body></html>