________________________________________________________________

□■□ 自由軟體鑄造場電子報第 229 期 | 2013/10/29 □■□
________________________________________________________________

◎ 本期主題︰淺析自由開源軟體專案與其個別元件授權條款之差異
◎ 訂閱網址︰http://www.openfoundry.org/tw/news/
◎ 下次發報時間︰2013/11/12

□ 本期標題 □__________________________________________________

■ [法政專欄] 淺析自由開源軟體專案與其個別元件授權條款之差異

■ [自由專欄] 在沙箱中思索

■ [自由專欄] 一名教授學習如何將教學方法改為開放源碼

■ [源碼專案] Seafile－－開源的雲端辦公軟體

■ [源碼新聞] Google 的 Gmail 關鍵字掃瞄可能違反竊聽法

■ [源碼新聞] 車載娛樂系統近期將大舉邁向自由開放源碼的共工模式！

■ [源碼新聞] Adobe 啟動 SVG 開放源碼資料庫支援計畫

■ [源碼新聞] 自由開放源碼軟體幫助編撰盲友的點字樂譜！

■ [源碼新聞] 2013 開放資料工作坊 (2013.11.08-09)

■ [源碼新聞] 2013 年十一月份社群活動列表

□ 本期內容 □__________________________________________________

■ [法政專欄] 淺析自由開源軟體專案與其個別元件授權條款之差異

葛冬梅／文

有經驗的開發者在利用自由開源軟體時，會主動了解軟體專案所適用的授權條款，以遵守授權義務規定的方式來應用自由開源軟體。但是，不少開發者可能容易忽略的是，有些自由開源軟體專案裡，還可能包含或附帶與主專案框架不同授權條款的元件，若是應用專案的方式涉及到這些元件的話，便可能會在實際應用上產生完全不同的效果。

【個案實例】

1、關鍵引擎採用 LGPL-2.1 授權的 GPL-2.0 專案：VLC

這幾年很受到歡迎的多媒體播放器與其框架專案VLC，就是一個很顯著的例子。VLC專案整體採用 GPL-2.0 授權，但是為了讓 VLC 可以持續地被應用在 Linux、Windows、Mac OS X、Android 等不同平台上，該專案的開發者在 2011 年決定，要將 VLC 的關鍵引擎改用 LGPL-2.1 來重新授權（註一），這是因為 LGPL-2.1 對於函式庫的利用方式有著較為彈性的規定，使用者只要在合於授權規定的方式內，透過函式庫既定的介面來與其互動存取資料，則新開發出來的軟體，就可以適用非 LGPL-2.1 條款的方式來授權散布，甚至必要時也有機會採取封閉源碼的方式來授權新軟體。因此當開發者僅利用到 LGPL-2.1 函式庫或程式碼的話，就有著根據 LGPL-2.1 授權規定來開發私有軟體 (proprietary software) 的彈性空間（註二），但若是開發者確實是利用到整個 VLC 專案的程式碼，包括 LGPL-2.1 授權的函式庫，以及 GPL-2.0 的播放框架時，便可能必須一體遵守 GPL-2.0 的規定，因此時 GPL-2.0 授權的程式碼，也一併經引用而成為後續衍生專案不可分割的一部份了。

http://www.openfoundry.org/images/131029/licensedifference/lc_201310_1.png
▲ 圖1：VLC 在 2011 年 12 月 7 日發佈的新聞稿中說明，核心引擎已經改為 LGPL-2.1 授權（註三）。

2、透過 GPL-2.0+ 程式碼最佳化部份功能的 LGPL-2.1 專案：FFmpeg

FFmpeg 是個結合多媒體框架與播放解碼器 (codec) 的軟體專案，專案整體採用 LGPL-2.1 及其後版本授權 (LGPL-2.1+)，但是 FFmpeg 在原本標準的預設功能與程式碼之外，還額外提供了可以最佳化部份播放功能的程式碼，但與專案的主要框架不同，這些具有最佳化功能的程式碼是採用 GPL-2.0 及其後版本來授權的 (GPL-2.0+)。因此當開發者利用 FFmpeg 專案的程式碼來開發新軟體時，若是利用到 FFmpeg 的部份僅有其標準預設功能程式碼，新開發出來軟體的授權條款便可以只要考慮 LGPL-2.1 授權方式的拘束性，與利用到同採 LGPL-2.1 的 VLC 核心引擎函式庫一樣，透過既定介面來與其互動者，不需要受到 LGPL-2.1 授權的拘束，不過若是後續開發者，選擇啟動這些以 GPL-2.0 授權的額外程式碼來最佳化 FFmpeg 的衍生專案，就有可能讓整個衍生專案轉為 GPL-2.0+ 授權，影響所及，可能會讓整個新軟體成為 FFmpeg 的衍生程式，新軟體也因此可能必須要採用 GPL-2.0 來授權散布（註四）。

http://www.openfoundry.org/images/131029/licensedifference/lc_201310_2.png 
▲ 圖2：FFmpeg v. 2.0.2 中的 LICENSE 純文字檔，羅列了所有採用 GPL-2.0+ 授權的源碼檔案。

3、融合許多 BSD 類授權條款的 MPL-2.0 專案：Mozilla Firefox

Mozilla Firefox（簡稱 Firefox）這款著名的自由開源瀏覽器，整體是採用 MPL-2.0 條款來授權散布，但是若查閱附隨在 Firefox 中的授權資訊時，可以看到許多非 MPL-2.0 授權的程式碼也包含在瀏覽器中，而這些個別元件、檔案的授權條款，幾乎都是屬於義務性規定較為寬鬆的 BSD 類條款（註五）。

之所以有這樣現象存在，是因為 MPL-2.0 的授權特性介於 GPL 跟 BSD 之間：原則上，後續開發者修改 MPL-2.0 軟體所產生的衍生檔案，仍然必須採用 MPL-2.0 來授權，但若是一個獨立檔案裡，並未包含任何 MPL-2.0 授權的程式碼，那麼這個檔案就可以採用非 MPL-2.0 的條款來授權，只要其授權條款的具體內容，不會與 MPL-2.0 產生衝突即可。而由於 BSD 類的授權條款並不會與 MPL-2.0 產生衝突，所以我們才會在 Firefox 專案中看到許多 BSD 類條款授權的個別元件與檔案存在其中（註六）。也因此，當開發者擷取 Firefox 程式碼來開發新軟體時，若擷取的剛好僅是這些 BSD 類條款授權的源碼檔案時，那麼在應用上只需要遵守這些 BSD 類條款的授權規定即可，而毋須一體受到 MPL-2.0 所拘束。

http://www.openfoundry.org/images/131029/licensedifference/lc_201310_3.png
▲ 圖3：Firefox v. 18.0 中的授權資訊頁面，說明 Firefox 包含非 MPL-2.0 授權的元件，這些元件所適用的授權條款數量多達將近 60 款。

【特定授權條款間可以彼此相容】

一個自由開源軟體專案中，之所以能夠存在著不同條款授權的元件，最基本的原因就是在於特定授權條款彼此間可以有相容的機制。這些相容的方式主要分為蛇吞象與牛鷺居兩種型態（註七）。

1、蛇吞象：嚴格包裹寬鬆的授權相容型態

上述 VLC 專案的狀況，就是屬於這種授權相容型態，因為 GPL-2.0 是一份規定相對比較嚴格的授權條款，而 LGPL-2.1 則是相對寬鬆的授權條款，此外，LGPL-2.1 的授權內容與 GPL-2.0 非常相近，並沒有衝突或不相容之處，再加上 LGPL-2.1 與 GPL-2.0 這二份授權條款，本就是有單行道式的轉換關係，所以散布者若是認為必要，隨時可以將 LGPL-2.1 授權的函式庫，改為 GPL-2.0 的授權型態向後散布，因此 VLC 的函式庫與程式碼可以透過 LGPL-2.1 獨立授權散布，卻也可以同時被包裹在 GPL-2.0 的專案中，整體以 GPL-2.0 來對外授權散布。

這種的授權相容的型態，類似法國著名小說「小王子（註八）」裡所描述的情節，一條蟒蛇雖然吞了一整隻的大象，但是他人從外觀上，只能看到蟒蛇的外在形體，卻無法得知蟒蛇腹中存在著一隻大象的內在事實，相對地，寬鬆的 LGPL-2.1 函式庫被包裹在相對嚴格的 GPL-2.0 專案中，除非像 VLC 專案一樣有明確的授權說明文字，否則一般人很難清楚得知一個 GPL-2.0 授權的軟體專案中，存在著以 LGPL-2.1 等較寬鬆條款授權的函式庫與程式碼。

根據這樣的邏輯，只要一份條款的授權內容相對嚴格，另外一份條款的授權內容相對寬鬆，兩份條款的授權內容也不相衝突，寬鬆條款授權的程式碼，就有機會以原始的授權狀態，被包含在嚴格條款授權的專案之中，而使用者對於整體專案來做觀察，只會大致看到那個較為嚴格的授權方式。舉例來說，除了 GPL-2.0 專案可以包含 LGPL-2.1 授權的函式庫之外，像 BSD、MIT 這類義務性規定寬鬆的授權條款，大都可以被其他相對嚴格的授權提款所包覆，因此 LGPL-2.1 專案可以包含 BSD-3-clasue 元件，而在 GPL-2.0 授權的專案中也可以利用 MIT 授權的元件。

不過，相同的邏輯應用在 FFmpeg 專案的例子中，可能會有人感到疑惑：FFmpeg 中包含有 GPL-2.0 授權的程式碼，可是整體專案為何在聲明上，表彰其是以 LGPL-2.1 進行授權散布，而不是 GPL-2.0 呢？這是因為這些具有最佳化功能的額外元件，原則上並不屬於 FFmpeg 專案預設程式碼的一部份，這些 GPL-2.0 授權元件，可說是 FFmpeg 專案另外提供的強化功能。因此若開發者在沒有進行任何調整或啟動額外功能的狀況下，來直接應用 FFmpeg，這時候的 FFmpeg 專案程式碼仍然都是 LGPL-2.1 授權的，據此所開發出來的新軟體也因此保有適用非 LGPL-2.1 條款授權的彈性空間，然而，若開發者在後續應用上，啟動這些 GPL-2.0 授權元件，來最佳化 FFmpeg 的功能，便有機會讓整個 FFmpeg 後續的衍生專案，轉為 GPL-2.0 授權，這便導致新軟體必須適用 GPL-2.0 來授權散布。

2、牛鷺居：不同授權條款同時並存的相容型態

Firefox 專案就是屬於這種授權相容的型態，如同之前說明過的，MPL-2.0 條款本身就具有包容其他授權條款的特性，所以只要一份條款的授權規定不與 MPL-2.0 產生衝突，那麼就可以用來授權未包含 MPL-2.0 程式碼的檔案，而存在於 MPL-2.0 授權的專案中。

在這種授權相容的態樣中，可以看到許多不同的授權條款存在於一個軟體專案中，這些條款不會包覆對方，而是彼此獨立，所以只要條款內容本身不會彼此干擾，即使二個不同元件、檔案的授權內容南轅北轍，也可以沒有問題地存在於一個軟體專案中，甚至不提供源碼的私有軟體授權條款，也可以存在於這類的相容型態裡。這種授權型態的寬廣包容，為軟體專案本身、也為其中個別元件帶來更多應用與發展的機會，就如同水牛龐大的身驅提供牛背鷺避免被天敵攻擊的屏障，而牛背鷺會啄食水牛身上的寄生蟲一樣，是彼此存在互利，但又不彼此侵犯的共生狀態。

會形成這類相容型態的授權條款，除了 MPL-2.0、CDDL-1.0 之外，還包括了 BSD、MIT 以及 Apache-2.0 等義務規定相對寬鬆的 BSD 類授權條款。此外， LGPL-2.1 由於對於函式庫有著彈性的寬鬆規定，因此在符合其授權規則的利用方式下，LGPL-2.1 也是可以與許多其他授權條款共生在同一個軟體專案中。

【所應用到元件的授權條款為判斷重點】

以上的說明要點，在於讓大家了解到，當利用自由開源專案開發新軟體的時候，了解專案整體授權模式雖然是重要的一環，但實際所擷取、應用到的個別元件，其授權態樣也必須要進一步去了解與掌握，尤其當開發者並非直接應用專案整體程式碼，而是擷取部份元件或者開啟額外功能來利用的時候，就必須要注意個別元件授權內容所帶來的影響，如此才可以遵守正確的授權規定，又或者不會遺漏掉寬鬆授權條款所帶來的彈性運用空間。

不過，筆者在此也提醒，本文所舉的三個實例，皆是有著清楚說明的開發專案，在實務上，有些專案並沒有特別說明或者特別標示這種元件授權差異的狀況，而僅是在下層元件目錄中或檔頭說明文字裡面，才有相關的標示與說明，因此在實際應用上，若是在專案整體的說明中沒有看到相關資訊的話，建議可以去查閱元件所在的源碼目錄層或個別檔案的檔頭說明文字，是否有授權相關的資訊，以清楚了解該元件的授權條款，並以正確的方式來應用自由開源軟體專案，與其中夾附的個別元件。

----

註一：這種改變專案授權方式的過程，就是所謂的「重新授權 (re-license)」。關於重新授權的詳細說明請參見：葛冬梅、林誠夏，自由軟體專案授權方式的轉換（下）：新版本號另以更改後的授權方式釋出，http://www.openfoundry.org/tw/legal-column-list/8219-2010-12-24-16-47-06。

註二：VLC專案的授權資訊請見：http://www.videolan.org/legal.html，http://www.videolan.org/press/2007-1.html；許多專案開發者在 2011 年的 VideoLAN Dev Days 2011 中同意將核心引擎中的函式庫改為 LGPL-2.1，相關新聞稿請見：http://www.videolan.org/press/lgpl.html，http://www.videolan.org/press/lgpl-libvlc.html。

註三：新聞稿網址：http://www.videolan.org/press/lgpl.html。

註四：FFmpeg 的授權說明請參見：http://www.ffmpeg.org/legal.html。

註五：屬於 BSD 類的授權條款請見：http://www.openfoundry.org/tw/foss-license-category。

註六：Firefox 瀏覽器的著作權人為 Mozilla Foundation（簡稱 Mozilla 基金會），Mozilla 基金會對於轄下的自由開源軟體專案有著統一的授權政策，內容請參閱：http://www.mozilla.org/MPL/license-policy.html。這個授權政策頁面顯示，與 MPL-2.0 相容的授權模式包括了：(1) CC0 (Creative Commons Zero)；(2) 不受到著作權保護的公共財軟體 (Other Public Domain dedications)；(3) MIT與新款 BSD； (4) 類似 MIT/BSD 這類義務規定叫為寬鬆的其他條款；(5) Apache-2.0 ；(6) 以及 GPL/MPL 雙重授權模式。此外，在可以區分清楚且採用動態連結的利用方式下，LGPL-2.1 及其之前版本授權的元件，也是可以應用到 Firefox 專案中。

註七：關於授權條款相容性的詳細說明，請參閱：林珈宏，從 Copyleft 看自由開源軟體授權相容性，http://www.openfoundry.org/tw/legal-column-list/8710-introducing-license-compatibility-via-copyleft-mechanism。

註八：「小王子（法語：Le Petit Prince；英語：The Little Prince）」小說由法國作家安東尼．聖修伯里（Antoine de Saint-Exupery，又譯「安托萬．德．聖-埃克蘇佩里」）所著，關於這本小說的介紹可以參閱維基百科條目：http://zh.wikipedia.org/wiki/%E5%B0%8F%E7%8E%8B%E5%AD%90。關於蛇吞象的圖片可以參見下列網頁的內容：http://unmomentoplease.blogspot.tw/2011/09/my-favorite-antoine-marie-jean-baptiste.html。
_______________________________________________________________

■ [自由專欄] 在沙箱中思索

謝良奇／編譯

紐約時報 (New York Times) 的技術部門正不斷地往前演進，以我在這裡大約 1 年的時間，已經觀察到許多重大改變。對於一間大型且非常古老的組織，我發現這間公司卻很創新，願意冒風險保持在技術最尖端。不過，在內部的確有一些領域我們並未挑戰技術極限，在用以建構我們網站的開發環境上，我們的腳步落後許多。雖然有過多次重整的嘗試，但因為時機不對而作罷。但隨著 NYTimes.com 的重新設計，我終於有絕佳機會改變我的同事們與我工作的基礎面向。


我做了什麼

在打造適當開發環境時，我考慮了若干選項：

＊使用 Apache、PHP、Node 與我的網路應用程式所需套件，讓我的電腦成為網路應用伺服器。
＊啓用某些雲端運算實體如 Amazon EC2，安裝我的套件，然後用像 Macfusion 的工具把實體掛成本地檔案系統。
＊在我的桌面作業系統上，用 VirtualBox 這類虛擬機器工具模擬生產環境。

我選擇第三條路。在為大型企業級應用程式時，我希望確保我在開發中做的測試，能夠好好地顯示我對程式碼的更動，在開發環境會如何運作。我也希望極力確保它會在生產環境中如預期般運作。使用 VirtualBox 能夠讓我有自信做到這點。


實現信心

我如何打造出我相信可以在生產環境運作的應用程式，且避免陷入搜尋我無法重製的臭蟲？我所做的是削減變數（不是程式設計裡的那種變數）。這些變數會造成我的開發環境與生產環境間的不一致。它們會使得我的應用程式在某環境下運作順暢，但在另一種環境下卻頻出問題。

我的程式碼要順暢運作，有賴於若干套件與軟體。當這些依賴關係在開發與生產環境間不一致時，我就無法確定我的應用程式可以正常運作。


案例

例如，我要在本機建立應用程式（我的電腦安裝了 PHP 5.4），然後部署到開發伺服器（安裝了 PHP 5.3），我可能會碰上驚人驚訝的狀況。我用 JavaScript 開發者熟悉的簡單括號語法撰寫我的陣列：[value1, value2]。雖然在我的機器上運作無誤，在開發機上卻突然丟出錯誤。

這是因為該語法從 PHP 5.4 才引入。早期的 PHP 版本建立陣列必須使用關鍵字 array：array (value1, value2)。

想像一下這類問題在程式碼中層出不窮，真是惡夢。避免這類變數的一個方法，是用虛擬機器建立複製生產環境的開發環境。


如何運作

使用虛擬機器跑應用程式不是新點子。有許多工具可以幫助開發者建立與管理虛擬機器。我用的是 Vagrant、VirtualBox、Puppet、Git。

在生產環境，我們用 CentOS 當作應用程式的作業系統容器 (container)。當然，我們的虛擬機器上也應該跑同樣的作業系統。作為第一步，我用該作業系統做了一個 Vagrant box。Vagrant 讓用戶很方便地透過簡單指令，包裝並分享虛擬機器映像。使用 Vagrant，我包了一個跑在 VirtualBox 虛擬環境上的 CentOS box。我可以很容易地把它放在檔案伺服器上，分享給我的團隊成員。

這關鍵的第一步是確保我們在不同環境間，在套件與組態設定上擁有一致性支援。現在，當我在我的虛擬機器上安裝像 Node 或 PHP 等軟體時，我能更確信它的運作會和生產環境如出一轍。

不過在虛擬機器上安裝每個個別套件，並手動設定組態，是一件累人的工作。不僅是如此，當我把虛擬機器分享給團隊時，如果我稍後更改了組態設定呢？我要叫每個人都手動更改設定嗎？還是我要另建一個新映像再分享給所有人，強迫團隊成員在我每次更改設定時都要下載一次龐大的映像檔？聽起來不是好選擇。幸好，有更好的方法。


使用 Puppet

Puppet 是一套讓開發者透過名為 Puppet manifests，聲明 Unix 系統組態的工具。藉由 Puppet manifests，我可以任意設定我的虛擬機器。由於 Puppet manifests 只是用 Puppet 的宣告式語言寫成的簡單文字檔，我可以在 Git 追蹤這些檔案，並分享給我的同事。

這表示如果我用 Puppet 安裝 Node 的模組如 0.4.0 版的 Grunt，但之後我需要更新至 0.4.1，我只要在 Puppet manifest 裡把版本號給改掉，提交 (commit) 並推送 (push) 改變，並要求團隊拉取 (pull) 改變並在其環境中執行 Puppet。Vagrant 提供方便的指令在虛擬機器中執行 Puppet：vagrant provision。這是個讓我們依需更改虛擬機器的簡單程序。

圖片：http://www.openfoundry.org/images/131029/sandbox/sandbox_1.jpg
圖片來源：http://open.blogs.nytimes.com/2013/09/10/thinking-inside-the-sandbox/?_r=0

這個強大功能能抹煞掉一大堆變數。這麼一來，我就能確信，我虛擬機器上的套件與組態，和我的團隊、開發環境、生產環境都完全相同。因此，我能預期我的應用程式在不同環境間，獲得一致性的支援。

最後，我寫了一支 Bash 腳本來下載並安裝所有所需的軟體。該 Bash 腳本安裝了 Git、VirtualBox、Vagrant，複製我們的核心應用程式代碼庫，並執行其他幫助開發者更快進入狀況的工作。

圖片：http://www.openfoundry.org/images/131029/sandbox/sandbox_2.jpg
圖片來源：http://open.blogs.nytimes.com/2013/09/10/thinking-inside-the-sandbox/?_r=0

藉由完成上述步驟，我已經建立起仿造生產環境的全自動化沙箱 (sandbox)。我可以輕易分享、更改它，更重要的是，確信能依賴它。


進階閱讀

為了減輕軟體開發與部署上的問題，不斷地有新的解決方案出現。其中，我覺得 Vagrant 可說是勝利者。不過，有其他工具也值得一看，像是 Docker 與 Packer。它們打算從根本改變我們部署軟體的方式，選擇將應用程式部署為容器或機器映像，完整地包起所有相依軟體。這是另一種不同的軟體交付範式，我希望我未來有機會加以探索。


結論

軟體開發並不簡單。我們可以透過採行聰明的標準、撰寫組織良好的程式碼、與團隊有效溝通、使用正確工具，來讓事情簡單一些。最關鍵的工具之一，是一個精心打造的沙箱，這也是起頭的好地方。

◎本文翻譯自 The New York Times，原作者為 Omar Niazi：
http://open.blogs.nytimes.com/2013/09/10/thinking-inside-the-sandbox/?r=0
_______________________________________________________________

■ [自由專欄] 一名教授學習如何將教學方法改為開放源碼

謝良奇／編譯

77 歲這一年，我發表了我的第一本電子書，並在大規模網路免費公開課程 (Massive Open Online Course，MOOC) 開班。而這些都不在我原先的計劃之中。

我之前想要寫本名為 Forms for a Future 的書，內容有關於為了有價值的未來生活，我們所不可或缺的公民討論。因此在離開教育界 15 年之後，在 2007 年秋天，我在榮譽學院 (Honors College) 談妥了一個兼任職位，打算讓一個小的大學本科班幫助我集中注意力。這個課程每週三次，有三本必要的全本教科書。

這次回歸所見是我所未曾預料的。

我的學生全都是千禧世代。有個男學生每次出席時總帶著一隻耳機。所以，我問他：

「你左耳在聽什麼？」

「音樂。」

「右耳呢？」

「聽課。」

「為什麼？」

「這樣學習效果比較好。」

「對其他人也一樣嗎？」

「當然。」

之後他反守為攻。用一種非常誠懇的語氣，問道，您覺得這樣對您不敬嗎？

我說，沒有，現在沒有。不過，我得問一下。

這場對話反映學生學習與教師教學方式的許多改變。如今，在我的課堂裡，沒有教科書。課程是虛擬的。沒有講座，所有的實質教材都從線上取得。

但是，使用開放源碼教材並非僅是課程設計，也是教育學的一種方法論。我的課程結構得以讓身在現場或遠方的學生，在當下或其他時間，取得同樣的教材，不論他們能否直接與我會面，不管是免費上課或者得為了學分支付費用。藉由了解學生從我們的教學中學到的，我們能夠從學生身上學習如何教學。這種相互參與的層次是真正令人興奮的部分。就像他們需要我們一樣，我們也需要他們。

這些課堂運作的改變，促使我對我的教學風格演進作出反省：從課堂講授與印刷書籍，到使用互動式 iBooks 與 MOOC。這項轉變並不如所見那般的突然。回顧過去，25 年前我的一個經驗，正是教育即將面臨改變的一個指標。

當時，我擔任教授的那所大學有三節的心理學導論，各有 350 名學生。課從 9am、11am、1pm 開始，由一組講師教課。每位講師講授他們在心理學方面的專業，進行由機器進行評分的多選題考試。

不用說，學生們並不喜歡這堂課。學生的態度與選課動機和講師們有很大的關聯，氣氛充斥著競爭意識，而非相互參與。就像是我幫一名休假中教授代課的那一年。那是個可怕的秋季學期，鮮少有任何形式的參與。一開始我怪罪學生，之後，我認為如果我們要讓學生吸收教學內容，我也有責任改變教學方式以便讓他們參與進來。

在接下來的春季學期中，我在課程第一天站在倒數第二行的學生中間，講起 1964 年在紐約發生的吉諾維斯謀殺案，當時 38 名目擊者在一旁袖手旁觀。我向學生打趣說他們都沒有名字。在該課程的學生教學大綱中，我加入了製作大型名牌。之後的五堂課，我鼓勵他們把名牌掛在脖子上。在接下來的那堂課，他們發現到，我已經用教科書裡的社會影響力五大原則，說服了他們幾乎所有人掛上名牌。

每堂課都會以某種方式體驗社會心理學的某些概念。在學期末，課堂上出現的學生比選課人數還要多。他們帶了朋友一起來上課！這個實驗造成某些轟動，主席要求我針對我的教學方法舉行座談會。不過，到了年底，所獲得的共識是我在迎合學生，而這件事只有我會做。

如今我理解到我們當時並沒有充分了解。需要對結果負責的，並不是表演，而是編排。我有了新的評量標準，重點在於作為學習者的學生們，而非作為教師的我。

身為學者，我們相信知識屬於公眾。創造一種方式，讓學生體驗到在課堂所學的概念，是學術的一種形式。這應該是公開知識。開放源碼教學與學習使這一切成為可能。翻轉傳統課堂著重的是學生對教材的參與，而非施教者。

當我最後在 2007 年重返課堂時，我再一次發現到，改變教育方法讓學生參與其中是我的責任。令我驚訝的是，運用 21 世紀的數位科技能更輕易地達到更高的學生參與度。如今，我有不同選擇。偶爾，我會講課，不過大多數時間我會看著我的學生，看他們按照我為他們設計的曲子來演出。我的教學越來越個人化，最棒的是，更為有趣了。

今日的開放源碼技術更加值得看重。它們讓學生在最適合他們情況的時間與地點完成目標。在社交上，它們更具合作與參與性，技術上，它們允許對更為包容、全面、更具參與性與新穎的教材，進行有效的取用。

值得慶幸地，我改變了我的觀點還有更多更多。我的書 Forums for a Future 已經完成了，在 USF Canvas.net 上可以找到它的 MOOC。

◎本文翻譯自 OpenSource.com，原作者為 Edward Renner：
http://opensource.com/education/13/9/open-source-teaching-ethods
______________________________________________________________

■ [源碼專案] Seafile－－開源的雲端辦公軟體

林雪凡／文

軟體名稱: Seafile
介紹版本: 1.8.1
官網: http://seafile.com/
授權: GPL-3.0

想要一個完全由自己掌握的，可讓伙伴們協同工作的小型雲端系統嗎？
 
Seafile 是款近年來發展迅速的開源雲端辦公系統，其目標類似於 Google Drive (https://drive.google.com/) 或 Zoho (http://www.zoho.com/) 等線上辦公室軟體，只是相對而言比較輕量級。您可以對這個系統提交一些檔案、修改一些檔案、評論或協作其他人的檔案，在不同的使用者之間還能設定群組，而個別檔案的歷史記錄功能也沒少。

使用者可用網頁瀏覽器存取 Seafile 中的內容，此外還有手機 app 可用，至於桌機軟體也各平台都有。

除此之外， Seafile 還能在您的平台上輕鬆建立起一台私有伺服器（測試證明真的非常輕鬆，幾乎零配置完成），而不必非得把資料存在別人的電腦裡。伺服器程式支援 Windows、Linux 與 Raspberry Pi！此外，伺服器本身接近完全綠色，連同資料與執行檔在內，全都可以用複製貼上直接搬動轉移，不管備份、搬遷或升級都非常方便。

Seafile 以 markdown (http://markdown.tw/) 為一號官方格式，可讓使用者以這種流行的純文字格式編出漂亮的文檔。而對於 markdown 不滿意或不習慣的人，Seafile 也提供另一種名叫 seaf 的富文字格式，讓喜歡所見所得編輯的人能愉快使用。

當然，不足之處也是有的。比方說，無論是 markdown 或 seaf，相對於我們平常用的 Office 軟體，其能表現出的格式目前都還比較有限；此外，Seafile 也未原生支援表格編輯－－甚至就連瀏覽能力都很差。但還是可以將表格檔案當作一般檔案上傳，供人日後下載使用，或是修改後重新上傳更新版本。
因為作者團隊源自大陸，Seafile 的中文說明文件非常充足，這對中文用戶倒是個不錯的紅利。也是我可以偷懶的好理由♪。本回就不詳述操作方法，看倌們還請前進官網。

 
相關連結：

1.Seafile 幫助頁：http://seafile.com/help/
2.Seafile 檔案下載：http://seafile.com/download/
3.Seafile 原碼庫 (github)：https://github.com/haiwen/seafile
______________________________________________________________

■ [源碼新聞] Google 的 Gmail 關鍵字掃瞄可能違反竊聽法

謝良奇／編譯

一名聯邦法官日前發現，Google 可能因為在其商業模式中利用機器掃瞄 Gmail 訊息，以建立用戶描述與提供定向廣告，而違反聯邦和加州竊聽法。

在一樁擬議指控 Google 竊聽 Gmail 作為其商業模式的集體訴訟中，提到了美國地方法院法官 Lucy Koh 的這項決議。Google 以竊聽法授權電子郵件提供者，在有助訊息傳遞或作為服務運作附帶條件的情況下，對訊息進行攔截為由，試圖讓該件於加州的聯邦案件遭到駁回。

Judge Koh 寫道，因此，該法令的設計顯示，國會並不打算允許電子通訊服務提供者，為了有利於其商業模式，而在從事攔截上有無限空間，如 Google 所主張。事實上，如果一般業務過程的例外真如 Google 所暗示般廣泛的話，這條法律條文將形同虛設。

Gmail 包含其稱之為 Google Apps 的商業服務，是全球最大電子郵件服務，全球約有 4 億 5 千萬名用戶。

這項裁決對 Yahoo! 也有同樣的打擊，該公司擁有超過 3 億用戶的免費電子郵件平台，也會掃瞄郵件以遞送廣告。微軟更名後的 Outlook 免費網路郵件則沒有對其 4 億用戶進行訊息掃瞄。

這已經是 9 月中聯邦法院第二次發現 Google 有竊聽的潛在責任。

之前 Google 要求聯邦上訴法院對一項近期裁決重新考慮，該裁決發現 Google 在秘密攔截公開 Wi-Fi 路由器資料時，可能有竊聽之嫌。該公司表示，由美國第九巡迴上訴法院作出的裁決，將導致對何種空中信號受到竊聽法保障的混淆。

這個案子涉及近十幾個以從街景地圖車竊聽開放 Wi-Fi 網路為由，向 Google 尋求賠償的聯合訴訟。這些開遍全球各地街道的車輛，配備有 Wi-Fi 嗅探硬體，會紀錄路由器的名稱與 MAC 位址，以便改善 Google 與地點相關的服務。但是該車輛也會收集內容片段。

該搜尋巨人日前向該上訴法院請願，重新考慮讓該案件進行審判的決定。正如該上訴法院的裁決，Judge Koh 的決議也會在 Gmail 的案件中，瓦解 Google 的竊聽防守。

加州聖莫尼卡的 Consumer Watchdog 隱私主任 Jon Simpson 指出，該裁決意味著聯邦與州竊聽法適用於網際網路。這是線上隱私的巨大勝利。像 Google 這類公司不能任意使用我們的資料與電子郵件。

Google 在聲明中表示對此裁決感到失望，正在考慮其法律選項。該公司表示，自動掃瞄讓他們能為 Gmail 用戶提供安全性與垃圾郵件保護，以及像優先收件匣這樣的強大功能。

Google 並非自動享有向美國第九巡迴上訴法院上訴此一裁決的資格，該公司必須向 Koh 要求授與中間上訴 (interlocutory appeal) 的許可。由於重要的法律問題，Koh 可能許可上訴而非先行審判。

Google 則維持主張 Gmail 用戶由於其終端用戶協議，已經對該掃瞄表示同意。然而，法官 Koh 認為，該協議並未向用戶充分闡明，Google 會讀取用戶訊息。此外，Koh 更直接駁回 Google 認為非 Gmail 用戶在與 Gmail 平台互動時，已經同意對其訊息進行掃瞄的論點。

Koh 說，Google 進一步爭論，由於電子郵件運作方式，即使是非 Gmail 用戶也知道他們的電郵會被攔截，因此非 Gmail 用戶對此攔截默示同意。因此，Google 認為在所有通訊中，通訊雙方不論是否是 Gmail 用戶，都已同意對電子郵件的讀取。法院駁回 Google 關於明確與默示同意的論點。法院發現，不能斷定任何一方，包括 Gmail 用戶與非 Gmail 用戶，同意 Google 以建立用戶描述或提供定向廣告為目的，閱讀其電子郵件。Google 指出 Gmail 與 Google Apps 用戶所同意的服務條款和隱私政策，以爭論這些用戶明確同意攔截行為。然而，法院發現，這些政策並未明確告知原告，Google 會攔截用戶電郵，以建立用戶描述或提供定向廣告。

◎本文翻譯自WIRED，原作者為 Darid Kravets：
http://www.wired.com/threatlevel/2013/09/gmail-wiretap-ruling/
______________________________________________________________

■ [源碼新聞] 車載娛樂系統近期將大舉邁向自由開放源碼的共工模式！

黃郁文／編譯

跨國性的汽車製造產業裡，當前正吹起一股善用自由開放源碼平台的風潮，未來這套標準化的 Linux 車載娛樂系統 (in-vehicle infotainment, IVI) 若是日趨成熟，也許不久之後大家愛車所能提供的資訊服務，也能像當前的智慧型手機一樣豐富而多元！

IVI 可說就是汽車的黑盒子 "black box"，一般來說，它除了提供車用視聽系統電源，用來記載車行軌跡與駕駛狀況外，還能供應免持聽筒的行動電話擴音，以及衛星導航等資訊服務。當前大多數的 IVI 系統都透過觸控螢幕來操作，部份高階機種更可以精確的透過聲控操作，然而，IVI 當前的銷售狀況並沒有業者想像中的美好，可以說大多數的消費者皆不買單，視其為車載裝置裡，非必然需要的額外配備。

現時 IVI 系統無法獲得多數消費者青睞，而達到普及的原因，參與 Linux Foundation 裡「車載 Linux 工作群組 (Automotive Grade Linux workgroup)」的 Rudi Streif 指出：因為當前多數車商使用的 IVI 系統，購價高額但功能與效能皆不夠完備，與服務性較為成熟的智慧型手機相較，僅能完成手機約 10％的功能！進一步來說，更可歸咎於許多汽車製造廠，都使用第三方所供應的商用軟體來支援本身的車載娛樂系統，這些商用軟體皆為封閉的軟體元件，當汽車廠商推出新款機種，便多要重新洽談高額的授權費用，來讓新款機種上也有一樣的元件，此種商用模式可說是虛耗金錢並轉嫁至消費者身上，自然，不能讓車載娛樂系統的發展有正向的循環。所以，自由開放源碼的車載系統平台，應可有效地改變上述現況。因為藉由一個可以重複被多家汽車業者使用的平台，可集聚眾廠之力，專注於核心功能、中介軟體，以及開放應用層介面的開發，以減少耗費精力在開發相異且封閉作業系統上。長遠來看，透過一個自由開放源碼的車載系統平台，車商更可以分享升級程式，在善用既成系統介面的條件下，專注開發與車子駕駛屬性結合的個別化車用娛樂程式，以改善現行虛擲研發資源於封閉平台介面，並導致應用程式效能不彰的沉痾。

Rudi Streif 表示從過去到現在，已約有 110 億美金的商務資金投注到 Linux 系統的開發與延展上，這些資金的投注者包括了 IBM 及 Intel 這樣的跨國產業，而 Linux 平台未來將仍然會以開放共享與免徵收權利金的方式繼續提供，從而，汽車製造廠商就車載智慧型系統這個領域，僅需要額外投入資源，開發所需的資訊及娛樂應用程式，以及中介軟體，即可在 Linux 作業系統既成的基礎上，順暢的發展出更具服務優勢的 IVI 平台。據觀察，目前市面上已有三家車廠陸續推出配備 Linux 車載娛樂系統的商品，包括：GM 在 Cadillac 型號產品上使用的 Linux  Cue IVI、Tesla 於 Model S 電動車系列產品內置 17 吋螢幕的 IVI 系統，以及 Toyota 即將推出的 Linux IVI 2014 Lexus IS。除此之外，高階汽車製造商 BMW 亦已經宣布發展自由開放源碼平台的 IVI，而 Ford 更已透過開放源碼的方式，完成了稱為 SmartDeviceLink 的應用程式介面，以讓其以 Microsoft 為底的 MyFord Touch 車載娛樂系統，也可以與現行市佔率較高的其他非 Windows 系統手機，與其他行動裝置間，在影音分享和其他功能上，能有更好的互動。

可以說，汽車製造商之所以開始大舉採用自由開放源碼性質的 IVI 系統，主要目的是為了降低成本，另一個原因則是由於過往封閉系統的複雜性，使得維修成本過高，且車載娛樂系統為一功能需求相對龐大的裝置，一般來說即使再為輕簡，也必須要先行建置約四千萬行程式碼的規模才能進行運轉。Jaguar Land Rover 車載娛樂系統的資深技術專家 Matt Jones 指出：過去汽車製造廠會逐年向不同的車載系統供應商，購入相似但用在不同機種上的商用軟硬體，以自由開放源碼的共工模式來看，這無疑是一種資源的重覆浪費，因為採用自由開放的 Linux 系統平台之後，Jaguar Land Rover 只要繼續在原本系統上增加新功能即可，無須如往昔在舊換新之後，還要重複測試與開發相同功能的新系統。所以目前 Jaguar Land Rover 已加入了一個規模頗為龐大的非營利自動車業界聯盟 GENIVI，該聯盟的成立目的，就是在推動自由開放源碼 IVI 系統在汽車產業裡的應用，目前該聯盟也正朝向整合平台需求，與提供會員車商認證的服務邁進。

無獨有偶的是，在 2012 年時，Linux Foundation 在多家汽車製造商的呼籲與支援之下，亦已啟動 Tizen Project。Tizen 可說是建基於 Linux 作業系統下的獨特分流，其系統結構 (reference architecture) 與軟體開發工具包 (software development kit, SDK)，主要就是要協助汽車製造業者，能夠在共工的基礎下，以低投注成本的方式共同開發一套得以運轉順暢的 Linux IVI，此一專案並可讓開發者直接使用 HTML5 的技術，來撰寫 IVI 系統上面的應用程式。當前，芬蘭的軟體供應商 Reaktor，正全力開發可用於 Tizen IVI 的使用者介面，以在這樣的架構下提供音樂串流與地理資訊定位服務，透過 Tizen IVI，未來汽車駕駛人應可更精確的掌控車流狀態，甚至不費吹灰之力，便可以找到距離自己目的地最近的停車位！

看來在 Linux 與其他相關自由開源軟體專案的支援下，未來的車載資訊與娛樂系統將會有嶄新而巨大的變革，我們可以想像，也許未來車載系統的功能，將會與智慧型手機和行動裝置系統比肩併行，一般讓人愛不釋手！


參考網址：

1、跨國性的汽車產業也要開放源碼
http://www.computerworld.com/s/article/9243075/Your_car_is_about_to_go_open_source

2、資訊娛樂是開放源碼車載系統首要目標的五個原因
http://www.openfoundry.org/tw/foss-forum/8990-2013-05-28-05-57-09

3、Tizen Linux 再進化！跨國車商將與科技研發公司共組車載 Linux 工作群組
http://www.openfoundry.org/tw/foss-news/8823-tizen-linux-linux-

4、MeeGo 與 Limo 合併為新作業系統 Tizen 獲 Intel、Samsung 支持
http://www.openfoundry.org/tw/foss-news/8484-meego-and-limo-are-merged-into-new-os-tizen-that-gets-support-from-intel-and-samsung

5、汽車製造商 Toyota 加入 Linux 基金會
http://www.openfoundry.org/tw/foss-news/8398--toyota--linux-
______________________________________________________________

■ [源碼新聞] Adobe 啟動 SVG 開放源碼資料庫支援計畫

黃郁文／編譯

約 8 年前 Adobe Systems 收購 Macromedia 取得 Flash 相關的技術後，Flash 技術的運用在 Adobe 相關的主線產品裡，也著實風光了好一陣子，不過、時過境遷，現階段在 Adobe 的商品規劃下，Scalable Vector Graphics (SVG) 格式的運用，已漸漸取代 Flash 成為下一階段的主軸。近期、Adobe 更啟動可縮放向量圖形 SVG 資料庫屬性的 Snapsvg 支援專案 (http://snapsvg.io/)，試圖透過此舉，將 Flash 過往的特色，透過 SVG 的嶄新技術，重現在當前的行動網路世界。儘管從歷史發展來說，2001 年初 SVG 技術剛剛嶄露頭角時，Adobe 是支持 PGML (Precision Graphics Markup Language) 格式，不過由於後來 PGML 並不被「全球資訊網協會 (World Wide Web Consortium, W3C)」所採用，其後 Adobe 便改弦易轍轉而推動 SVG 的格式與標準，並將其開發成果以開放源碼的方式釋出，達致 SVG 格式至今已漸趨普及的局面。

Adobe 現時推動的 Snapsvg 資料庫，是以開放源碼的 Apache-2.0 授權方式在 Github 平台上向公眾釋出，這個新套件是由 Dimity Baranovskiy 所設計，而 Dimity Baranovskiy 也是 Raphael Javascript 資料庫的創作者，可說這些相關資料庫的設計，就是為了簡化向量圖形在網路瀏覽器裡的運用與展現效果。所以大體上，Snap.svg 是一個 JavaScript 性質的資料庫，能讓網路開發者將其置入網頁內以 SVG 執行原本的 Flash 功能。SVG 套件功能強大，可以在網頁環境下，輕易完成過往透過 Flash 技術才可達到的各種呈現效果，而其 API 應用介面，尚可讓使用者對 SVG 進行操控，以動畫模式增加互動性，如此即可輔助現存的 Adobe Edge 工具與服務的發展。另外，Snapvsg 是以 Apache-2.0 的開源方式向外授權，這樣寬鬆的授權態度與先前版本已有很大的差異，而因為 Apache-2.0 授權的特性，未來 Snapsvg 將可經改作之後，完整被適用於 Internet Explorer、Opera、Safari、Chrome，以及 Firefox 這些性質殊異的瀏覽器環境下。此外，該資料庫尚可與 Adobe Edge Animate、Adobe Flash Pro CC、Adobe Illustrator CC，以及 Adobe Photoshop CC 等 Adobe 推出的其他商業販售軟體，直接在編輯格式與播放效果上相容。

Adobe 網路平台工程部門的 Vince Hardy 表示：Snapsvg 資料庫的建置目標，是要解決開發者與設計師不斷求新求變的需求，以協助開發成果能透過瀏覽器感動所有的網路服務使用者與視聽者。到目前為止，除了 Snapsvg 資料庫之外，Adobe 官方所參與的自由開放源碼計畫，還有 Web GL、Blink and WebKit、CSS Filter Effects、CSS Shapes，以及新的開放源碼 CSS 資料庫等等專案，可以說，我們正在目睹一個開放源碼主導未來資訊生活的新世代，這個趨勢，正在持續發展。


參考網址：

1、Adobe 啟動 SVG 開放源碼資料庫
http://www.theinquirer.net/inquirer/news/2302907/adobe-announces-an-open-source-svg-library

2、Adobe 在 GitHub 上釋出 Snap.svg 開放源碼專案 
http://www.adobe.com/aboutadobe/pressroom/pressreleases/201310/102313AdobeReleasesSnapsvg.html

3、Snap.svg 專案首頁
http://snapsvg.io/
______________________________________________________________

■ [源碼新聞] 自由開放源碼軟體幫助編撰盲友的點字樂譜！

黃郁文／編譯

長久以來全球的盲人愛樂者，一直有無法得到足夠的點字樂譜來學習音樂的困擾，有些盲胞甚至因為相關資源的取得困難，被迫放棄自己的音樂夢想。幸好，最近在自由開放源碼軟體的幫助下，盲胞朋友們，終於有機會能夠脫離無樂譜可用的困境，而能享用與一般明眼朋友，相近數量的音樂資源！

盲人愛樂者的音樂學習資源一直處於嚴重欠缺的狀態，比較上來說，對明眼音樂人來說，可輕而易舉取得 800,000 多份樂譜來練習，但在盲人世界裡，卻僅約有 20,000 份點字樂譜可以利用。雖然有像是 MuseScore (http://musescore.com/) 這樣一個供大眾創造、分享樂譜的網站，該網站一直以來也都是採用像是 MusicXML (http://www.musicxml.com/for-developers/ ) 這樣的開放標準來做分享，然而光靠此一類型的個別網站，並無法從根本處解決盲胞點字樂譜不足的問題，另外，即便有像是 Freedots (http://delysid.org/freedots.html) 與 music21 (http://web.mit.edu/music21/doc/about/what.html) 這樣利用開放源碼工具建置的線上圖書館，嘗試要將 MusicXML 轉化成點字，以讓盲胞在特殊裝置的協助下，仍可閱讀樂譜以學習音樂，不過目前這兩家線上圖書館都還在起步階段，離建置完成仍有一段路途要走。凡此種種皆是促成 Open Well-Tempered Clavier project 發起的緣由。

Open Well-Tempered Clavier project，是一個籌募基金以為盲胞朋友編撰點字樂譜的計畫，其最初目標是希望能夠透過自由開放源碼的軟體工具，利用像是 MuseScore 這樣的網站，來持續開發開放源碼的音樂，之後
Open Well-Tempered Clavier project 決定擴大其預設目標範圍，利用 Kickstarter 集資網站，聚結眾人的力量以完成更多任務，也就是說如果專案能募集到足夠的經費，則該專案不僅會完成原本所預定的創作目標，一份屬於公眾領域 (Public Domain) 的巴哈 Well-Tempered Clavier 數位化樂譜，還會另外完成供盲胞朋友亦可使用的點字版本，在完成上述的目標之後，接續亦將在 2012 年釋出的巴哈 Bach's Goldberg Variations，再另外推出點字版本。Open Well-Tempered Clavier project 的最終目標，就是希望能夠在免費提供的基礎下，完成 MuseScore 與 MusicXML 樂譜轉換成點字版本的網路服務，如此一來，將會有超過 50,000 份現儲放於 MuseScore.com 的樂譜，能供全球的盲人愛樂者下載利用。

在目前僅有不到 20,000 樂譜可供盲胞使用的窘況下，50,000 多份的可用樂譜，將會是一個能改變局面的生力軍，其可為盲人愛樂者創造更豐富的的音樂學習環境，而藉由相關自由開放源碼工具的釋出與協助，將能更為降低數位樂譜轉換上的難度，透過這些環結的合作，我們將能夠期待未來會有更多的點字樂譜釋出，以造福全球的盲人愛樂者。


參考網址：

1、開放源碼軟體造福盲胞
http://opensource.com/life/13/10/kickstarting-open-source-music

2、Open Well-Tempered Clavier - Bach to Bach
http://www.kickstarter.com/projects/293573191/open-well-tempered-clavier-bah-to-bach

3、數位點字樂譜 盲人快樂摸旋律
http://www.libertytimes.com.tw/2012/new/aug/29/today-south11.htm
______________________________________________________________

■ [源碼新聞] 2013 開放資料工作坊 (2013.11.08-09)

台灣創用 CC 計畫／文

◎ 本文原載台灣創用 CC 計畫，原文章連結：http://creativecommons.tw/blog/20131025。

日 期：2013.11.08（五）- 2013.11.09（六）
地 點：中央研究院 人文社會科學館 第 1、2 會議室
議程內容：http://odw.tw
報名費用：免費。
報名網址：https://registrano.com/events/odw-sotm-2013（10/28 9：00 開始搶票！）
聯繫信箱： info@odw.tw

(http://www.openfoundry.org/images/131029/opendata/01.jpg)

「開放資料」 (Open Data) 是近來眾人關注的議題。研究機構、政府部門、以及民間團體無不希望經由資料的開放使用，以彰顯並發展資料的價值，進而鼓勵協力合作與創新應用。資料的釋出與使用，涉及許多議題，本工作坊將提供一個場合，期望讓各自在民間、政府、學界進行資料開放工作的眾人，能有一個對話與討論的空間。

這次工作坊有些不太一樣的設計。

主軸是「實務與技術」，除了開放資料的原則與政策性討論，我們更希望與會者能在實務與技術面向，包括資料的發布流程、再次使用、協力處理、以及視覺化與相互連接等問題上，進行討論與分享經驗，包括彼此遭遇的困難與限制。此次工作坊安排有專題演講與報告，但主要的議程場次以座談或是講習的形式進行，將預留較多的討論時間，以方便與會者有機會互相交流。

這次工作坊的共同籌辦單位為中央研究院（資訊科技創新研究中心、資訊科學研究所、人文社會科學研究中心地理資訊科學專題研究中心）、行政院研究發展考核委員會、財團法人青平台基金會、以及開放街圖台灣社群。
______________________________________________________________

■ [源碼新聞] 2013 年十一月份社群活動列表

作者是 OSSF電子報團隊／整理

十一份的活動列表出爐囉！有興趣的朋友們請多多邀請您的朋友一同前往參與！另外，由於活動列表出來的時間比較早，若後續有活動希望也能一起做宣傳的朋友們，記得來信告訴我們喔！信箱： ossfepaper@openfoundry.org 。

MozTW Lab @ TP（每週五，11/1、11/8、11/15、11/22、11/29）
＊地點：台北市中山區民生東路二段 114 號（咖啡．銅號）
＊時間：19:00~23:00
＊活動資訊：https://groups.google.com/group/moztw-general

台中自由軟體愛好者固定聚會（雙週一，11/4、11/18）
＊地點：台中市中港路二段 60-3 號（默契咖啡）
＊時間：19:00~21:00
＊活動資訊：https://groups.google.com/forum/#!forum/taichung-foss-fans-meeting

TOSSUG BoF（每週二，11/5、11/12、11/19、11/26）
＊地點：台北市中正區南昌路二段 200 號（Mix Coffee & Tea）
＊時間：18:00~21:00
＊活動資訊：http://www.tossug.org/

MozTW Lab @ 基隆（每週三，11/6、11/13、11/20、11/27）
＊地點：基隆市仁愛區港西街 4 號 1 樓（1915 海洋咖啡館）
＊時間：19:00~21:00
＊活動資訊：https://groups.google.com/group/moztw-general

KSDG 高雄開發者社群 (Kaohsiung Software Developer Group) meetup（11/7）
＊地點: 高雄軟體園區 B 棟 708 室（高雄市前鎮區復興四路 2 號 7 樓之 5）
＊時間: 19:00~21:00
＊社群網址: https://www.facebook.com/groups/KSDGroup

Hacking Thursday（每週四，11/7、11/14、11/21、10/28）
＊地點：台北市重慶南路一段 1 號 2 樓（MarketPlace）
＊時間：19:30~22:30
＊活動資訊：http://www.hackingthursday.org/

Taipei Wikipedia Monthly Meetup: Writing Day 維基台北定期聚—假日寫作月聚（11/9）
＊地點：台北市松山區南京東路二段一號 （伯朗咖啡 南京二店二樓）
＊時間：14:00~16:00
＊活動資訊：https://zh.wikipedia.org/wiki/Wikipedia:WPTP-W

2013 年開放資料工作坊／台灣開放街圖研討會（11/9）
＊地點: 中央研究院 人文社會科學館三樓（臺北市南港區研究院路二段128號）
＊活動資訊: https://registrano.com/events/odw-sotm-2013

Taiwan MiniDebconf 2013（11/9~11/11）
＊地點: 新北市烏來區烏來里西羅岸路 132 號
＊活動資訊: https://wiki.debian.org/DebianTaiwan/MiniDebConf2013

Taipei Wikipedian Weekly Meetup: Community Operation 維基台北定期聚 — 社群經營工作雙週聚（雙週一，11/12、11/26）
＊地點：台北市松山區民生東路三段 140 巷 11 號
＊時間：19:00~21:00
＊活動資訊：http://zhwp.org/zh-tw/WP:WPTP-S

Cocoaheads - Kaohsiung（11/14）
＊地點：高雄軟體園區 B 棟 708 室（高雄市前鎮區復興四路 2 號 7 樓之 5）
＊時間：19:00~21:00
＊社群網址：https://www.facebook.com/groups/cocoaheads.kaohsiung/

KSDG web course（11/16）
＊地點：高雄軟體園區 B 棟 708 室（高雄市前鎮區復興四路 2 號 7 樓之 5）
＊社群網址：https://www.facebook.com/groups/KSDGroup

SITCON workshop@NTUST Titanium mobile進化攻防戰 ­Alloy MVC（11/16）
＊地點：國立台灣科技大學研揚TR214
＊社群網址：https://registrano.com/events/4928df
______________________________________________________________

□ 關於本報 □__________________________________________________

◎ 主編︰洪華超
◎ 法律專欄編輯︰葛冬梅
◎ 技術編輯︰曾義峰
◎ 執行編輯︰王怡凱、陳蕙蓁
◎ 外稿編譯︰林誠夏、黃郁文、謝良奇

本電子報自行採訪、報導、編譯、撰寫文章之智慧財產權屬於中央研究院，採用創用CC「姓名標示－禁止改作－非商業性」授權條款臺灣 3.0 版授權散布，歡迎在不變更內容的前提下，以任何形式重製與散布本報，但必須遵守下列義務︰(1) 不得為商業目的之利用；(2) 必須標明本電子報智慧財產權屬於中央研究院；(3) 完整引用本著作權說明。

若欲以創用CC「姓名標示－禁止改作－非商業性」授權條款臺灣 3.0 版以外的方式利用上述文章，請與自由軟體鑄造場編輯群(ossfepaper at openfoundry.org) 聯絡。

非自由軟體鑄造場自行撰寫的單篇文章，其智慧財產權利屬於原作者所有，其以非專屬的方式授權予自由軟體鑄造場運用，而與本電子報其他文章併以創用 CC「姓名標示－禁止改作－非商業性」授權條款臺灣 3.0 版的方式進行散布。

若欲以創用CC「姓名標示－禁止改作－非商業性」授權條款臺灣 3.0 版以外的方式利用個別作者的文章，請自行與該作者聯繫，或透過自由軟體鑄造場編輯群 (ossfepaper at openfoundry.org) 來轉發聯絡訊息。

授權條款全文請見︰
http://creativecommons.org/licenses/by-sa/3.0/tw/legalcode
授權條款簡介請見︰
http://creativecommons.org/licenses/by-sa/3.0/tw/deed.zh_TW

若欲訂閱本電子報，請至以下網址︰
http://www.openfoundry.org/tw/news

如欲取消訂閱這份電子報，可透過自由軟體鑄造場新聞首頁左上方之自動退訂機制︰
http://www.openfoundry.org/tw/news

或寄發電子郵件至︰ossfepaper@openfoundry.org，以進行人工退訂。