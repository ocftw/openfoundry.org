________________________________________________________________

□■□ 自由軟體鑄造場電子報第 213 期 | 2013/02/26 □■□
________________________________________________________________

◎ 本期主題︰簡論「轉授權／再授權」於公眾授權領域的效力與應用方式
◎ 訂閱網址︰http://www.openfoundry.org/tw/news/
◎ 下次發報時間︰2013/03/12

□ 本期標題 □__________________________________________________

■ [法律專欄] 簡論「轉授權／再授權」於公眾授權領域的效力與應用方式

﻿■ [源碼專案] GK~將 HTML 標籤升級成為 Web 元件

﻿■ [自由專欄] 開放源碼基金會的下一階段 

■ [自由專欄] Hurd 究竟出了什麼事？GNU OS 背後的故事

■ [自由專欄] WebConf Taiwan 2013 心得與簡報

﻿■ [源碼新聞] Chrome 與 Firefox 展示不需插件的視訊通話

■ [源碼新聞] OpenStreetMap 有了新的地圖編輯器

■ [源碼新聞] Facebook 貢獻主機板設計架構予開放硬體推動團隊

■ [源碼新聞] 跨國跨校合作的開放近用期刊平台 Episciences 近期上路！

■ [源碼新聞] 2013 年三月份社群活動列表
______________________________________________________________


□ 本期內容 □__________________________________________________

■ [法律專欄] 簡論「轉授權／再授權」於公眾授權領域的效力與應用方式

林誠夏／文

「轉授權 (sublicense)」是一個在自由開源軟體授權等公眾授權領域，常被運用到的授權機制。然而、它在著作權法與相關的智慧財產權領域裡，卻是被定義為「例外」機制，這樣的配置，導致許多應用者對 sublicense 並不熟悉，而未能精準掌握其中的概念與運作方式。而一般文獻裡多將 sublicense 中譯為「再授權（再次授權）」，此一譯法亦已為我國著作權法所選用，但文義上也常讓許多人誤認 sublicense 等同於「re-license（重新授權）」，其實，前者 sublicense 是一個法律詞彙與機制，代表「前一段法律關係裡的被授權人，轉以授權人的地位，以其本人的名義將其所得到的權利，再轉而授權出去給其後的後手被授權人。」而後者 re-license 則是一個較為口語的詞彙，代表「某個權利客體（例如軟體專案）之前已經被權利人以某種方式授權釋出，之後同一個權利人轉以改變被授權對象，或是改變授權方式的作法，重新授權給同一個使用者或是其他的使用者。」所以較精準的來說，sublicense 可以被翻為「轉授權」、「副授權」或是「次級授權」，會較貼近原來的定義範圍，並免除文義上的誤會與爭議。

http://www.openfoundry.org/images/130226/ksitgplw-01.png
▲ 圖1：Google Android Open Source Project 一般個人版本貢獻協議書

【sublicense 改以轉者名義為之、係屬一種附屬與次級的授權狀態】

sublicense 這個機制在公眾授權的領域發揮了很大的作用，因為它是一個能夠「切割前後段法律授權關係」的機制。一般來說，sublicense 有兩個重點：

＊讓該權利的被授權人，能再次轉以授權人的立場，將本身自他處取得的權利，改以本人的名義轉授權出去；所以這是一種「轉手授權」的關係，也因此，

＊sublicense 的範圍不得超過原被授權人得到的授權範圍，因為 sublicense 相對於原始權利人的地位，是一種「附屬性、次級性」的授權，故轉授權人能夠授與後手的授權範圍，亦不得逾越原始權利人提供給他的範圍。

而其實，sublicense 在各國的智慧財產權體制下，被定義為具「明示」方可「例外」主張的授權機制。例如我國於著作權法第 37 條第 3 項的地方規定：「非專屬授權之被授權人非經著作財產權人同意，不得將其被授與之權利再授權第三人利用。」所以說，如果授權文件裡，並沒有明白引述該授權關係日後是容許「轉授權」或是「再授權」的，則該權利的授權狀態推定是不得容許被改以 sublicense 的方式進行後續運用。然而，在自由開源軟體授權等公眾授權領域裡，因為某些作品在一開始的規劃上，就是希望能夠加入眾人共工的力量來共同撰寫，而該專案的衍生改作關係經過許多人的參與之後，在授權鏈上的關係勢必非常可觀，甚至從原始的權利人算到最後一個使用者，可能要經過上百上千段的授權傳承關係，故為數不少的自由開源軟體授權條款，便透過授權條款的預先規劃，明定程式的修改者或散布者，必要時得以引據 sublicense 的機制，將其經手過的程式碼改以自己的名義進行釋出，如此一來，如果程式的改作結果不盡良好，則此一改作狀態在名譽與授權關係上，便不需要前手的原始創作人與其他改作人來負責；二來是透過 sublicense 機制，來切割作品前後段的授權關係，以有效的降低授權鏈上的當事人數量，因為依多數見解，自由開源軟體專案在多人參與之後，會被視為著作權法上的共同著作或是結合著作（註一），而若形成這樣的著作，雖然在權利上的訴求或回復，可以由個別的貢獻者單獨為之，但若是要就作品進行整體處份行為，如變更後續的授權與散布方式（註二），那就仍然必須回歸到法律基本面，經由共同著作或組合著作全數或絕對多數權利人同意後方可為之。所以某些自由開源軟體專案在建置之初，預想到這樣的問題，便預先選定了讓後手使用者得以自行啟動 sublicense 機制的條款，以在日後得以直接依條款規劃的機制處理上述問題。

【sublicense 於自由開源軟體領域的應用方式與差異】

右列幾款常見的自由開源授權條款，如：Apache-2.0、MIT、CPL-1.0、EPL-1.0、CDDL-1.0，以及 MPL-2.0（散布可執行檔格式時，註三），均有著明確容許 sublicense 的文字。所以如果使用者參與開發的是以這些授權方式進行共工的專案，授權規劃上，便可以在改作或是再行散布時，適當標註前專案與後專案之間的歷史關係，以及原創作人與創作團隊的顯名聲明之後，將後續專案轉以自己的名義向外授權。舉例來說，如果原來的自由開源軟體「AAA PROJECT」，是由「MR. A」所開發，並以前述所說的 Apache-2.0、MIT、CPL-1.0、EPL-1.0、CDDL-1.0，以及 MPL-2.0 來向外授權的話，那麼該專案經「MR. B」改寫或是與其他元件結合運用後，便有機會被以 sublicense 的方式來標示與應用，例如在改作為「BBB PROJECT」之後，在授權聲明權利標示的部份，可以用下列的方式來呈現：

2013 (c) BBB PROJECT, redistributed by MR. B under EPL-1.0, Some files of BBB PROJECT are derived from AAA PROJECT developed by MR. A on SourceForge under EPL-1.0 (http://sourceforge.net/AAA/).

上述的權利標示表示：BBB PROJECT 是由 MR. B 所改作與開發，其專案衍生自於 SourceForge 上由 MR. A 以 EPL-1.0 方式釋出的 AAA PROJECT，現單獨以 MR. B 的名義向外釋出，由於 EPL-1.0 就專案本身的程式碼設有 COPYLEFT 向後拘束的機制，故此時作品經改作或再散布之後，雖然得以 Mr. B 本身的姓名向後授權，但仍然必須承繼 EPL-1.0 的授權方式。

而以下的例示：

2013 (c) BBB PROJECT, redistributed by MR. B under {TTT PROPRIETARY LICENSE}, Some files of BBB PROJECT are derived from AAA PROJECT developed by MR. A on SourceForge under Apache-2.0 (http://sourceforge.net/AAA/).

上述的權利標示表示：BBB PROJECT 是由 MR. B 所改作與開發，其專案衍生自於 SourceForge 上由 MR. A 以 Apache-2.0 方式釋出的 AAA PROJECT，現單獨以 MR. B 的姓名，將 BBB PROJECT 整體改以 TTT PROPRIETARY LICENSE 的方式進行運用，由於 Apache-2.0 就專案的程式碼並未設有 COPYLEFT 向後拘束的機制，其允許作品經改作或散布之後，能以包含 Apache-2.0 各項義務性條款的個別授權方式來向後授權，故此時 MR. B 得以本身的姓名，將 BBB PROJECT 改以融合 Apache-2.0 授權規範的 TTT PROPRIETARY LICENSE 進行運用。

行文至此，也許很多讀者已經發現，一般被認為授權義務性要求最低，與 MIT License 幾近等價的 BSD-3-Clause，並不在上述明示允許 sublicense 的條款之列；而使用率與知名度皆非常高，被 Linux Kernel 採納為其授權條款的 GPL-2.0，也不在這份清單裡面，所以這兩個狀況，都必須被進一步解釋與披露，才能讓讀者對於自由開源軟體領域裡 sublicense 機制的應用，有一個基礎但全面的認識。首先說明 BSD-3-Clause 的狀況，多數的論者認為解釋上從條款目的性的觀點來看，BSD-3-Clause 應該是能容許 sublicense 機制的，然而文義上，BSD-3-Clause 的條款內容就是沒有明示將 sublicense 這個關鍵字詞點出來，故實務上適用 BSD-3-Clause 而補充說明容許 sublicense 的專案，與適用 BSD-3-Clause 但自我表明不可被 sublicense 的專案皆有之，故從嚴縝的立場來看，若是對於特定 BSD-3-Clause 授權專案有 sublicense 應用的需求時，最保險與尊重權利人的方式，還是應該先行洽詢其原始權利人，探詢權利人的解讀態度之後，再行進行 sublicense 機制的應用。

【GNU 系列條款改採其他方式來處理授權鏈日益龐大的可能性】

GNU 系列授權條款如 GPL-2.0、GPL-3.0、LGPL-2.1、LGPL-3.0、AGPL-3.0，在程式著作權方面，多數的看法是不允許 sublicense 機制的運作的，這是因為 GNU 系列條款在設計上，本就帶有較強「軟體自由 (Software Freedom)」理念於其中，故從授權拘束的立場上來看，其設計機制會讓專案的原始權利人與開發者，在必要時仍然能以身為權利人的身份，來介入並導正後續程式碼經改作與散布後，可能衍生的各種不正當利用行為，所以 GNU 系列的條款，並不允許程式經改作或是再散布之後，可以採用 sublicense 機制來切割前後段的授權關係。而相應於此，這類條款也發展出其他非 sublicense 的配套機制，來處理專案經眾人參與之後授權鏈規模日益龐大的狀況。以 GPL-3.0 為例，主要有下列二項的配套機制：

＊設置「授權循環機制 (license relay mechanism)」，所謂授權循環機制，指的是當該 GPL-3.0 授權程式的前手散布者，因為違約侵權使用程式而罹於失權之時，此一前手的失權狀態將不會影響到善意從其手上得到 GPL-3.0 程式碼的後手使用者 (Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License.)，此一機制預先被寫在 GPL-3.0 的條款內容裡，以確保不會因為個別使用者的違約與侵權，就造成 GPL-3.0 授權鏈結關係的瓦解，也就是說，透過此種授權循環機制，即使該軟體專案的授權鏈與相關的當事人數日益增多，專案的授權妥適性還是得以在穩定的狀態下繼續發展。

＊新增「條款改版代理機制 (license upgradation proxy)」，GPL-3.0 指出權利人如預先指定條款改版的代理機構，那麼嗣後如果自由軟體基金會推出更新版本的 GPL 授權條款之後，該代理機構就可以代原權利人，宣布是否採納此一新版條款，做為程式日後釋出選用條款的選項之一。(If the Program specifies that a proxy can decide which future versions of the GNU General Public License can be used, that proxy's public statement of acceptance of a version permanently authorizes you to choose that version for the Program.)一般來說，若條款容許 sublicense 機制，那麼自由開源軟體程式的改作者與散布者，原則上便有權能可以自行為該軟體程式，進行更新版本授權條款的升級，這是因為多數的自由開源軟體授權條款，預定的規則多是如其他授權方式包含有前一條款所有授權義務性的規定，則 sublicense 的過程中便可為此程式選擇相容但與原先不完全相同的授權條款來續行散布，但因為 GNU 系列條款並不容納此種 sublicense 機制，故其便新設此一「條款改版代理機制」，來處理授權條款日後可能需要以簡單方式被更新的需求。

所以舉例來說，如果原來的自由開源軟體「AAA PROJECT」，是由「MR. A」所開發，並以不允許 sublicense 機制的 GNU 系列授權條款來向外授權的話，那麼該專案經「MR. B」改寫產生衍生作品「BBB PROJECT」之後，在授權聲明權利標示的部份，可以用下列的方式來呈現：

2013 (c) BBB PROJECT, redistributed by MR. B  and MR. A under GPL-3.0, the previous version of BBB PROJECT is AAA PROJECT on SourceForge under GPL-3.0 (http://sourceforge.net/AAA/).

上述的權利標示表示：BBB PROJECT 是由 MR. B 所改作與開發，其專案衍生自於 SourceForge 上以 GPL-3.0 方式釋出的 AAA PROJECT，而因為 GPL-3.0 授權條款在著作權的部份並不容許 sublicense 機制（註四），故在著作權聲明方面必須同時列出專案的改作者 MR. B，以及原作者 MR. A 的姓名，以表彰 BBB PROJECT 為結合 MR. B 與 Mr. A 心力的共同或組合著作，並讓 BBB PROJECT 整體承繼 AAA PROJECT 的授權條款，以 GPL-3.0 的授權方式接續向外釋出。

【活用 sublicense 機制將可對自由開源軟體專案發展布局產生重大影響】

sublicense 在授權領域是一個效果很深與影響範圍很廣的應用機制，然而，因為其於智慧財產權領域向來被視為例外機制，以致常常不能被適當的了解。其實，當代的公眾授權領域，已經是大量的運用此種 sublicense 的機制，以調整多人共工專案，在精簡授權升級機制，以及降低授權鏈當事人數量方面的需求，如此一來，不至於因為權利人眾多，而讓專案的成果在專案規模變大或情事變遷之後，陷於不能被深入與靈活運用的狀況。舉當前在全球資通訊領域的指標公司 Google 為例，其於 Android Open Source Project 的程式碼吸納策略上，就靈活採納了 sublicense 的應用機制，Android Open Source Project 在商業公司與一般個人版本的貢獻協議書裡（註五），皆明定：1、貢獻者必須以能夠容認 sublicense 的方式將程式碼提供給 Google；2、此一程式碼的貢獻與授權行為不得嗣後撤回！將「容認 sublicense」以及「不得撤回」這二點綜合以觀，應用上這樣的授權協議已幾近與「空白授權」條款無異了，因為這些程式碼日後在使用上，Google 具有以自身名義，自主性更改授權模式與應用方式的地位。然而，也並不是說採納 sublicense 機制，便是一個推動多人共工專案發展的最佳模式，因為從自由開源專案近三十年的發展歷史可以觀察到，一個成功共工專案的建立，除了有賴於授權條款建立共同與共通的合作規則，更重要的是，如何得到主要參與者的信任與信賴，部份採用 GNU 系列條款建置的自由開源專案，雖然在著作權利的部份並不容許 sublicense 機制，然而正因為如此，反而得到理念性參與者的青睞與認同，因為其運轉的授權模式，不論專案嗣後如何被改作與散布，主導者仍然必須在 COPYLEFT 的授權拘束下，以參與者共同同意與接受的授權規則來運用這些程式碼。所以中道的說，在公眾授權專案的開發與營運上，容許 sublicense 有容許的好與壞，不容許 sublicense 也有不容許的優點與缺點，主要仍然取決於該專案的開發特性與參與者的共同期望，但不論選用 sublicense 機制與否，此機制在專案設置之初一經選定，未來將對於專案的發展與布局產生重大影響，故筆者透過此篇專文的機會，針對 sublicense 的定義與應用，做了一個較詳實的補充與說明，以讓對此議題有興趣的朋友，可以在此基礎上發掘出更多更活潑的應用實例！

----

註一：「共同著作」的定義可以參考我國著作權法第 8 條規定，指的是：「二人以上共同完成之著作，其各人之創作，不能分離利用者，為共同著作。」而「組合著作」在我國的著作權法並沒有專文規定，但依他國法律與一般的解釋，例如德國著作權法第 9 條項下，指的是該作品由二人以上個別的作品所組成，這些作品之間彼此具有時期前後的差異，但在功能架構上的運作與分工亦十分緊密，故理解上結合程度為介於「共同著作」與「編輯著作」之間的組合作品。

註二：關於自由開源軟體專案如未預設 sublicense 機制，日後在授權轉換須經的流程與作法，可參閱，葛冬梅，淺談自由開源軟體透過線上軟體市集散布之問題：http://www.openfoundry.org/tw/legal-column-list/8860-foss-distributed-through-online-app-market；以及，黃郁文編譯新聞，將 VLC 以 LGPL-2.1+ 進行授權轉換－備感艱辛的一段路：http://www.openfoundry.org/tw/foss-news/8862--vlc-lgpl-21-。

註三：修改或散布 MPL-2.0 授權專案，在程式源碼格式時必須承繼 MPL-2.0 的授權方式，或是引據其「備位條款 (Secondary License)」的規定，將程式源碼改以 GNU 類別的條款向後授權；然而、若是散布的專案是以目的碼、可執行檔的格式散布，則可以在符合 MPL-2.0 各項義務性規則的條件下，以 sublicense 的方式來進行散布。

註四：GPL-3.0 在著作權的部份並不容許 sublicense 機制，然而其增設的軟體專利授權部份，明示指出經專利權人自主寫入 GPL-3.0 程式的技術方法，必須以允許 sublicense 的方式為之。此一設計的主因，在於 GPL-3.0 對於軟體專利是以「雖肯認但抑壓其對 GPL-3.0 預設授權模式影響」的態度來處理，所以透過授權條款要求專利權人，必須以容許 sublicense 的方式，將程式碼相關的軟體專利權一併授權出來。然而，專利權在司法行政體制的運作規則，並不完全等同於著作權，其必須經過向國家權責機構的申請與審核流程之後，才會得到一紙書面核可的專利證書，故專利權方面如何運作公眾授權模式的 sublicense，當前還未有實例可循，非常值得考究與玩味。

註五：Android Open Source Project 的程式碼貢獻協議書，商業公司貢獻版本的連結如右所示：http://source.android.com/source/cla-corporate.html，一般個人貢獻版本的連結如右所示：http://source.android.com/source/cla-individual.html。
_______________________________________________________________

﻿■ [源碼專案] GK~ 將 HTML 標籤升級成為 Web 元件

Marty／文

GK 是一個 JQueryPlugin (~4Kb)，可以將自訂的 HTML 標籤包成一個 Web 元件，降低 Web 開發複雜度，讓 Web 開發更便利。透過下面範例，來了解 GK 如何將 HTML 標籤升級為 Web 元件吧！

HTML 畫面範例
(http://www.openfoundry.org/images/130129/GK/01.jpg)

HTML 語法
(http://www.openfoundry.org/images/130129/GK/02.jpg)

GK 提供三個功能將自訂的 HTML 標籤包成 Web 元件，分別是自訂標籤、事件綁訂、資料處理。接下來介紹如何透過 GK 完成將上面 HTML 語法包成 Web 元件。


一、自訂標籤解譯

GK 的自訂標籤功能，用來封裝 HTML 語法，用自訂標籤來顯示，達到簡化使用的目的。下圖是改成 GK 自訂標籤的 HTML 寫法，是不是簡潔多了?
(http://www.openfoundry.org/images/130129/GK/03.jpg)

這是怎麼做的?

首先 GK 會經由使用者自訂的標籤庫，找到 board 標籤模板，然後取出＜gk:view＞...＜/gk:view＞區塊中的 HTML，並置換 ${title} , ${content} 字串，然後交由瀏覽器進行顯示。在這例子中，${title} 會置換為 News，${content} 則是自訂標籤 board 的 innerHTML 字串。
(http://www.openfoundry.org/images/130129/GK/04.jpg)

原來 GK 就是模板引擎?

不，GK 的使用訴求是，當開發 Web 應用越來越複雜，將有必要進行封裝成為 Web 元件。封裝實做細節，讓開發應用人員能更專注在應用上。並且元件化後，擴充性及重複使用性都可以提高。 所以 GK 並不是模板引擎，GK 的功能是自訂標籤、事件綁訂、資料處理等三種功能，可將 HTML 標籤升級為 Web 元件。目前上面這個例子，是先展示自訂標籤解譯的功能。


二、事件綁定

GK 的自訂標籤解譯，可以簡化撰寫 HTML 語法。接下來，經由事件綁定機制，自訂標籤就可以處理事件。例如有個功能，點選 Item1~3 項目時，觸發 onclick 事件進行 alert 顯示。要完成此功能，改法是修改 board 標籤模板，在第 14 行加入了 ${id} 和 ${onclick}，${id} 是 html 傳入的 id，用來控制元件，data-gk-click 就是告訴 GK 要將此元素進行 click 事件綁定。

接下來，在＜gk:component＞區段，撰寫 Web 元件被觸發時要做的處理，在這只是先簡單的 alert 出目前點選的文字
(http://www.openfoundry.org/images/130129/GK/05.jpg)

修改完模板存檔後，重新更新 [F5] 頁面，點選 Item 就會進行 alert。
(http://www.openfoundry.org/images/130129/GK/06.jpg)

神奇嗎? 這是因為 GK 會幫忙完成自訂事件綁定，並交由 board 標籤模板中的＜gk:component＞＜/gk:component＞區段實現 onclick 邏輯，而在原本 HTML 語法上，完全不需要做任何的修改，還是原本的寫法。
(http://www.openfoundry.org/images/130129/GK/07.jpg)

下圖是說明自訂標籤如何透過標籤模板，再轉由 Browser 顯示的流程
(http://www.openfoundry.org/images/130129/GK/08.jpg)

這是怎麼做的?

Board 標籤模板可以看成很像是 Java 語言中的 Class，用來定義產生一個物件的屬性及功能。當撰寫 HTML 語法中包含自訂標籤時，就像是 new 了一個物件。GK 將會經由標籤模板產生一個元件實例，並 binding 到目前 HTML 語法中的自訂標籤元素。因此自訂 HTML 標籤就升級成 Web 元件了。

所以每個自訂標籤，都可以擁有各自的狀態，並且可以撰寫 Model 來處理應用邏輯，所以開發應用的人員，可以使用自訂標籤（也就是 Web 元件）來簡化開發，當隨著自訂標籤模板越來越多，開發就會越來越方便。

而在設計自訂標籤模板部分，考慮的是元件應該提供什麼功能，如何兼顧效能與擴充性，甚至例如現在很夯的 RWD (Responsive Design) (https://twitter.com/RWD) 。而使用自訂標籤的開發人員，考慮的則是如何滿足使用者的需求。

由於開發 Web 應用越來越複雜，GK 可以幫助元件化，清楚切割 View-Component-Model，如此一來就能簡化開發的複雜度。


三、資料處理

以上已經介紹自訂標籤、事件綁定的功能，最後設定介紹資料處理的功能，當透過 GK 包裝成為 Web 元件後，希望 Web 元件能使用在不同的案例中。達到提高生產力的目的。因此以目前這個範例看來，點選 Item 後要進行的處理，不適合寫在＜gk:component＞區段中，應該改用 gk Model 來處理應用邏輯。在這例子，我們撰寫處理邏輯，希望讓使用者 click Item 時，在 Item 上有顏色效果，如下圖
(http://www.openfoundry.org/images/130129/GK/09.jpg)

gk Model 的程式寫法很簡單，如下所示。在 HTML Body 裡面，第 16~20 行是進行顯示，而第 22~27 行就是 gk Model 的程式撰寫。Web 元件收到使用者事件後，會呼叫 gkModel 進行處理。我們要處理的是第 16 行這個 board 自訂標籤，id 為 bbs。所以透過 gk.model[‘bbs’] 告訴 GK 要處理 board 自訂標籤的相關動作。

在這例子中，當 Item 被點選時，第 23 行會被呼叫，gkModel 就可以直接針對被點選的 Item 元素進行處理，這裡做了換背景顏色的處理。
(http://www.openfoundry.org/images/130129/GK/10.jpg)

為什麼要這樣做?

View 和 Model 之所以很簡單，是由於 Web Component 封裝了相關的技術細節，要這樣做的原因，是希望藉由切割開發者角色成為兩種角色：開發應用、研發元件。這樣開發應用的開發者，就可以更專注在處理業務邏輯 (View-Model)，而不用學習急處理底層技術細節。而研發元件的人，可以專研技術，打造出更棒、更好用的元件 (WebComponent)，這樣的分工，或許才能應付 Web 應用越來越複雜的局面。
(http://www.openfoundry.org/images/130129/GK/11.jpg)

延伸閱讀：

＊GKMobile - 用GK框架結合 JQueryMobile 打造的 OpenSource (http://mobile.ezoui.com/mobile/bootstrap/index.html)
＊GKMobile @GitHub (https://github.com/ezoengine/GKMobile)
_______________________________________________________________

﻿■ [自由專欄] 開放源碼基金會的下一階段

謝良奇／編譯

有鑒於連部分小型開放源碼專案都有了自己的基金會，例如素描與繪圖程式 Krita。Glyn Moody 認為或許開放源碼基金會已逐漸成熟，他建議現在或許正是時候成立一個保護傘基金會，用來協助分享最佳實踐、法律咨詢和其他資訊與支援。

Linux 基金會、Apache 基金會、Eclipse 基金會、Mozilla 基金會等高知名度的開放源碼基金會，一下子出現在許多媒體版面，它們代表了某種轉變，以更為正式的結構來協助運作自由軟體專案，在以一家公司作為主要焦點的商業途徑外，提出不同的可能。所帶來的優點還包括降低啟動新專案與募集資金支持開發工作的門檻。

當像 Krita 這樣相對小型的專案也走向成立基金會時，這表示開放源碼基金會如今已逐漸成熟，不再是少數人的專利。像 "開放源碼基金會治理：誰握有權利？" (http://timreview.ca/article/636) 這類專門研究的出現可以證實上述說法。該研究試圖透過管理文件的分析，找出開放源碼基金會中誰握有權力。為了辨識出權力結構，該研究以人工神經網路分析 6 大開放源碼基金會(Apache、Eclipse、GNOME、Plone、Python、SPI) 的章程。

這些相對深奧的分析之所以可以進行的此一事實，顯示了開放源碼基金會已經成熟到有足夠共同之處，而被視為具備一致性。

如此一來就提出了一個有趣的可能性。如今我們有這麼多開放源碼基金會，或許值得考慮為所有基金會成立一個保護傘組織，或許叫做開源基金會基金會 (Open Source Foundation Foundation，OSFF)。問題來了，這個組織要做些什麼？

為了回答這個問題，看看現有的開放源碼基金會如何描述各自目標，會很有幫助。正如預期，多數基金會的主要目標是推廣自身專案與相關計劃，對於想像中的 OSFF，則可以歸納成推廣以開放源碼基金會作為支持開源活動的形式。在實際應用上，可以轉換為建立最佳實務，以及在不同司法管轄區的不同法律要求下，成立開放源碼基金會所需準備的資訊彙整。

對於 Krita 這樣較小型的專案，一旦決定建立基金會，便可運用該機構的知識。由於現有支援機制能協助他們安全通過法律要求，並最小化運用他人知識的成本，將鼓勵更多專案採取此一途徑。正由於分享已有解決方案，避免重新發明輪子，才讓開放源碼如此有效率地運作。

降低基金會成立門檻對開放源碼也是好事，因為 OSFF 成員越多，彼此間的連接也會更多，OSFF 會議將成為與其他開放源碼專案溝通非常有效的途徑。儘管這些溝通目前每天都以非正式方式在進行，一個更正式的環境或許有助更快速地解決問題。同樣的，這麼一來也有助推廣跨專案的合作。

更為緊密的合作可以讓開放源碼專案，在共同專注的重要議題上用同一個聲音發言。例如 SOPA 斷電日 (Blackout Day) 之所以能在去年 1 月 18 日成功上演，Mozilla 的參與是關鍵因素之一。想像如果 OSFF 加入其中的話，會是如何。

無論如何，成立 OSFF 主要的好處是更為一般性的，也就是透過擁有和私有軟體公司同等影響力的汎專案組織，提升開放源碼的能見度。當然我們已經有了開放源碼組織 (Open Source Initiative)，在某種程度上發揮了上述作用，但該組織是在整體上為開放源碼奮鬥，而 OSFF 則是現有基金會的正式代表，更緊密的關切他們特殊的需要。兩者是互補而非競爭關係。

過去 10 年內開放源碼基金會的興起，可說是各專案影響力不斷提升的明顯跡象。為這些基金會建立基金會，將是未來 10 年提升開放源碼到另一個層次的絕佳方式。


相關網址：

1. 開放源碼基金會的下一階段
http://www.h-online.com/open/features/Taking-open-source-foundations-to-the-next-level-1774395.html?page=2

2. 開放源碼基金會治理：誰握有權利？
http://timreview.ca/article/636
_______________________________________________________________

■ [自由專欄] Hurd 究竟出了什麼事？GNU OS 背後的故事

謝良奇／編譯

雖然 GNU 作業系統最初發想是在 1983 年，自由軟體基金會也早在 1987 年便首次宣布有意在 GNU 作業系統核心上採用 Mach 微核心，但是由卡內基梅隆大學 (Carnegie Mellon University，CMU) 開發的 Mach 微核心的程式碼，一直到 1991 年都未能以適當的授權加以釋出。Linus Torvalds 在那時開始著手為 IBM 386 撰寫 UNIX-like 核心的專案。

假如當時沒有出現 Linux 核心，該核心沒有採用 GPLv2 授權也沒有 GNU 作業系統各元件的協助，或者 Linux 沒有抓住那個契機以及開發者的想像力的話，Linux 周圍的動能很可能會轉向 Hurd，那麼一切都會不同。然而，Hurd 進度緩慢的原因，不只是 Linux 的崛起或 Mach 微核心的選擇而已。

Hurd 的設計是將自由軟體運動的精神與承諾，在程式碼中加以體現的一項嘗試。自由軟體運動是為了將用戶，從提供軟體者手上解放出來。Hurd 的微核心架構與服務 (daemons) 的結構能安穩地為用戶解放來自系統管理者的操控。無需特殊的權限，每個用戶都可以執行一系列服務，建構用戶想要的作業環境。

Richard Stallman 在 1983 年 9 月宣布撰寫完整 UNIX-like 作業系統的計劃，也就是知名的 GNU (GNU's Not Unix!)。從 1983 年到 Hurd 出現這期間，許多使該核心成為可能的工具、編輯器、編譯器、Bash、Make、Autoconf、Emacs、GCC、sed、gawk 等命令列工具陸續地被開發出來。

就在 Hurd 開始進行後不到幾個月，Linus Torvalds 在 on comp.os.minix 上公開了針對 386 (486) AT 機器的自由作業系統，該系統當時只是業餘作品，不像 GNU 那樣龐大且專業。Torvalds 之所以選擇單一核心，並非出自純粹主義，只不過是為了能更快產生可運作核心而已。

黑客、業餘愛好者、學術界人士之所以被 Linux 核心吸引而投入協助其開發，作為自由軟體、採用 GPLv2 授權，加上選擇大眾普遍擁有的硬體是主要原因。Linux 與其社群的成長速度快得驚人，並促成 GNU/ Linux。儘管 GNU Hurd 的開發仍持續，步調卻緩慢得多。

從使用者角度來看，Hurd 看來需要漫長的等待，Linux 開發者於是採用 Linux 填補 GNU 作業系統中心，本應該由 Hurd 佔據的空間。Stallman 對此一開始抱持懷疑。早期 Linux 僅能在 IBM 386 上執行，對此 Stallman 表示，我們聽說 Linux 並非完全可攜，而且採用和 UNIX 核心相同架構，相較之下我們的作品更加強大許多。

Linux 依賴 GCC 和 GNU 工具，其知名度隨眾多散佈套件出現而提高，自由軟體基金會開始將 Linux 視為 GNU 作業系統核心可接受的替代品。Hurd 的開發雖然持續進行，但顯然自由軟體基金會已經選擇了不同的方向。該微核心出現一系列需要克服的問題，有可能參與其中的人紛紛轉向具有可用性且成果豐碩的 Linux。Torvalds 在 Linux 上選擇單一核心，使得它更為輕易地成為可運作的自由作業系統。

Stallman 之後也承認，開發基於 Mach 的 GNU 核心的技術決定完全是他的責任，這個決定似乎延緩了開發工作。他認為使用 Mach 可以節省許多工作而加速開發，但他錯了。

Hurd 預計在 1994 年會首度問世，並計劃於 2001 年釋出，但這些承諾從未實現。從 1998 年起，Debian GNU/Hurd 成為 Debian 社群中的活躍專案，該社群提供安裝 CD 與 live CD，可被視為目前 Hurd 開發狀態的認可版本，雖然依舊並非官方 Debian 釋出。Hurd 未達生產品質，且在硬體支援上有著許多限制，儘管如此還是可以並且值得在虛擬環境中執行看看。

Richard Stallman 說過 GNU 核心一開始並不叫做 Hurd。它最初稱為 Alix，是以當時他的情人來命名，這個她曾指出自己的名字很符合 UNIX 系統版本的一般命名規則。所以她跟朋友開玩笑說，應該用她的名字為核心命名。Stallman 於是決定用 Alix 命名核心給她驚喜。

不過之後核心主要開發者 Michael (現在是 Thomas) Bushnell 較喜歡 Hurd 這個名字，Alix 被改以指稱核心中攔截系統呼叫，並發送訊息至 Hurd 伺服器加以處理的部分。

之後 Stallman 跟 Alix 分手，她也改了名字。恰巧的是，Hurd 設計也有所更動，C 程式庫會直接發送訊息至伺服器，這使得 Alix 元件消失在設計中。

Bushnell 選擇 Hurd 這個名字，部分因為 Hurd 念起來像 Herd，有一群 GNU 的意思，部分因為 Hurd 是 'Hird of Unix-Replacing Daemons' 的遞迴首字母縮寫，而 Hird 是 'Hurd of Interfaces Representing Depth' 的遞迴首字母縮寫。如 Bushnell 所說，這是第一套以成對相互遞迴首字母縮寫命名的軟體。

與 Linux 的單一核心不同，Hurd 使用微核心，許多功能從 kernel space 移至 userland。微核心位於硬體以及多數被認為是單一核心的功能之間。

Hurd 早期主要架構師之一的 Thomas Bushnell，在他於 1996 年撰寫的論文 'Towards a New Strategy of OS design' 中總結了此一理論。他寫道，GNU Hurd 的設計讓系統程式碼區域盡可能受限，程式只能與核心少數基本部分溝通，系統其餘部分可動態更換。

GNU 一開始發想時，顯而易見的解決方案是找一個已經在公眾領域的現成核心。Stallman 最初的選擇是在 MIT 開發的 TRIX。其他想法包括使用 Berkeley 的 Sprite 作業系統與 BSD 核心。

Bushnell 表示他第一個選擇是以 BSD 4.4-Lite 釋出製作核心，他了解其程式碼，知道如何進行。對他而言這很顯然會有好的結果，將改變今日所有的一切。Stallman 希望與來自 Berkeley 的人員共事。雖然有些人表示有興趣，但有部分人似乎故意在拖延時間，從現在看來，其原因似乎是他們打算創立 BSDI。以 4.4-Lite 為基礎的 GNU 將影響到 BSDI。
	
正如 Bushnell 所描述，Stallman 最後下了結論說，Mach 是一套可運作的核心，4.4-Lite 還不完整，我們就用 Mach 吧。


相關網址：

1. Hurd 究竟出了什麼事？該 GNU OS 背後的故事
http://www.linuxuser.co.uk/features/whatever-happened-to-the-hurd-the-story-of-the-gnu-os
_______________________________________________________________

■ [自由專欄] WebConf Taiwan 2013 心得與簡報

jaceju ／文

◎本文原載網站製作學習誌，原文章連結。 (http://www.jaceju.net/blog/archives/webconf-taiwan-2013/)

WebConf Taiwan 2013 (http://webconf.tw/) 是今年我所知道的第一個大型 Conference ，如果說只能用一個字表達這次 WebConf 的參加心得，那就是：讚！

在台灣已經有好幾個大型的 Conference ，但針對網站製作這個主軸來舉辦的可以說是非常罕見。而 WebConf 的議題不僅包含了 Web 開發、設計等專業領域，更有創業、團隊溝通等讓人值得省思的議題。許多朋友都表示，真的非常希望有分身術來聆聽每一場演講，就可以知道這些議題對於大家的吸引力有多高。

我也很榮幸地受邀演講，題目是「如何成為一個更好的 PHP 開發者」。

其實 PHP 這個主題並不是我一開始想說的，但龍哥認為我應該要幫國內 PHP 開發者打一劑強心針；因此我把原來想講的內容揉合了 PHP ，然後就是這次的內容了。以下是投影片連結。

可惜這次有些內容沒有時間講，所以我把這次的內容用文字的方式再次分享給大家。


如何成為一個更好的 PHP 開發者

我爸曾經是個水電師父，所以國中時代，我常跟著他跑工地幫忙。有時我們會用到混凝士來填補一些被我們施工過的水泥牆面，這種簡單的工作就落到我身上。其實當時年紀小，什麼也不懂，就有樣學樣地把水、沙和混凝土混在一起，然後就去補了。結果就是爛泥扶不上牆。

其實水、沙和混凝土的比例，會依照需求而有不同，像是地基用的水泥要摻入碎石子；要防水的話，得加入洋菜粉。除了水泥，我們有時也需要用到磚頭來做一些小工程。有經驗的師傅對磚頭的特性都非常瞭解，他們會用榔頭將磚塊敲出適合的大小，再將這些敲下來的磚頭填補到空隙中。我老是搞不定的水泥和磚頭，在這些師傅手上，乖得服服貼貼。

有個工匠師傅對我這麼說過：如果想蓋一道磚牆，而不瞭解水泥和磚頭的話，你只會蓋出一道越來越歪的牆。但多數客戶其實不在乎這些，他只要你蓋出堅固的房子。不過如果你沒有花心思在這些小細節上，即便你蓋出了外表漂亮的房子，但幾個月後就開始龜裂，不必地震來就自己倒了。


老闆的想法

水泥、磚頭，這些都是我們認為沒什麼的東西，但它們都要專業的知識與技術。可是在台灣，很多老闆一直認為專業是可以被取代的，今天這工作你不做，我還是可以找到別人來完成。他們常常強調自己縱橫商場的知識與經驗，但就是絕口不提員工們的技能需要專業經驗的累積。所以「微薪、技佳」就成了台灣員工最好的寫照。

而在軟體界，這種思維更是隨處可見。軟體業界通常需要很多 PHP 開發者，但 PHP 卻總是被當做沒什麼技術性的語言來看待。歸究原因， PHP 面臨了以下問題：

第一點：業界普遍認為 PHP 不需要什麼高門檻就可以上手，很多人認為只要學會對資料庫進行 CRUD 的操作，就懂 PHP 了；因此相較於其他語言的開發者， PHP 開發者的地位就顯得更低了。

第二點在於觀念的陳舊：我相信絕大部份的人對 PHP 的觀念還停留在 PHP 4 的時代，甚至認為 PHP 一定會跟 HTML 混在一起。另外坊間很多入門書籍，也都是把以前的內容加上新的 PHP 5 語法後繼續推出賣錢。新的觀念很少被提到，也造成了大家認為 PHP 就是這樣寫的錯誤認知。

第三點則是社群：社群原本就應該是多元化的，但 PHP 社群的問題在於大家都有自己的一套想法。當這些想法沒有被統整起來，而是每個人都用自己的實作來發佈時，那麼就很容易讓入門的人無所適從。

那 PHP 是不是真的不好呢？其實 PHP 確實有它的包袱存在，但那並不表示它沒有持續在進步。在學習 PHP 時，你可以先問自己幾個問題：

第一個問題：剛開始 PHP 並不是一個語言，它的目的是讓一些對程式不甚瞭解的網頁開發者，可以快速為自己的網頁加入互動功能。這是 PHP 的原罪，畢竟它一開始的目的就是如此。但是時至今日， PHP 已經漸漸朝向一個完整的語言前進了，許多軟體工程的知識都可以在 PHP 上面應用。

第二個問題：如果你寫了一陣子 PHP 之後，發現它不論在語法或是觀念上還是不適合自己，那就要趁早遠離它，因為這樣可以增加你學習其他語言的時間。但如果你已經投入心力在寫 PHP 或是已經在靠 PHP 吃飯，那麼就把它學得更專業些吧。

那麼要怎麼讓自己的 PHP 技能更專業呢？以下九式，將協助大家在 PHP 這門功夫上更上一層樓。


第一式：瞭解 PHP

身為一個 PHP 開發者，首先當然是要多瞭解 PHP 。而瞭解 PHP 則要從以下幾個方向著手：

瞭解新版本

多數 PHP 開發者不敢嘗試新版本，通常是因為他們害怕自己寫的程式碼在新的 PHP 版本會爆炸。就我個人的經驗來說，如果沒用太多奇技淫巧的話，其實版本的升級並不是太大的問題。大致上會有問題的部份在於 PHP 4 轉到 PHP 5 ，以及 PHP 5.2 轉到 PHP 5.3 這兩個部份。在官方手冊上就有版本轉移的指導供大家參考。

＊Migrating from PHP 4 to PHP 5.0.x (http://php.net/manual/en/migration5.php)
＊Migrating from PHP 5.2.x to PHP 5.3.x (http://php.net/manual/en/migration53.php)

瞭解運作環境

身為一個 PHP 開發者，對於 PHP 運作的環境一定要充份掌握。像是怎麼開啟 PHP 的錯誤通知， PHP Session 是存放在哪裡，或是 Web Server 是怎麼把瀏覽器的請求轉發給 PHP 執行，以及作業系統等等。越瞭解 PHP 的運作環境，將會對你找到程式的問題來源越有幫助。

瞭解執行模式

雖然 PHP 一開始是在 Web 上執行，但它也常在命令列模式中擔任 Shell Script 的角色。這兩種模式在執行上都有它的不同的地方，這些差異就會影響我們在開發程式上的思考方式。

瞭解語法

前面說過 PHP 原本並不是從語言的角度出發，所以它後來發展出了較為獨特的語言架構。

例如我們可以用 list 來交換兩個變數內容。

// 交換變數內容
list($a, $b) = array($b, $a);

如果是會回傳陣列的函式，也可以用 list 來直接取得指定位置的值。

// 直接取得指定位置的值
list( , $el) = getElements();

而在 PHP 5.4 之後，我們可以用方括號來直接取用元素。

// PHP 5.4 ：用方括號來直接取用元素
$el = getElements()[1];

也許 PHP 不像其他語言一開始就將這些語法考慮進來，但若是能更深入瞭解 PHP 語法的話，那麼程式碼就可以更精鍊一些。

瞭解原生函式

PHP 也已經提供很多有用的函式，但很多開發者常常忽略它們，然後就自己寫一段相同作用的程式碼了。

舉個例子：如果我們想知道第一個陣列裡的元素是否存在於第二個陣列裡，那麼我們可能會寫出以下的程式碼。

// Bad
$diff_ids = array();
foreach ($ids as $id) {
   if (!in_array($id, $actual_ids)) {
      $diff_ids[] = $id;
   }
}

但 PHP 其實有個 array_diff 函式可以使用，而且速度絕對比我們自己寫的程式碼快得多。

// Good
$diff_ids = array_diff($ids, $actual_ids);

所以多去瞭解 PHP 提供了什麼函式讓我們使用，這樣寫出來的程式碼才能事半功倍。

瞭解技術原理

雖然在 PHP 上已經有一堆的不錯的工具可以使用，但這不表示我們不需要瞭解它們背後的原理，像是 HTTP 請求與回應、資料庫存取、檔案存取等。當把這些原理弄清楚之後，就可以用更接近底層的思維來理解別人寫的程式碼。

學會 SPL 及內建介面

在 PHP 5 推出的時候，加入了 Standard PHP Library 及一些內建的 Interface 。以往因為它們剛推出時變動很大，而且也不是有很多人瞭解它們，因此有關於它們的教學非常少。不過現在 SPL 已經相當成熟，熟悉它們的話可以幫我們寫出更簡潔的 PHP 程式碼。

＊Standard PHP Library (http://www.php.net/manual/en/book.spl.php)
＊Predefined Interfaces (http://www.php.net/manual/en/reserved.interfaces.php)


第二式：開發工具

除了瞭解 PHP 本身之外，我們也要有好的工具來讓我們的開發更順手。

編輯器

首先是編輯器，最基本的要求一定要能支援 PHP 的語法高亮度。而好一點的編輯器也要能提供語法自動完成，並顯示相關的 API 說明。有些編輯器還能幫我們找到變數、函式或類別是在哪個檔案定義的，並且整合了其他開發工具。

這裡我推薦 NetBeans for PHP ，它在這幾個功能上面都表現得相當優秀，更重要的是它是免費軟體。其他還有 Eclipse PDT 或是 PHPStorm ，也都是非常好的選擇。

＊NetBeans for PHP (http://netbeans.org/)
＊Eclipse PDT (http://www.eclipse.org/projects/project.php?id=tools.pdt)
＊PhpStorm (http://www.jetbrains.com/phpstorm/)

除錯工具

有時候在程式執行時總是會發生錯誤，我們會需要知道錯誤是如何發生的。而 PHP 預設的除錯訊息比較陽春，有時候不容易看出它的錯誤實際發生位置。這時候我們就要借重除錯工具的幫忙。好的除錯工具最基本的要有中斷點的設置，也可以顯示完整的執行堆棧資訊，當然變數內容追蹤也是必要的。這些特色都可以協助我們除錯。

通常有經驗的 PHP 開發者，都會在自己的開發環境上安裝 Xdebug 來讓 PHP 出現錯誤時，顯示更多有用的訊息。另外 FirePHP 也可以幫我們把錯誤訊息送到 Firefox 瀏覽器，方便我們在 Firebug 中直接查看 PHP 的相關資訊。

＊Xdebug (http://xdebug.org/)
＊FirePHP (http://www.firephp.org/)

版本控制

接著是版本控制，到現在，還有一些公司其實並沒有使用版本控制系統。這些公司的 PHP 開發人員可能還是習慣在線上備份舊程式碼，然後再把新程式碼利用 FTP 傳上去。這樣一來不僅會讓接手維護的人產生混亂，而也會有安全上的問題。

而版本控制系統的好處有以下幾點：

＊程式碼可以有歷史紀錄，所以可以隨時還原到舊版本。
＊可以半自動化的幫我們解決多人開發時所發生的程式碼衝突。
＊可以幫我們對歷史紀錄做分支，以做到不同版本並行開發的模式。

所以如果還沒有使用版本控制系統，那麼就直接選用目前最多人推薦的 Git 吧。各位可以先到 GitHub 上開一個 Repository 來練習 Git 的操作流程。至於教材的部份，我推薦 ihower 寫的 Git 教學。

＊GitHub (http://github.com/)
＊Git 教育訓練課程投影片 (http://ihower.tw/blog/archives/6696/)


第三式：成為團隊一份子

如果把程式碼分五級，我想大致可以這麼分：

＊第一級：要能對得起自己的良心。
＊第二級：不能考驗測試人員的耐心。
＊第三級：要能得到上頭的歡心。
＊第四級：要能獲得客戶的信心。
＊第五級：要能受到其他開發者的關心。

其他的開發者通常就是你身邊的伙伴，如果你寫的程式碼讓他們很頭大的話，就很難成為這個團隊的一份子。

在很多公司裡，即使部門裡有好幾位開發人員，但我想各自為政的狀況可能還是比較多一些。學習如何跟別人一起寫出好程式，我想是很多 PHP 開發者必須瞭解的課題。不過要真正成為一個團隊其實滿困難的，所以在初期，我們可以從幾個方向入手。

良好的程式架構

通常如果團隊裡選了一個 Framework ，那麼這個 Framework 的程式架構就必須要讓大家都熟悉。如此一來溝通與開發的成本就會相對減少很多，當然前提是不能抗拒團隊所選擇的 Framework ，除非這個 Framework 真的選得不好。

遵守編碼標準

不少 PHP 開發者寫程式都很隨心所欲，可能這個月用這個風格，下個月又換了一套。其實這樣會阻礙團隊裡其他人來 Review 自己的程式碼。如果團隊已經有了一套編碼標準，那麼就遵守它吧。如果還沒有，那麼我推薦大家採用 PHP-FIG 這個社群所制定的 PSR 標準。

＊PHP-FIG (https://github.com/php-fig/fig-standards)

套件管理

以往我所維護的 PHP 專案裡，都會用到很多高手寫的套件。不過這些專案都會有個共同的毛病：套件載入的方式參差不齊。每個接手維護的人都會有自己載入套件的習慣，導致整個專案的架構非常破碎。現在， PHP 社群推出了一個很棒的工具叫 Composer 。它可以幫我們把專案中的套件集中管理，甚至還可以讓我們做自動載入。如果你的專案裡會用到很多第三方套件，那麼相當推薦你試一試它。

＊Composer (http://getcomposer.org/)
＊Packagist (https://packagist.org/)


第四式：學會把程式寫活

光是學會跟其他人一起寫程式還是不夠的，如果我們所開發出來的程式碼不容易擴充與維護，那麼久了這個團隊也還是會分崩離析。

Any fool can write code that a computer can understand. Good programmers write code that humans can understand. - Martin Fowler

一個能夠被維護的程式碼，是被人看懂的程式碼。如果程式碼裡面沒有人話，那麼這段程式碼存在的意義就不見了。

以抽象角度看事物

我們可以利用抽象的角度來重新看待程式碼，把實作隔離在介面之後。在這方面的箇中好手，物件導向就是其中之一。例如我們常常會在程式中寫出類似這樣的程式碼：

// 找出特定作者的所有文章
$sql = 'SELECT * FROM articles WHERE author = :author';
$sth = $dbh->prepare($sql);
$sth->execute(array(
    ':author' => 'jaceju'
));
$articles = $sth->fetchAll();　 

大部份的人都會習慣直接這樣操作資料庫，但是如果今天我們需要不同的資料來源，那麼它就綁死在關聯式資料庫上；而且如果我們想要重複使用這段邏輯時，那麼這段程式碼就很明顯地被綁在這支 PHP 裡了。怎麼解決呢？

我們可以簡單地利用類別包裝這一段邏輯，讓它在呼叫時看起來更人性化：

// 找出特定作者的所有文章
$blog = new Blog();
$articles = $blog->fetchArticlesByAuthor('jaceju');

這麼一來，不但程式語意更清楚，我們也隔絕掉了資料庫的實作，而其他地方需要重複使用這段程式碼時，只要呼叫同一個類別方法就可以了。

讓程式容易佈署

寫完的程式一定會佈署到線上環境執行，但是如果程式跟系統的相依性太高時，在佈署時就會很麻煩。例如以前很多人在 include 外部檔案時，習慣把路徑寫死。

＜?php
include '/home/web/my/config.php';

這麼一來程式碼就只能在那個環境下才能執行。這是相當不好的做法，因為如果需要把程式碼搬到另一個位置去執行時，就很容易造成佈署上的麻煩。

好的程式架構應該要把相關的引用檔案都集中，再利用相對於目前執行檔案的路徑去載入。通常我們可以使用 DIR 這個執行時期常數來取得目前執行檔的絕對路徑，然後再從這個路徑去載入相對路徑的檔案，讓程式不再依賴系統的實體路徑。

＜?php
include __DIR__ . '/config.php';
// 假設 __DIR__ 在執行時期的值為 "/home/web/my"

當然這只是其中一個環節；越讓程式儘可能不相依系統環境，佈署的困難度也就會越低。

讓系統可以被擴充

一開始做對系統純屬神話，要將系統寫活來應付變化

大家都知道，系統很難一開始就做對，所以一定會有新增的功能需求。但是每次新增程式碼時，就會讓系統變成疊床架屋，變得越來越難以維護。要儘可能把程式寫得活一些，讓新增的程式碼可以不用在破壞原有程式的狀況下被加入。

我想小時候大家都看過非常熱血的組合機器人卡通，這些機器人通常能夠組合或變形，甚至不同的機器人之間的組件也可以交換使用，為什麼呢？它們靠的就是統一的介面。

換句話說，系統要能夠靈活地被擴充的話，我們就要先將統一的介面與適當的插入點定義下來。而在分析這樣的系統架構時，或多或少都會接觸到所謂的設計模式。雖然我個人不建議一開始就把設計模式帶入程式裡，但確實有幾個簡單的 Patterns 可以幫我們完成一個靈活的程式架構，像是 Template Method 和 Observer 等。

當然不是單用這些 Patterns 就可以做出容易擴充的系統，其實還有很多其他需要考慮的部份。像是模組化的功能設計，易於使用的管理介面等，這些都是讓系統可以變得更易擴充的要素。


第五式：自我要求

學習跟團隊一起開發很重要，但個人的自我要求也不可以欠缺。雖然 PHP 是個自由的語言，但不表示你就能亂寫。多數時候我們寫的程式碼可能不會讓電腦抱怨，可是如果不把安全的寫法時時牢記在心的話，就會提供駭客入侵系統的機會。

注意安全

最重要的就是避免一些常見的漏洞，如果程式中沒有正確防範使用者的輸入時，那麼就可能帶來嚴重的問題，像是： SQL Injection 、 Cross Site Script (XSS) 、 Cross Site Request Forgery (CSRF) 都是不可不注意的部份。

另外也要記住「不要信任瀏覽器所回傳的任何資訊，也不要輸出任何敏感的資訊」，在 PHP 中，對輸入用 Filter 去過濾。在輸出時要記得做好 escape 。

開發時嚴格，上線時寬鬆

另外 PHP 程式發生警告或錯誤時，通常會出現可以被追查的錯誤訊息，這在開發時是很有幫助的。可是到了正式環境，這些資訊就有可能會被駭客利用。所以我們在開發 PHP 程式時，一定要記得儘可能解決掉所有的警告及錯誤。而在線上環境時，要記得把這些訊息關閉，改用 log 的方式來記錄。


第六式：效能

我想很多現在已經有很多網站服務可以應付大家日常的需求了，不過在這些網站身體裡的怪物越長越大時，就一定會遇到一個問題：那就是非常慢。

因此，網站的效能就是很多人追求的目標，而語言的效能更是被拿出來比較的重點。這點老實說 PHP 確實是有先天上的劣勢，不過這不表示 PHP 真的很差。在 PHP 5.3 及 PHP 5.4 之後，它的執行效能已經有很明顯的進步。 當然除了語言引擎的效能外，其實最大的問題還是出在我們自己過於把效能問題集中在一個點上面。

原則

其實有時候用一些原則，就可以讓程式效能突飛猛進。以下我列了一些我自己撰寫 PHP 時常用的原則：

＊不做重複的事
＊放到背景執行
＊空間換取時間
＊執行路徑越短越好
＊保持輕量化
＊必要時才初始化
＊有異動才更新
＊資料少時全抓、?資料多時分段抓
＊事先計算
＊善用快取

舉我們最常用的費式級數為例，我們最常看到的實現方式就像這樣：

function fib($n) {
    if ($n < 2) return $n;
    $f[$n] = fib($n - 2) + fib($n - 1);
    return $f[$n];
}

echo fib(30), "\n";
// 結果： 832040 ，共執行 5.59556889534 秒

這段程式碼在我自己的電腦上執行這個程式大約需要 5 到 6 秒。但如果我在上面加上兩行程式碼：

function fib($n) {
    static $f = array();
    if (isset($f[$n])) return $f[$n];
    if ($n < 2) return $n;
    $f[$n] = fib($n - 2) + fib($n - 1);
    return $f[$n];
}

echo fib(30), "\n";
// 結果： 832040 ，共執行 0.002144813537 秒

它的執行時間就剩下 0.002 秒。

神奇嗎？其實一點也不，我只是遵守了「不做重複的事」這個原則，利用 static 變數來記住已經算過的值。

所以當你越瞭解語言，就有機會用更簡單的方法來提升效能。

當然如果已經達到語言本身的瓶頸時，那就朝其他方向下手吧。在「奧巴馬籌款網站的製作過程」這篇文章裡，就提到了很多提升效能的方式。當然，他們也用到了 PHP 。

＊奧巴馬籌款網站的製作過程 (http://www.ruanyifeng.com/blog/2012/12/obama_fundraising_website.html)


第七式：強健的程式碼

不論是你個人或是整個團隊所開發出來的程式碼，到後面都有可能越變越糟。近年來社群已經幫 PHP 開發許多軟體工程的技術與流程，讓我們的程式碼可以更加地強健。以下幾項技術都是可以幫助我們做到這件事的途徑。

測試

當你的程式越寫越大時，不論在新增或修改功能時，就可以常會發生把舊有的功能改壞的狀況。測試就是一個能確保你不會把系統改壞的工具。而且有時候如果客戶回報 bug 時，你也可以透過撰寫測試的方式來建立問題發生的情境，進而找出潛藏在程式裡的錯誤。

自動化測試框架

測試通常需要一些自動化測試框架，在 PHP 裡最有名的就是 PHPUnit 。另外也有一派開發者提倡 TDD ，也就是測試驅動開發，它強調的是測試先行，讓程式在開發時能有測試案例做依據。不過近年來從 TDD 延伸出一個新的分支，叫做 BDD 也就是行為驅動開發。 不同於 TDD ， BDD 更強調使用者在操作程式上的行為，所以開始為開發者所重視。當然 PHP 也有相關的 BDD 框架，較知名的有 PHPSpec 及 Behat 兩種。

＊PHPUnit (http://www.phpunit.de/)
＊PHPSpec (http://www.phpspec.net/)
＊Behat (http://behat.org/)

不論我們要不要使用 TDD 或 BDD ，最重要的是透過測試幫我們的程式買好保險，這樣才能讓程式碼能夠平安長大。

重構

當有了測試為基礎，我們就可以對我們的程式碼進行重構。重構並不是重 Go ，而是讓程式碼不會因為越寫越大而漸漸腐敗而發出臭味。重構一定要搭配測試來實行，這樣才不會因為重構而改壞了現有的功能。其他語言例如 Java 所常見的重構技巧大多都可以用在 PHP 上，所以推薦大家 Martin Fowler 的「重構」一書，一定會讓你在程式碼的整理功能大增。

雖然 PHP 沒有好的工具可以做到複雜的重構，但是現在的一些 IDE 都可以幫我們做到簡單的重構了。像是 NetBeans 就有針對 PHP 變數、方法重命名的重構功能。

不要害怕修改程式，小步的重構會讓你的程式碼更加強壯。


第八式：不要只學寫程式碼

我想也有很多人認為身為一個 PHP 開發者，只要把 PHP 程式寫好就好，但那樣其實是不夠的。在專案越來越複雜的狀況下，其實要瞭解的知識也會越來越多。要當一個更優秀的 PHP 開發者，以下的知識都是必要的。

系統管理

PHP 開發人員不但要瞭解程式運作的系統環境，更要能夠管理這個系統。基本的系統安裝、 Shell Script 、 Service 管理、排程設定等等都是必要的知識。而且越深入瞭解系統，相對的我們就能提供程式更多的解決方案。

學習使用雲端服務

有些 PHP 開發者是靠接案為生，以往他們會在 IDC 放置自己的機器來服務客戶，但這樣一來自己維護的成本就相對很高。所以在現在的雲端時代，就有很多平台服務供我們選擇。像是 AWS / Linode / Heroku 等服務，它們之間也存在著一些差異，在使用前一定要多去瞭解。

推薦兩篇很不錯的介紹文，雖然是 2012 年的文章，但還是非常具有參考價值。

＊Hosting Plan (http://blog.gslin.org/archives/2012/04/19/2865/hosting-plan/)
＊Startup : How to choose Hosting Plan? (http://blog.xdite.net/posts/2012/04/18/startup-hosting-plan/)

學習其它語言

當你越熟悉 PHP 時，同時你也會瞭解它的的極限。所以不要什麼東西都想要用 PHP 解決，其他語言也提供了很多不錯的工具。 事實上這年頭不多學一兩種語言在身上，可能就很難存活下去了。?身為一個 Web 開發者，首先最重要的是學會瀏覽器上的 JavaScript 。另外可以的話最好也能學習 Perl / Python / Ruby / Node.js 或是其平台的安裝，因為有很多不錯的 Web 開發工具都會用到這幾個語言的平台。

如果想要更進一步透過 PHP 底層來加強程式效能，那麼 C 語言的學習也是必要的。

另一個跟程式無關的語言，就是英文。很多 PHP 的新特色或新工具都是國外的網站先發佈消息的，不要害怕它們是英文所以就不去看。

還有 PHP 的一些討論資訊也非常值得注意，裡面會有很多 PHP 未來的開發走向。這裡列舉的是幾個較具代表性的網站，各位可以從這些地方再去找出更多的連結。

＊PHP Master (http://phpmaster.com/)
＊nettuts+ (http://net.tutsplus.com/category/tutorials/php/)
＊PHP Mailing Lists (http://php.net/mailing-lists.php)


第九式：學會用輪子，也要學會造輪子

除了工作中所用到的工具之外，各位也可以試著用 PHP 做一些有趣的工具，然後到 GitHub 分享成果。只要能保持你對 PHP 的熱情，我相信 PHP 一定會回饋你更多。

最後，為大家介紹台灣 PHP 界的代表性人物： c9s 。他開發了很多非常有用的 PHP 工具，也使得他在 GitHub 上的活躍度是在全世界排名第二。

＊c9s (https://github.com/c9s)


總結

如果你喜歡 PHP ，那麼希望這樣的介紹能讓你對它有更深一層的認知。當然這些招式只是起手式而已，真正的功夫必須靠大家勤練才行。
_______________________________________________________________

﻿■ [源碼新聞] Chrome 與 Firefox 展示不需插件的視訊通話

謝良奇／編譯

透過無需任何插件即可進行視訊通話方式，Google 與 Mozilla 的開發者日前展示了雙方 WebRTC 實作的互通性。在 W3C 與 IETF 社群中開發的 WebRTC 將成為未來標準，不論是在伺服器與瀏覽器，或瀏覽器彼此之間，HTML5 瀏覽器進行高清視訊連線時將不再需要借助第三方或非標準的插件。

讓兩個不同的瀏覽器能夠透過 WebRTC 進行溝通，是該項標準發展中的重要里程碑。使用 Chrome 25 Beta 與最近的 Firefox Nightly，Mozilla 的創新長 Todd Simpson 和 Google 產品管理總監 Hugh Finnan 已經能夠從各自的瀏覽器進行視訊交談。

雙方連線透過 AppRTC 的 Google App-Engine 實作加以管理，兩套瀏覽器在音訊與視訊上都使用了 Opus 與 VP8 codecs，並在網路連線上使用 ICE (Interactive Connectivity Establishment)。對於如何僅用 JavaScript 來建立 RTCPeerConnection，以及如何自行設定互通性展示，Mozilla 提供了進一步的細節。

Google 是在 2011 年 6 月推出 WebRTC 框架，並且於 2012 年 1 月開始整合至 Chrome 中。2012 年 4 月 Mozilla 在 IETF 首次展示了其 WebRTC 整合。隨後於 7 月，Google 提出以 VP8 和 Opus 作為 WebRTC 的標準 codecs，以確保互通性的基礎。


相關網址：

1. Chrome 與 Firefox 展示不需插件的視訊通話
http://www.h-online.com/open/news/item/Chrome-and-Firefox-demonstrate-plug-in-free-video-chat-1797585.html
_______________________________________________________________

■ [源碼新聞] OpenStreetMap 有了新的地圖編輯器

謝良奇／編譯

MapBox 為協同地圖專案 OpenStreetMap，推出了新版網路地圖編輯器的 alpha 版本。名為 iD 的新編輯器使用了 JavaScript 與 D3.js 資料視覺化程式庫。開發工作由 Knight 基金會撥付的補助金贊助，目的是為了替 OpenStreetMap 專案發展新的工具。iD 最後會取代 OpenStreetMap 的現有編輯器 Potlatch 2。和過去編輯器不同，iD 並不採用 Flash 技術。Potlatch 2 原作者 Richard Fairhurst 也參與了新編輯器的開發。

OpenStreetMap 編輯器是用來更新現有地圖，以及輸入新的道路、建築、地標，所依靠的是使用者記錄的 GPS 路線，或是透過描繪航拍影像手動輸入。專案的編輯器越容易使用，就越容易吸引新的貢獻者，進而改善資料集。銷售以 OpenStreetMap 為基礎的商業地圖服務的 MapBox，為新編輯器創造了直觀且易用的使用者介面。

新使用者介面設計走簡約路線，將編輯控制項疊加在地圖檢視圖上，會隨著所編輯物件而改變。為此，開發團隊撰寫了新的標簽引擎，用以處理多重多邊形物體與關係，並且在設計時就將性能考慮在內。該軟體之後版本規劃中的功能包括新的預設系統與翻譯系統。預設系統讓用戶能更輕鬆地從預先定義的設定中，增加並修改地圖特徵，而翻譯系統則為地圖資料提供國際化功能。

有興趣的用戶可以在展示系統上嘗試新的編輯器。iD 的程式碼位於 GitHub 上，採 WTFPL 授權。該授權對用戶沒有任何限制，雖然目前不被開放源碼組織 (Open Source Initiative) 歸類為開放源碼授權，但自由軟體基金會 (Free Software Foundation) 視其為相容 GPL 的自由軟體授權。


相關網址：

1. OpenStreetMap 有了新的地圖編輯器
http://www.h-online.com/open/news/item/OpenStreetMap-gets-a-new-map-editor-1797939.html
_______________________________________________________________

■ [源碼新聞] Facebook 貢獻主機板設計架構予開放硬體推動團隊

黃郁文／編譯

不僅軟體專案可以採開放共工的態度來發展，如今、這股開放風潮也已經吹入了硬體產業，催生了諸如「開源硬體聯盟 (Open Source Hardware Association, OSHWA)」、OpenCores 這類的推動組織，以及 Arduino 這樣日漸興盛的開放軟硬體協作專案，目前此一趨勢連網路社交平台重角 Facebook 都加入了！日前，Facebook 在本年度初，貢獻其為資料中心主機板所設計的共同插槽架構 (common slot architecture specification)，給予 Open Compute Platform (OCP) 這個與開放硬體推動有關的團隊。OCP 是在二年前由一群 Facebook 工程師所自發創立的團隊，目的是要透過群策群力的方式，研發出可提升資料中心效率的電腦系統基礎架構，其首次高峰會更是直接於 Facebook 總部辦公室舉行。

這個稱為「Group Hug」的主機板架構，係由 Facebook 工程師所設計，屬於伺服器主機板的類別，其可以支援多種系統單晶片 (System on a chip, SoC)，並支援將微處理器置於擴充板上的運作方式。據 OCP 團隊表示：Advanced Micro Devices、Applied Micro、Calxeda，以及 Intel 這些重要的微處理器生產公司，都已展開對 Group Hug 主機板的支援，未來使用者將得以使用 Intel 晶片，甚至 ARM 系列處理器，取代目前 Group Hug 預設的 AMD 晶片。其他硬體製造商若有興趣，亦可與 OCP 團隊聯繫，取得 Group Hug 主機板的細部規格與相關資料。

OCP 團隊的主要帶領者 Frank Frankovsky 強調，此一開放架構對於未來市場的創新，可以帶來許多嶄新的貢獻！Group Hub 這樣的主機板架構，可以讓資料中心的操作人員輕易進行伺服器升級，是個透過開放架構與時俱進的技術。另外，Group Hug 主機板的開放特性，也讓其得以走在供應商中立 (vendor-neutral) 的中道路線上，該主機板框架未來將可適用於與各式 SoC 配合，而不再受限於特定的系統單晶片供應商。也因為採納此種共通插座的特性，前述微處理器製造大廠，多數也都願意接受 Group Hug 的設計架構，因為此舉將可帶動消費者更換新處理器的風潮，進而提高 CPU 銷售量。因為從趨勢來進行觀察，近年來不論是 Dell 或是 HP ，這些傳統硬體設備的製造與供應商，漸漸都開始將角色轉換成整體解決方案的提供者 (Total Solution Provider)，以更高的附加價值來銷售產品，所以 Group Hug 一方面獲得 Facebook 的支持，二方面其彈性作法或許也有機會嘉惠到處理器製造大廠，促其願意跳脫傳統，迎接開放。


相關網址：

1、Facebook 貢獻主機板設計框架給 Open Compute Platform 
http://www.theinquirer.net/inquirer/news/2237089/facebook-hands-off-motherboard-designs-to-the-open-compute-platform

2、Open Compute Project 推動網站
http://www.opencompute.org/about/

3、Arduino 開放源碼軟硬體平台推動網站
http://www.arduino.cc/
_______________________________________________________________

■ [源碼新聞] 跨國跨校合作的開放近用期刊平台 Episciences 近期上路！

黃郁文／編譯

不僅架構繁複的軟體專案可以透過開放共工的態度來發展，如今、這股開放風潮也為學術研究文獻發表，提供了適當的工具與模式運作上的示範，而進一步帶動了期刊系統開放近用 (Open Access) 的發展！Episciences Project 便為此種開放近用的期刊平台，在「法國國家科學研究中心 (French National Centre for Scientific Research)」轄下單位「科技傳播指導中心 (Centre for Direct Scientific Communication, CCSD)」，與法國 Grenoble 大學的通力合作下進行建置與運作。

Episciences Project 的內容，主要是召集一群對於開放期刊近用目標的數學家與志工，建置一個完整且搜尋便利的線上免費期刊系統。其一部份的內容來自於美國康乃爾大學所建置管理的 arXiv 系統，arXiv 的服務從 1991 年開始啟用，是一個在內容上著重數學與物理資源分享的期刊近用平台，廣受分享者與查閱者的使用，僅去年一年收集的專文作品即達 84,603 篇。而 Episciences Project 就是要在這樣的基礎之上，精化此種線上期刊分享平台的分類與捜尋架構。任教於劍橋大學並曾獲頒數學領域至高榮譽菲爾茲獎 (Fields Medal) 的教授 Tom Gowers，去年因為發動抵制學術研究出版商 Elsevier 的不公政策而聲名大噪，目前亦為 Episciences Project 的重要推手，其指出該計畫是要創造出一種目錄式結構的線上期刊平台，透過此一平台，使用者只要透過網路鏈結即可一窺文章的全貌，而對於文章的上傳者來說，亦可以透過該平台在最少成本、無須藉助商業出版商的前提下，自由不受限地發表自己的研究成果。

而這些藉由 Episciences Project 發表的線上期刊，後續亦可以透過某些機制進行線上同儕審閱 (peer review)，個別的線上期刊專案可以自訂審閱政策，擁有自己的編輯委員會，文章的作者亦可以同時透過 Episciences Project 與美國的 arXiv 系統發表文章，並且日後、也預計會加設其他功能的獨立頁面，例如、若作者與線上期刊專案的管理者同意，亦可以讓這些線上文章接受非匿名意見的評論，以活化學術辯論並激發創意分享。也就是說，架構上還是類同傳統期刊的出版過程，由學者與該領域的專才負責大部份的編輯和引註的工作，然而固定的機制可以透過平台進行自動化與線上化，以節省編輯與編排方面的成本，以進一步將未來商業出版商的工作，減少至僅需挑選適當文章來進行紙本印刷即可。Episciences Project 的領導人物，法國 Grenoble 的專任數學教授 Jean-Pierre Demailly，也透過 Nature 期刊的專訪指出：「Episciences Project 的設立主軸，是要展現全球的學術研究者，可以透過相互合作的胸襟開創期刊發表的新型態，此一新創系統所需成本主要為網站經營與硬體維護的支出，但卻可能改變學術圈在下一個世代的發展方向，這是很有意義的發展。而計畫本身已經得到法國政府明確的財務支援，預計本年度四月就可以上線讓大家使用。」


相關網址：

1、Episciences Project 與 arXiv 共創線上開放期刊 
http://www.h-online.com/open/news/item/Episciences-Project-to-create-arXiv-open-access-journals-1788981.html

2、數學家們決定要自己出版研究成果！
http://www.nature.com/news/mathematicians-aim-to-take-publishers-out-of-publishing-1.12243
_______________________________________________________________

■ [源碼新聞] 2013 年三月份社群活動列表

作者是 OSSF電子報團隊／整理

三月份的活動列表出爐囉！有興趣的朋友們請多多邀請您的朋友一同前往參與！另外，由於活動列表出來的時間比較早，若後續有活動希望也能一起做宣傳的朋友們，記得來信告訴我們喔！信箱： ossfepaper@openfoundry.org 。


MozTW Lab @ TP（每週五，3/1、3/8、3/15、3/22、3/29）
地點：台北市中山區民生東路二段 114 號（咖啡．銅號）
時間：19:30~23:00
活動資訊：https://groups.google.com/group/moztw-general

Taipei Wikipedian Weekly Meetup: Community Operation 維基台北定期聚 — 社群經營工作雙週聚（雙週一，3/4、3/18）
地點：台北市松山區民生東路三段 140 巷 11 號
時間：18:00~20:00
活動資訊：http://zhwp.org/zh-tw/WP:WPTP-S

TOSSUG BoF（每週二，3/5、3/12、3/19、3/26）
地點：台北市南昌路二段 200 號（Mix Coffee & Tea）
時間：18:00~21:00
活動資訊：http://www.tossug.org/

KSDG 高雄開發者社群 (Kaohsiung Software Developer Group) （3/7）
地點: 高雄軟體園區 B 棟 708 室（高雄市前鎮區復興四路 2 號 7 樓 708 室）
時間: 19:30~21:30
社群網址: https://www.facebook.com/groups/KSDGroup

KuLUG 大高雄 Linux 使用者協會固定聚會（每週四，3/7、3/14、3/21、3/28）
地點：台灣高雄市左營區富民路 391 號
時間：19:00~22:00
活動資訊：http://kalug.linux.org.tw/

Hackathon in Taichung (HTC) meetup（3/7、3/21）
地點：台中市中港路二段 60-3 號 （默契咖啡）
時間：19:00~22:00
活動資訊：https://groups.google.com/forum/?fromgroups#!forum/hackathonintaichung

Hacking Thursday（每週四，3/7、3/14、3/21、3/28）
地點：台北市重慶南路一段 1 號 2 樓（MarketPlace）
時間：19:30~22:30
活動資訊：http://www.hackingthursday.org/

MOSUT (Meet Open Source User in Tainan)（3/9、3/23）
地點：台南市中西區樹林街二段 33 號（國立臺南大學府城校區思誠樓 F302）
時間：14:00~17:00
社群網址：http://code.google.com/p/mosut/

Taipei Wikipedia Moonthly Meetup: Writing Day 維基台北定期聚—假日寫作月聚（3/9）
地點：台北市大安區泰順街 60 巷 11 號（小哲食堂）
時間：14:00~16:00
活動資訊：https://zh.wikipedia.org/wiki/Wikipedia:WPTP-W

台中自由軟體愛好者固定聚會（單週一，3/11、3/25）
地點：台中市中港路二段 60-3 號（默契咖啡）
時間：19:00~22:00
活動資訊：https://groups.google.com/forum/#!forum/taichung-foss-fans-meeting

Cocoaheads - Kaohsiung（3/14）
地點: 高雄軟體園區 B 棟 708 室（高雄市前鎮區復興四路 2 號 7 樓 708 室）
時間: 19:30~21:30
社群網址: https://www.facebook.com/groups/cocoaheads.kaohsiung/

SITCON 學生計算機年會（3/16）
地點：國立台灣科技大學 國際大樓 1 樓 IB101
時間：8:30~17:00
活動資訊：http://sitcon.org/2013/

Node.js Taiwan Party 28（3/20）
地點：台北市南京西路 18 巷 8-2 號 3 樓（店名: Changee, 位於 "So thats me" 服飾店的 3 樓）
時間：19:30~22:00
活動資訊：http://nodejs.tw/

WoFOSS 好自由小組聚會（3/20）
地點：伯朗咖啡-北科大店（台北市忠孝東路三段 52 號 1 樓）
時間：19:30~22:00
活動資訊：http://wofoss.blogspot.tw/
_______________________________________________________________


□ 關於本報 □__________________________________________________

◎ 主編︰洪華超
◎ 法律專欄編輯︰葛冬梅
◎ 技術編輯︰曾義峰
◎ 執行編輯︰王怡凱、林誠夏、林珈宏、陳蕙蓁、彭冠雯
◎ 外稿編譯︰黃湘婷、黃郁文、蕭惟杰、謝良奇

本電子報自行採訪、報導、編譯、撰寫文章之智慧財產權屬於中央研究院，採用創用 CC「姓名標示－禁止改作－非商業性」授權條款臺灣 3.0 版授權散布，歡迎在不變更內容的前提下，以任何形式重製與散布本報，但必須遵守下列義務︰（1）不得為商業目的之利用；（2）必須標明本電子報智慧財產權屬於中央研究院；（3）完整引用本著作權說明。

若欲以創用 CC「姓名標示－禁止改作－非商業性」授權條款臺灣 3.0 版以外的方式利用上述文章，請與自由軟體鑄造場編輯群（ossfepaper at openfoundry.org）聯絡。

非自由軟體鑄造場自行撰寫的單篇文章，其智慧財產權利屬於原作者所有，其以非專屬的方式授權予自由軟體鑄造場運用，而與本電子報其他文章併以創用 CC「姓名標示－禁止改作－非商業性」授權條款臺灣 3.0 版的方式進行散布。

若欲以創用 CC「姓名標示－禁止改作－非商業性」授權條款臺灣 3.0 版以外的方式利用個別作者的文章，請自行與該作者聯繫，或透過自由軟體鑄造場編輯群（ossfepaper at openfoundry.org）來轉發聯絡訊息。

授權條款全文請見︰
http://creativecommons.org/licenses/by-sa/3.0/tw/legalcode
授權條款簡介請見︰
http://creativecommons.org/licenses/by-sa/3.0/tw/deed.zh_TW

若欲訂閱本電子報，請至以下網址︰
http://www.openfoundry.org/tw/news

如欲取消訂閱這份電子報，可透過自由軟體鑄造場新聞首頁左上方之自動退訂機制︰
http://www.openfoundry.org/tw/news

或寄發電子郵件至︰ossfepaper@openfoundry.org，以進行人工退訂。